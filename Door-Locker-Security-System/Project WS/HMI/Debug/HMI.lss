
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00002da6  00002e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080012a  0080012a  00002f04  2**0
                  ALLOC
  3 .stab         000024f0  00000000  00000000  00002f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5f  00000000  00000000  000053f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006153  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006293  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006403  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a89f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 33       	cpi	r26, 0x36	; 54
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e1       	ldi	r26, 0x1B	; 27
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e1       	ldi	r24, 0x1B	; 27
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 g_repassword[MAX_PASSWORD];
uint8 g_match = FALSE;
uint8 g_counter = 0;

int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c3 59       	subi	r28, 0x93	; 147
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 key;

	/* Create configuration structure for UART driver */
	UART_ConfigType uart_config_Ptr = {EIGHT_BITS, DISABLED, ONE_STOP_BIT, 9600};
     b60:	ce 01       	movw	r24, r28
     b62:	88 57       	subi	r24, 0x78	; 120
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	c1 57       	subi	r28, 0x71	; 113
     b68:	df 4f       	sbci	r29, 0xFF	; 255
     b6a:	99 83       	std	Y+1, r25	; 0x01
     b6c:	88 83       	st	Y, r24
     b6e:	cf 58       	subi	r28, 0x8F	; 143
     b70:	d0 40       	sbci	r29, 0x00	; 0
     b72:	83 e2       	ldi	r24, 0x23	; 35
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	cf 56       	subi	r28, 0x6F	; 111
     b78:	df 4f       	sbci	r29, 0xFF	; 255
     b7a:	99 83       	std	Y+1, r25	; 0x01
     b7c:	88 83       	st	Y, r24
     b7e:	c1 59       	subi	r28, 0x91	; 145
     b80:	d0 40       	sbci	r29, 0x00	; 0
     b82:	97 e0       	ldi	r25, 0x07	; 7
     b84:	cd 56       	subi	r28, 0x6D	; 109
     b86:	df 4f       	sbci	r29, 0xFF	; 255
     b88:	98 83       	st	Y, r25
     b8a:	c3 59       	subi	r28, 0x93	; 147
     b8c:	d0 40       	sbci	r29, 0x00	; 0
     b8e:	cf 56       	subi	r28, 0x6F	; 111
     b90:	df 4f       	sbci	r29, 0xFF	; 255
     b92:	e8 81       	ld	r30, Y
     b94:	f9 81       	ldd	r31, Y+1	; 0x01
     b96:	c1 59       	subi	r28, 0x91	; 145
     b98:	d0 40       	sbci	r29, 0x00	; 0
     b9a:	00 80       	ld	r0, Z
     b9c:	cf 56       	subi	r28, 0x6F	; 111
     b9e:	df 4f       	sbci	r29, 0xFF	; 255
     ba0:	88 81       	ld	r24, Y
     ba2:	99 81       	ldd	r25, Y+1	; 0x01
     ba4:	c1 59       	subi	r28, 0x91	; 145
     ba6:	d0 40       	sbci	r29, 0x00	; 0
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	cf 56       	subi	r28, 0x6F	; 111
     bac:	df 4f       	sbci	r29, 0xFF	; 255
     bae:	99 83       	std	Y+1, r25	; 0x01
     bb0:	88 83       	st	Y, r24
     bb2:	c1 59       	subi	r28, 0x91	; 145
     bb4:	d0 40       	sbci	r29, 0x00	; 0
     bb6:	c1 57       	subi	r28, 0x71	; 113
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	e8 81       	ld	r30, Y
     bbc:	f9 81       	ldd	r31, Y+1	; 0x01
     bbe:	cf 58       	subi	r28, 0x8F	; 143
     bc0:	d0 40       	sbci	r29, 0x00	; 0
     bc2:	00 82       	st	Z, r0
     bc4:	c1 57       	subi	r28, 0x71	; 113
     bc6:	df 4f       	sbci	r29, 0xFF	; 255
     bc8:	88 81       	ld	r24, Y
     bca:	99 81       	ldd	r25, Y+1	; 0x01
     bcc:	cf 58       	subi	r28, 0x8F	; 143
     bce:	d0 40       	sbci	r29, 0x00	; 0
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	c1 57       	subi	r28, 0x71	; 113
     bd4:	df 4f       	sbci	r29, 0xFF	; 255
     bd6:	99 83       	std	Y+1, r25	; 0x01
     bd8:	88 83       	st	Y, r24
     bda:	cf 58       	subi	r28, 0x8F	; 143
     bdc:	d0 40       	sbci	r29, 0x00	; 0
     bde:	cd 56       	subi	r28, 0x6D	; 109
     be0:	df 4f       	sbci	r29, 0xFF	; 255
     be2:	98 81       	ld	r25, Y
     be4:	c3 59       	subi	r28, 0x93	; 147
     be6:	d0 40       	sbci	r29, 0x00	; 0
     be8:	91 50       	subi	r25, 0x01	; 1
     bea:	cd 56       	subi	r28, 0x6D	; 109
     bec:	df 4f       	sbci	r29, 0xFF	; 255
     bee:	98 83       	st	Y, r25
     bf0:	c3 59       	subi	r28, 0x93	; 147
     bf2:	d0 40       	sbci	r29, 0x00	; 0
     bf4:	cd 56       	subi	r28, 0x6D	; 109
     bf6:	df 4f       	sbci	r29, 0xFF	; 255
     bf8:	e8 81       	ld	r30, Y
     bfa:	c3 59       	subi	r28, 0x93	; 147
     bfc:	d0 40       	sbci	r29, 0x00	; 0
     bfe:	ee 23       	and	r30, r30
     c00:	31 f6       	brne	.-116    	; 0xb8e <main+0x48>

	/* Initialize both the LCD and UART driver */
	UART_init(&uart_config_Ptr);
     c02:	ce 01       	movw	r24, r28
     c04:	88 57       	subi	r24, 0x78	; 120
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	0e 94 e7 14 	call	0x29ce	; 0x29ce <UART_init>
	LCD_init();
     c0c:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_init>

	/* UART sends to microcontroller2 that it is ready */
	UART_sendByte(M1_READY);
     c10:	80 e2       	ldi	r24, 0x20	; 32
     c12:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>
	g_match = UART_recieveByte();
     c16:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
     c1a:	80 93 2a 01 	sts	0x012A, r24

	/* Take password from user if it is first time */
	if(g_match == FALSE)
     c1e:	80 91 2a 01 	lds	r24, 0x012A
     c22:	88 23       	and	r24, r24
     c24:	19 f4       	brne	.+6      	; 0xc2c <main+0xe6>
	{
		sequence_1(VALIDATE);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <sequence_1>


    while(1)
    {
    	/* Display main options */
    	LCD_clearScreen();
     c2c:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_clearScreen>
    	LCD_displayString("+: Change pass");
     c30:	80 e6       	ldi	r24, 0x60	; 96
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
    	LCD_goToRowColumn(1, 0);
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	0e 94 5f 14 	call	0x28be	; 0x28be <LCD_goToRowColumn>
    	LCD_displayString("-: Open door");
     c40:	8f e6       	ldi	r24, 0x6F	; 111
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>

    	/* Wait until user chooses an option */
    	do
    	{
    		key = KeyPad_getPressedKey();
     c48:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <KeyPad_getPressedKey>
     c4c:	fe 01       	movw	r30, r28
     c4e:	e9 57       	subi	r30, 0x79	; 121
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	80 83       	st	Z, r24
     c54:	fe 01       	movw	r30, r28
     c56:	e5 58       	subi	r30, 0x85	; 133
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	aa ef       	ldi	r26, 0xFA	; 250
     c60:	b3 e4       	ldi	r27, 0x43	; 67
     c62:	80 83       	st	Z, r24
     c64:	91 83       	std	Z+1, r25	; 0x01
     c66:	a2 83       	std	Z+2, r26	; 0x02
     c68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6a:	8e 01       	movw	r16, r28
     c6c:	09 58       	subi	r16, 0x89	; 137
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255
     c70:	fe 01       	movw	r30, r28
     c72:	e5 58       	subi	r30, 0x85	; 133
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	60 81       	ld	r22, Z
     c78:	71 81       	ldd	r23, Z+1	; 0x01
     c7a:	82 81       	ldd	r24, Z+2	; 0x02
     c7c:	93 81       	ldd	r25, Z+3	; 0x03
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4a ef       	ldi	r20, 0xFA	; 250
     c84:	54 e4       	ldi	r21, 0x44	; 68
     c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	f8 01       	movw	r30, r16
     c90:	80 83       	st	Z, r24
     c92:	91 83       	std	Z+1, r25	; 0x01
     c94:	a2 83       	std	Z+2, r26	; 0x02
     c96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c98:	fe 01       	movw	r30, r28
     c9a:	e9 58       	subi	r30, 0x89	; 137
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	60 81       	ld	r22, Z
     ca0:	71 81       	ldd	r23, Z+1	; 0x01
     ca2:	82 81       	ldd	r24, Z+2	; 0x02
     ca4:	93 81       	ldd	r25, Z+3	; 0x03
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e8       	ldi	r20, 0x80	; 128
     cac:	5f e3       	ldi	r21, 0x3F	; 63
     cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	44 f4       	brge	.+16     	; 0xcc6 <main+0x180>
		__ticks = 1;
     cb6:	fe 01       	movw	r30, r28
     cb8:	eb 58       	subi	r30, 0x8B	; 139
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
     cc4:	64 c0       	rjmp	.+200    	; 0xd8e <main+0x248>
	else if (__tmp > 65535)
     cc6:	fe 01       	movw	r30, r28
     cc8:	e9 58       	subi	r30, 0x89	; 137
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	60 81       	ld	r22, Z
     cce:	71 81       	ldd	r23, Z+1	; 0x01
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	93 81       	ldd	r25, Z+3	; 0x03
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	3f ef       	ldi	r19, 0xFF	; 255
     cd8:	4f e7       	ldi	r20, 0x7F	; 127
     cda:	57 e4       	ldi	r21, 0x47	; 71
     cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce0:	18 16       	cp	r1, r24
     ce2:	0c f0       	brlt	.+2      	; 0xce6 <main+0x1a0>
     ce4:	43 c0       	rjmp	.+134    	; 0xd6c <main+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce6:	fe 01       	movw	r30, r28
     ce8:	e5 58       	subi	r30, 0x85	; 133
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	60 81       	ld	r22, Z
     cee:	71 81       	ldd	r23, Z+1	; 0x01
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e2       	ldi	r20, 0x20	; 32
     cfa:	51 e4       	ldi	r21, 0x41	; 65
     cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	8e 01       	movw	r16, r28
     d06:	0b 58       	subi	r16, 0x8B	; 139
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	bc 01       	movw	r22, r24
     d0c:	cd 01       	movw	r24, r26
     d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	f8 01       	movw	r30, r16
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	80 83       	st	Z, r24
     d1c:	1f c0       	rjmp	.+62     	; 0xd5c <main+0x216>
     d1e:	fe 01       	movw	r30, r28
     d20:	ed 58       	subi	r30, 0x8D	; 141
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	88 ec       	ldi	r24, 0xC8	; 200
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d2c:	fe 01       	movw	r30, r28
     d2e:	ed 58       	subi	r30, 0x8D	; 141
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <main+0x1f0>
     d3a:	fe 01       	movw	r30, r28
     d3c:	ed 58       	subi	r30, 0x8D	; 141
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d44:	de 01       	movw	r26, r28
     d46:	ab 58       	subi	r26, 0x8B	; 139
     d48:	bf 4f       	sbci	r27, 0xFF	; 255
     d4a:	fe 01       	movw	r30, r28
     d4c:	eb 58       	subi	r30, 0x8B	; 139
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	9c 93       	st	X, r25
     d5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5c:	fe 01       	movw	r30, r28
     d5e:	eb 58       	subi	r30, 0x8B	; 139
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	d1 f6       	brne	.-76     	; 0xd1e <main+0x1d8>
     d6a:	28 c0       	rjmp	.+80     	; 0xdbc <main+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6c:	8e 01       	movw	r16, r28
     d6e:	0b 58       	subi	r16, 0x8B	; 139
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	fe 01       	movw	r30, r28
     d74:	e9 58       	subi	r30, 0x89	; 137
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	60 81       	ld	r22, Z
     d7a:	71 81       	ldd	r23, Z+1	; 0x01
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	f8 01       	movw	r30, r16
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
     d8e:	de 01       	movw	r26, r28
     d90:	af 58       	subi	r26, 0x8F	; 143
     d92:	bf 4f       	sbci	r27, 0xFF	; 255
     d94:	fe 01       	movw	r30, r28
     d96:	eb 58       	subi	r30, 0x8B	; 139
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	9c 93       	st	X, r25
     da2:	8e 93       	st	-X, r24
     da4:	fe 01       	movw	r30, r28
     da6:	ef 58       	subi	r30, 0x8F	; 143
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0x268>
     db2:	fe 01       	movw	r30, r28
     db4:	ef 58       	subi	r30, 0x8F	; 143
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	80 83       	st	Z, r24
    		_delay_ms(500);
    	}
    	while(key != '+' && key != '-');
     dbc:	fe 01       	movw	r30, r28
     dbe:	e9 57       	subi	r30, 0x79	; 121
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	80 81       	ld	r24, Z
     dc4:	8b 32       	cpi	r24, 0x2B	; 43
     dc6:	39 f0       	breq	.+14     	; 0xdd6 <main+0x290>
     dc8:	fe 01       	movw	r30, r28
     dca:	e9 57       	subi	r30, 0x79	; 121
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	80 81       	ld	r24, Z
     dd0:	8d 32       	cpi	r24, 0x2D	; 45
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <main+0x290>
     dd4:	39 cf       	rjmp	.-398    	; 0xc48 <main+0x102>

    	/* If user chooses to change password then get current password first then get the new password */
    	if(key == '+')
     dd6:	fe 01       	movw	r30, r28
     dd8:	e9 57       	subi	r30, 0x79	; 121
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	80 81       	ld	r24, Z
     dde:	8b 32       	cpi	r24, 0x2B	; 43
     de0:	09 f0       	breq	.+2      	; 0xde4 <main+0x29e>
     de2:	48 c3       	rjmp	.+1680   	; 0x1474 <main+0x92e>
    	{
    		g_counter = 0;
     de4:	10 92 2b 01 	sts	0x012B, r1
    		g_match = FALSE;
     de8:	10 92 2a 01 	sts	0x012A, r1
     dec:	b4 c1       	rjmp	.+872    	; 0x1156 <main+0x610>

    		/* Give the user 3 chances to enter current password correct */
    		while(g_match != TRUE && g_counter != 3)
    		{
    			g_counter++;
     dee:	80 91 2b 01 	lds	r24, 0x012B
     df2:	8f 5f       	subi	r24, 0xFF	; 255
     df4:	80 93 2b 01 	sts	0x012B, r24

    			/* Get password from user and saves t in in g_password variable */
    	  		get_password(g_password, "Enter old password");
     df8:	81 e3       	ldi	r24, 0x31	; 49
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	2c e7       	ldi	r18, 0x7C	; 124
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	b9 01       	movw	r22, r18
     e02:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <get_password>

    	  		/* Wait until user press '=' */
				do
				{
					key = KeyPad_getPressedKey();
     e06:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <KeyPad_getPressedKey>
     e0a:	fe 01       	movw	r30, r28
     e0c:	e9 57       	subi	r30, 0x79	; 121
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	80 83       	st	Z, r24
     e12:	fe 01       	movw	r30, r28
     e14:	e3 59       	subi	r30, 0x93	; 147
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	aa ef       	ldi	r26, 0xFA	; 250
     e1e:	b3 e4       	ldi	r27, 0x43	; 67
     e20:	80 83       	st	Z, r24
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	a2 83       	std	Z+2, r26	; 0x02
     e26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e28:	8e 01       	movw	r16, r28
     e2a:	07 59       	subi	r16, 0x97	; 151
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	fe 01       	movw	r30, r28
     e30:	e3 59       	subi	r30, 0x93	; 147
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	60 81       	ld	r22, Z
     e36:	71 81       	ldd	r23, Z+1	; 0x01
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4a ef       	ldi	r20, 0xFA	; 250
     e42:	54 e4       	ldi	r21, 0x44	; 68
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	f8 01       	movw	r30, r16
     e4e:	80 83       	st	Z, r24
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	a2 83       	std	Z+2, r26	; 0x02
     e54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e56:	fe 01       	movw	r30, r28
     e58:	e7 59       	subi	r30, 0x97	; 151
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e8       	ldi	r20, 0x80	; 128
     e6a:	5f e3       	ldi	r21, 0x3F	; 63
     e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e70:	88 23       	and	r24, r24
     e72:	44 f4       	brge	.+16     	; 0xe84 <main+0x33e>
		__ticks = 1;
     e74:	fe 01       	movw	r30, r28
     e76:	e9 59       	subi	r30, 0x99	; 153
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	80 83       	st	Z, r24
     e82:	64 c0       	rjmp	.+200    	; 0xf4c <main+0x406>
	else if (__tmp > 65535)
     e84:	fe 01       	movw	r30, r28
     e86:	e7 59       	subi	r30, 0x97	; 151
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	0c f0       	brlt	.+2      	; 0xea4 <main+0x35e>
     ea2:	43 c0       	rjmp	.+134    	; 0xf2a <main+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea4:	fe 01       	movw	r30, r28
     ea6:	e3 59       	subi	r30, 0x93	; 147
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e2       	ldi	r20, 0x20	; 32
     eb8:	51 e4       	ldi	r21, 0x41	; 65
     eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	8e 01       	movw	r16, r28
     ec4:	09 59       	subi	r16, 0x99	; 153
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	f8 01       	movw	r30, r16
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
     eda:	1f c0       	rjmp	.+62     	; 0xf1a <main+0x3d4>
     edc:	fe 01       	movw	r30, r28
     ede:	eb 59       	subi	r30, 0x9B	; 155
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	88 ec       	ldi	r24, 0xC8	; 200
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	91 83       	std	Z+1, r25	; 0x01
     ee8:	80 83       	st	Z, r24
     eea:	fe 01       	movw	r30, r28
     eec:	eb 59       	subi	r30, 0x9B	; 155
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <main+0x3ae>
     ef8:	fe 01       	movw	r30, r28
     efa:	eb 59       	subi	r30, 0x9B	; 155
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	de 01       	movw	r26, r28
     f04:	a9 59       	subi	r26, 0x99	; 153
     f06:	bf 4f       	sbci	r27, 0xFF	; 255
     f08:	fe 01       	movw	r30, r28
     f0a:	e9 59       	subi	r30, 0x99	; 153
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	11 96       	adiw	r26, 0x01	; 1
     f16:	9c 93       	st	X, r25
     f18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1a:	fe 01       	movw	r30, r28
     f1c:	e9 59       	subi	r30, 0x99	; 153
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	80 81       	ld	r24, Z
     f22:	91 81       	ldd	r25, Z+1	; 0x01
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	d1 f6       	brne	.-76     	; 0xedc <main+0x396>
     f28:	28 c0       	rjmp	.+80     	; 0xf7a <main+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2a:	8e 01       	movw	r16, r28
     f2c:	09 59       	subi	r16, 0x99	; 153
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	fe 01       	movw	r30, r28
     f32:	e7 59       	subi	r30, 0x97	; 151
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	60 81       	ld	r22, Z
     f38:	71 81       	ldd	r23, Z+1	; 0x01
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	f8 01       	movw	r30, r16
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	80 83       	st	Z, r24
     f4c:	de 01       	movw	r26, r28
     f4e:	ad 59       	subi	r26, 0x9D	; 157
     f50:	bf 4f       	sbci	r27, 0xFF	; 255
     f52:	fe 01       	movw	r30, r28
     f54:	e9 59       	subi	r30, 0x99	; 153
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	80 81       	ld	r24, Z
     f5a:	91 81       	ldd	r25, Z+1	; 0x01
     f5c:	11 96       	adiw	r26, 0x01	; 1
     f5e:	9c 93       	st	X, r25
     f60:	8e 93       	st	-X, r24
     f62:	fe 01       	movw	r30, r28
     f64:	ed 59       	subi	r30, 0x9D	; 157
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <main+0x426>
     f70:	fe 01       	movw	r30, r28
     f72:	ed 59       	subi	r30, 0x9D	; 157
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
					_delay_ms(500);
				}
				while(key != '=');
     f7a:	fe 01       	movw	r30, r28
     f7c:	e9 57       	subi	r30, 0x79	; 121
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	80 81       	ld	r24, Z
     f82:	8d 33       	cpi	r24, 0x3D	; 61
     f84:	09 f0       	breq	.+2      	; 0xf88 <main+0x442>
     f86:	3f cf       	rjmp	.-386    	; 0xe06 <main+0x2c0>

				/* Wait until microcontroller2 is ready and then send to it VALIDATE action */
				while(UART_recieveByte() != M2_READY);
     f88:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
     f8c:	80 31       	cpi	r24, 0x10	; 16
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <main+0x442>
				UART_sendByte(VALIDATE);
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>

				/* UART sends password to microcontroller2 to validate it */
				for (int i = 0; i < MAX_PASSWORD; i++)
     f96:	fe 01       	movw	r30, r28
     f98:	eb 57       	subi	r30, 0x7B	; 123
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	11 82       	std	Z+1, r1	; 0x01
     f9e:	10 82       	st	Z, r1
     fa0:	ca c0       	rjmp	.+404    	; 0x1136 <main+0x5f0>
				{
					UART_sendByte(g_password[i]);
     fa2:	fe 01       	movw	r30, r28
     fa4:	eb 57       	subi	r30, 0x7B	; 123
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	fc 01       	movw	r30, r24
     fae:	ef 5c       	subi	r30, 0xCF	; 207
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	80 81       	ld	r24, Z
     fb4:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>
     fb8:	fe 01       	movw	r30, r28
     fba:	e1 5a       	subi	r30, 0xA1	; 161
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a8 e4       	ldi	r26, 0x48	; 72
     fc4:	b2 e4       	ldi	r27, 0x42	; 66
     fc6:	80 83       	st	Z, r24
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	a2 83       	std	Z+2, r26	; 0x02
     fcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fce:	8e 01       	movw	r16, r28
     fd0:	05 5a       	subi	r16, 0xA5	; 165
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	fe 01       	movw	r30, r28
     fd6:	e1 5a       	subi	r30, 0xA1	; 161
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	82 81       	ldd	r24, Z+2	; 0x02
     fe0:	93 81       	ldd	r25, Z+3	; 0x03
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a ef       	ldi	r20, 0xFA	; 250
     fe8:	54 e4       	ldi	r21, 0x44	; 68
     fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	f8 01       	movw	r30, r16
     ff4:	80 83       	st	Z, r24
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	a2 83       	std	Z+2, r26	; 0x02
     ffa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ffc:	fe 01       	movw	r30, r28
     ffe:	e5 5a       	subi	r30, 0xA5	; 165
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	60 81       	ld	r22, Z
    1004:	71 81       	ldd	r23, Z+1	; 0x01
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	93 81       	ldd	r25, Z+3	; 0x03
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e8       	ldi	r20, 0x80	; 128
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1016:	88 23       	and	r24, r24
    1018:	44 f4       	brge	.+16     	; 0x102a <main+0x4e4>
		__ticks = 1;
    101a:	fe 01       	movw	r30, r28
    101c:	e7 5a       	subi	r30, 0xA7	; 167
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	80 83       	st	Z, r24
    1028:	64 c0       	rjmp	.+200    	; 0x10f2 <main+0x5ac>
	else if (__tmp > 65535)
    102a:	fe 01       	movw	r30, r28
    102c:	e5 5a       	subi	r30, 0xA5	; 165
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	4f e7       	ldi	r20, 0x7F	; 127
    103e:	57 e4       	ldi	r21, 0x47	; 71
    1040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1044:	18 16       	cp	r1, r24
    1046:	0c f0       	brlt	.+2      	; 0x104a <main+0x504>
    1048:	43 c0       	rjmp	.+134    	; 0x10d0 <main+0x58a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104a:	fe 01       	movw	r30, r28
    104c:	e1 5a       	subi	r30, 0xA1	; 161
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	60 81       	ld	r22, Z
    1052:	71 81       	ldd	r23, Z+1	; 0x01
    1054:	82 81       	ldd	r24, Z+2	; 0x02
    1056:	93 81       	ldd	r25, Z+3	; 0x03
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	51 e4       	ldi	r21, 0x41	; 65
    1060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	8e 01       	movw	r16, r28
    106a:	07 5a       	subi	r16, 0xA7	; 167
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	f8 01       	movw	r30, r16
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	80 83       	st	Z, r24
    1080:	1f c0       	rjmp	.+62     	; 0x10c0 <main+0x57a>
    1082:	fe 01       	movw	r30, r28
    1084:	e9 5a       	subi	r30, 0xA9	; 169
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	88 ec       	ldi	r24, 0xC8	; 200
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
    1090:	fe 01       	movw	r30, r28
    1092:	e9 5a       	subi	r30, 0xA9	; 169
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <main+0x554>
    109e:	fe 01       	movw	r30, r28
    10a0:	e9 5a       	subi	r30, 0xA9	; 169
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a8:	de 01       	movw	r26, r28
    10aa:	a7 5a       	subi	r26, 0xA7	; 167
    10ac:	bf 4f       	sbci	r27, 0xFF	; 255
    10ae:	fe 01       	movw	r30, r28
    10b0:	e7 5a       	subi	r30, 0xA7	; 167
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	11 96       	adiw	r26, 0x01	; 1
    10bc:	9c 93       	st	X, r25
    10be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c0:	fe 01       	movw	r30, r28
    10c2:	e7 5a       	subi	r30, 0xA7	; 167
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	d1 f6       	brne	.-76     	; 0x1082 <main+0x53c>
    10ce:	27 c0       	rjmp	.+78     	; 0x111e <main+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d0:	8e 01       	movw	r16, r28
    10d2:	07 5a       	subi	r16, 0xA7	; 167
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
    10d6:	fe 01       	movw	r30, r28
    10d8:	e5 5a       	subi	r30, 0xA5	; 165
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	f8 01       	movw	r30, r16
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	80 83       	st	Z, r24
    10f2:	de 01       	movw	r26, r28
    10f4:	ab 5a       	subi	r26, 0xAB	; 171
    10f6:	bf 4f       	sbci	r27, 0xFF	; 255
    10f8:	fe 01       	movw	r30, r28
    10fa:	e7 5a       	subi	r30, 0xA7	; 167
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	8d 93       	st	X+, r24
    1104:	9c 93       	st	X, r25
    1106:	fe 01       	movw	r30, r28
    1108:	eb 5a       	subi	r30, 0xAB	; 171
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	80 81       	ld	r24, Z
    110e:	91 81       	ldd	r25, Z+1	; 0x01
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	f1 f7       	brne	.-4      	; 0x1110 <main+0x5ca>
    1114:	fe 01       	movw	r30, r28
    1116:	eb 5a       	subi	r30, 0xAB	; 171
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	80 83       	st	Z, r24
				/* Wait until microcontroller2 is ready and then send to it VALIDATE action */
				while(UART_recieveByte() != M2_READY);
				UART_sendByte(VALIDATE);

				/* UART sends password to microcontroller2 to validate it */
				for (int i = 0; i < MAX_PASSWORD; i++)
    111e:	de 01       	movw	r26, r28
    1120:	ab 57       	subi	r26, 0x7B	; 123
    1122:	bf 4f       	sbci	r27, 0xFF	; 255
    1124:	fe 01       	movw	r30, r28
    1126:	eb 57       	subi	r30, 0x7B	; 123
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	9c 93       	st	X, r25
    1134:	8e 93       	st	-X, r24
    1136:	fe 01       	movw	r30, r28
    1138:	eb 57       	subi	r30, 0x7B	; 123
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	85 30       	cpi	r24, 0x05	; 5
    1142:	91 05       	cpc	r25, r1
    1144:	0c f4       	brge	.+2      	; 0x1148 <main+0x602>
    1146:	2d cf       	rjmp	.-422    	; 0xfa2 <main+0x45c>
					UART_sendByte(g_password[i]);
					_delay_ms(50);
				}

				/* UART sends to microcontroller2 that it is ready to receive result of validation */
				UART_sendByte(M1_READY);
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>

				/* UART receives result of validation */
				g_match = UART_recieveByte();
    114e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    1152:	80 93 2a 01 	sts	0x012A, r24
    	{
    		g_counter = 0;
    		g_match = FALSE;

    		/* Give the user 3 chances to enter current password correct */
    		while(g_match != TRUE && g_counter != 3)
    1156:	80 91 2a 01 	lds	r24, 0x012A
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	29 f0       	breq	.+10     	; 0x1168 <main+0x622>
    115e:	80 91 2b 01 	lds	r24, 0x012B
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	09 f0       	breq	.+2      	; 0x1168 <main+0x622>
    1166:	43 ce       	rjmp	.-890    	; 0xdee <main+0x2a8>
				/* UART receives result of validation */
				g_match = UART_recieveByte();
    		}

    		/* If passwords are matched then get the new password from user */
    		if(g_match == TRUE)
    1168:	80 91 2a 01 	lds	r24, 0x012A
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	09 f0       	breq	.+2      	; 0x1172 <main+0x62c>
    1170:	cc c0       	rjmp	.+408    	; 0x130a <main+0x7c4>
    		{
    			/* Get the 2 passwords from user and return the result of validation */
    			g_match = sequence_1(CHANGE_PASS);
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <sequence_1>
    1178:	80 93 2a 01 	sts	0x012A, r24

    			/* If 2 passwords are matched display on the screen that password is changed */
    			if(g_match == TRUE)
    117c:	80 91 2a 01 	lds	r24, 0x012A
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	09 f0       	breq	.+2      	; 0x1186 <main+0x640>
    1184:	c2 c0       	rjmp	.+388    	; 0x130a <main+0x7c4>
    			{
    				LCD_clearScreen();
    1186:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_clearScreen>
					LCD_displayString("Password is");
    118a:	8f e8       	ldi	r24, 0x8F	; 143
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
					LCD_goToRowColumn(1, 0);
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	0e 94 5f 14 	call	0x28be	; 0x28be <LCD_goToRowColumn>
					LCD_displayString("changed");
    119a:	8b e9       	ldi	r24, 0x9B	; 155
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
    11a2:	fe 01       	movw	r30, r28
    11a4:	ef 5a       	subi	r30, 0xAF	; 175
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e8       	ldi	r25, 0x80	; 128
    11ac:	ab eb       	ldi	r26, 0xBB	; 187
    11ae:	b4 e4       	ldi	r27, 0x44	; 68
    11b0:	80 83       	st	Z, r24
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	a2 83       	std	Z+2, r26	; 0x02
    11b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b8:	8e 01       	movw	r16, r28
    11ba:	03 5b       	subi	r16, 0xB3	; 179
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	fe 01       	movw	r30, r28
    11c0:	ef 5a       	subi	r30, 0xAF	; 175
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	4a ef       	ldi	r20, 0xFA	; 250
    11d2:	54 e4       	ldi	r21, 0x44	; 68
    11d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	f8 01       	movw	r30, r16
    11de:	80 83       	st	Z, r24
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	a2 83       	std	Z+2, r26	; 0x02
    11e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11e6:	fe 01       	movw	r30, r28
    11e8:	e3 5b       	subi	r30, 0xB3	; 179
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	60 81       	ld	r22, Z
    11ee:	71 81       	ldd	r23, Z+1	; 0x01
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e8       	ldi	r20, 0x80	; 128
    11fa:	5f e3       	ldi	r21, 0x3F	; 63
    11fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1200:	88 23       	and	r24, r24
    1202:	44 f4       	brge	.+16     	; 0x1214 <main+0x6ce>
		__ticks = 1;
    1204:	fe 01       	movw	r30, r28
    1206:	e5 5b       	subi	r30, 0xB5	; 181
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
    1212:	64 c0       	rjmp	.+200    	; 0x12dc <main+0x796>
	else if (__tmp > 65535)
    1214:	fe 01       	movw	r30, r28
    1216:	e3 5b       	subi	r30, 0xB3	; 179
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	60 81       	ld	r22, Z
    121c:	71 81       	ldd	r23, Z+1	; 0x01
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	3f ef       	ldi	r19, 0xFF	; 255
    1226:	4f e7       	ldi	r20, 0x7F	; 127
    1228:	57 e4       	ldi	r21, 0x47	; 71
    122a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    122e:	18 16       	cp	r1, r24
    1230:	0c f0       	brlt	.+2      	; 0x1234 <main+0x6ee>
    1232:	43 c0       	rjmp	.+134    	; 0x12ba <main+0x774>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1234:	fe 01       	movw	r30, r28
    1236:	ef 5a       	subi	r30, 0xAF	; 175
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	51 e4       	ldi	r21, 0x41	; 65
    124a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	8e 01       	movw	r16, r28
    1254:	05 5b       	subi	r16, 0xB5	; 181
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	bc 01       	movw	r22, r24
    125a:	cd 01       	movw	r24, r26
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	f8 01       	movw	r30, r16
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    126a:	1f c0       	rjmp	.+62     	; 0x12aa <main+0x764>
    126c:	fe 01       	movw	r30, r28
    126e:	e7 5b       	subi	r30, 0xB7	; 183
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	88 ec       	ldi	r24, 0xC8	; 200
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	fe 01       	movw	r30, r28
    127c:	e7 5b       	subi	r30, 0xB7	; 183
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	80 81       	ld	r24, Z
    1282:	91 81       	ldd	r25, Z+1	; 0x01
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <main+0x73e>
    1288:	fe 01       	movw	r30, r28
    128a:	e7 5b       	subi	r30, 0xB7	; 183
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1292:	de 01       	movw	r26, r28
    1294:	a5 5b       	subi	r26, 0xB5	; 181
    1296:	bf 4f       	sbci	r27, 0xFF	; 255
    1298:	fe 01       	movw	r30, r28
    129a:	e5 5b       	subi	r30, 0xB5	; 181
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	9c 93       	st	X, r25
    12a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12aa:	fe 01       	movw	r30, r28
    12ac:	e5 5b       	subi	r30, 0xB5	; 181
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	d1 f6       	brne	.-76     	; 0x126c <main+0x726>
    12b8:	28 c0       	rjmp	.+80     	; 0x130a <main+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ba:	8e 01       	movw	r16, r28
    12bc:	05 5b       	subi	r16, 0xB5	; 181
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	fe 01       	movw	r30, r28
    12c2:	e3 5b       	subi	r30, 0xB3	; 179
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	f8 01       	movw	r30, r16
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24
    12dc:	de 01       	movw	r26, r28
    12de:	a9 5b       	subi	r26, 0xB9	; 185
    12e0:	bf 4f       	sbci	r27, 0xFF	; 255
    12e2:	fe 01       	movw	r30, r28
    12e4:	e5 5b       	subi	r30, 0xB5	; 181
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	80 81       	ld	r24, Z
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	11 96       	adiw	r26, 0x01	; 1
    12ee:	9c 93       	st	X, r25
    12f0:	8e 93       	st	-X, r24
    12f2:	fe 01       	movw	r30, r28
    12f4:	e9 5b       	subi	r30, 0xB9	; 185
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <main+0x7b6>
    1300:	fe 01       	movw	r30, r28
    1302:	e9 5b       	subi	r30, 0xB9	; 185
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	80 83       	st	Z, r24
    			/* If passwords are not matched then g_match will be false and user will try again until
    			 * counter is 3 */
    		}

    		/* If g_match is still false indicating that the user tries 3 times */
    		if(g_match == FALSE)
    130a:	80 91 2a 01 	lds	r24, 0x012A
    130e:	88 23       	and	r24, r24
    1310:	09 f0       	breq	.+2      	; 0x1314 <main+0x7ce>
    1312:	8c cc       	rjmp	.-1768   	; 0xc2c <main+0xe6>
    		{
    			LCD_clearScreen();
    1314:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_clearScreen>

    			/* Wait until microcontroller2 is ready and then send to it EMERGENCY action */
	    		while(UART_recieveByte() != M2_READY);
    1318:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    131c:	80 31       	cpi	r24, 0x10	; 16
    131e:	e1 f7       	brne	.-8      	; 0x1318 <main+0x7d2>
	    		UART_sendByte(EMERGENCY);
    1320:	81 e1       	ldi	r24, 0x11	; 17
    1322:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>

	    		/* Display on lcd ERROR message */
    			LCD_displayString("ERROR");
    1326:	83 ea       	ldi	r24, 0xA3	; 163
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>

    			/* Wait for 1 minute */
    			for(int i = 1; i <= 60; i++)
    132e:	fe 01       	movw	r30, r28
    1330:	ed 57       	subi	r30, 0x7D	; 125
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24
    133c:	91 c0       	rjmp	.+290    	; 0x1460 <main+0x91a>
    133e:	fe 01       	movw	r30, r28
    1340:	ed 5b       	subi	r30, 0xBD	; 189
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	aa e7       	ldi	r26, 0x7A	; 122
    134a:	b4 e4       	ldi	r27, 0x44	; 68
    134c:	80 83       	st	Z, r24
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	a2 83       	std	Z+2, r26	; 0x02
    1352:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1354:	8e 01       	movw	r16, r28
    1356:	01 5c       	subi	r16, 0xC1	; 193
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	fe 01       	movw	r30, r28
    135c:	ed 5b       	subi	r30, 0xBD	; 189
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	4a ef       	ldi	r20, 0xFA	; 250
    136e:	54 e4       	ldi	r21, 0x44	; 68
    1370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	f8 01       	movw	r30, r16
    137a:	80 83       	st	Z, r24
    137c:	91 83       	std	Z+1, r25	; 0x01
    137e:	a2 83       	std	Z+2, r26	; 0x02
    1380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1382:	fe 01       	movw	r30, r28
    1384:	ff 96       	adiw	r30, 0x3f	; 63
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e8       	ldi	r20, 0x80	; 128
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139a:	88 23       	and	r24, r24
    139c:	2c f4       	brge	.+10     	; 0x13a8 <main+0x862>
		__ticks = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9e af       	std	Y+62, r25	; 0x3e
    13a4:	8d af       	std	Y+61, r24	; 0x3d
    13a6:	46 c0       	rjmp	.+140    	; 0x1434 <main+0x8ee>
	else if (__tmp > 65535)
    13a8:	fe 01       	movw	r30, r28
    13aa:	ff 96       	adiw	r30, 0x3f	; 63
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	3f ef       	ldi	r19, 0xFF	; 255
    13b8:	4f e7       	ldi	r20, 0x7F	; 127
    13ba:	57 e4       	ldi	r21, 0x47	; 71
    13bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c0:	18 16       	cp	r1, r24
    13c2:	64 f5       	brge	.+88     	; 0x141c <main+0x8d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c4:	fe 01       	movw	r30, r28
    13c6:	ed 5b       	subi	r30, 0xBD	; 189
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	60 81       	ld	r22, Z
    13cc:	71 81       	ldd	r23, Z+1	; 0x01
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e2       	ldi	r20, 0x20	; 32
    13d8:	51 e4       	ldi	r21, 0x41	; 65
    13da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9e af       	std	Y+62, r25	; 0x3e
    13f0:	8d af       	std	Y+61, r24	; 0x3d
    13f2:	0f c0       	rjmp	.+30     	; 0x1412 <main+0x8cc>
    13f4:	88 ec       	ldi	r24, 0xC8	; 200
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9c af       	std	Y+60, r25	; 0x3c
    13fa:	8b af       	std	Y+59, r24	; 0x3b
    13fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    13fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <main+0x8ba>
    1404:	9c af       	std	Y+60, r25	; 0x3c
    1406:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1408:	8d ad       	ldd	r24, Y+61	; 0x3d
    140a:	9e ad       	ldd	r25, Y+62	; 0x3e
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	9e af       	std	Y+62, r25	; 0x3e
    1410:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1412:	8d ad       	ldd	r24, Y+61	; 0x3d
    1414:	9e ad       	ldd	r25, Y+62	; 0x3e
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	69 f7       	brne	.-38     	; 0x13f4 <main+0x8ae>
    141a:	16 c0       	rjmp	.+44     	; 0x1448 <main+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141c:	fe 01       	movw	r30, r28
    141e:	ff 96       	adiw	r30, 0x3f	; 63
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	9e af       	std	Y+62, r25	; 0x3e
    1432:	8d af       	std	Y+61, r24	; 0x3d
    1434:	8d ad       	ldd	r24, Y+61	; 0x3d
    1436:	9e ad       	ldd	r25, Y+62	; 0x3e
    1438:	9a af       	std	Y+58, r25	; 0x3a
    143a:	89 af       	std	Y+57, r24	; 0x39
    143c:	89 ad       	ldd	r24, Y+57	; 0x39
    143e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <main+0x8fa>
    1444:	9a af       	std	Y+58, r25	; 0x3a
    1446:	89 af       	std	Y+57, r24	; 0x39
    1448:	de 01       	movw	r26, r28
    144a:	ad 57       	subi	r26, 0x7D	; 125
    144c:	bf 4f       	sbci	r27, 0xFF	; 255
    144e:	fe 01       	movw	r30, r28
    1450:	ed 57       	subi	r30, 0x7D	; 125
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	11 96       	adiw	r26, 0x01	; 1
    145c:	9c 93       	st	X, r25
    145e:	8e 93       	st	-X, r24
    1460:	fe 01       	movw	r30, r28
    1462:	ed 57       	subi	r30, 0x7D	; 125
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	8d 33       	cpi	r24, 0x3D	; 61
    146c:	91 05       	cpc	r25, r1
    146e:	0c f4       	brge	.+2      	; 0x1472 <main+0x92c>
    1470:	66 cf       	rjmp	.-308    	; 0x133e <main+0x7f8>
    1472:	dc cb       	rjmp	.-2120   	; 0xc2c <main+0xe6>
    		}


    	}
    	/* If user chooses to open door then get current password first */
    	else if (key == '-')
    1474:	fe 01       	movw	r30, r28
    1476:	e9 57       	subi	r30, 0x79	; 121
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 81       	ld	r24, Z
    147c:	8d 32       	cpi	r24, 0x2D	; 45
    147e:	09 f0       	breq	.+2      	; 0x1482 <main+0x93c>
    1480:	d5 cb       	rjmp	.-2134   	; 0xc2c <main+0xe6>
    	{
    		g_match = FALSE;
    1482:	10 92 2a 01 	sts	0x012A, r1
    		g_counter = 0;
    1486:	10 92 2b 01 	sts	0x012B, r1
    148a:	dc c1       	rjmp	.+952    	; 0x1844 <main+0xcfe>

    		/* Give the user 3 chances to enter current password correct */
    		while(g_match != TRUE && g_counter != 3)
    		{
    			g_counter++;
    148c:	80 91 2b 01 	lds	r24, 0x012B
    1490:	8f 5f       	subi	r24, 0xFF	; 255
    1492:	80 93 2b 01 	sts	0x012B, r24

    			/* Get password from user and saves t in in g_password variable */
        		get_password(g_password, "Enter password");
    1496:	81 e3       	ldi	r24, 0x31	; 49
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	29 ea       	ldi	r18, 0xA9	; 169
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	b9 01       	movw	r22, r18
    14a0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <get_password>

        		/* Wait until user press '=' */
        		do
        		{
        			key = KeyPad_getPressedKey();
    14a4:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <KeyPad_getPressedKey>
    14a8:	fe 01       	movw	r30, r28
    14aa:	e9 57       	subi	r30, 0x79	; 121
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 83       	st	Z, r24
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a6 e9       	ldi	r26, 0x96	; 150
    14b6:	b3 e4       	ldi	r27, 0x43	; 67
    14b8:	8d ab       	std	Y+53, r24	; 0x35
    14ba:	9e ab       	std	Y+54, r25	; 0x36
    14bc:	af ab       	std	Y+55, r26	; 0x37
    14be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	6d a9       	ldd	r22, Y+53	; 0x35
    14c2:	7e a9       	ldd	r23, Y+54	; 0x36
    14c4:	8f a9       	ldd	r24, Y+55	; 0x37
    14c6:	98 ad       	ldd	r25, Y+56	; 0x38
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a ef       	ldi	r20, 0xFA	; 250
    14ce:	54 e4       	ldi	r21, 0x44	; 68
    14d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	89 ab       	std	Y+49, r24	; 0x31
    14da:	9a ab       	std	Y+50, r25	; 0x32
    14dc:	ab ab       	std	Y+51, r26	; 0x33
    14de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14e0:	69 a9       	ldd	r22, Y+49	; 0x31
    14e2:	7a a9       	ldd	r23, Y+50	; 0x32
    14e4:	8b a9       	ldd	r24, Y+51	; 0x33
    14e6:	9c a9       	ldd	r25, Y+52	; 0x34
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	2c f4       	brge	.+10     	; 0x1502 <main+0x9bc>
		__ticks = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	98 ab       	std	Y+48, r25	; 0x30
    14fe:	8f a7       	std	Y+47, r24	; 0x2f
    1500:	3f c0       	rjmp	.+126    	; 0x1580 <main+0xa3a>
	else if (__tmp > 65535)
    1502:	69 a9       	ldd	r22, Y+49	; 0x31
    1504:	7a a9       	ldd	r23, Y+50	; 0x32
    1506:	8b a9       	ldd	r24, Y+51	; 0x33
    1508:	9c a9       	ldd	r25, Y+52	; 0x34
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <main+0xa26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	6d a9       	ldd	r22, Y+53	; 0x35
    151c:	7e a9       	ldd	r23, Y+54	; 0x36
    151e:	8f a9       	ldd	r24, Y+55	; 0x37
    1520:	98 ad       	ldd	r25, Y+56	; 0x38
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	98 ab       	std	Y+48, r25	; 0x30
    1540:	8f a7       	std	Y+47, r24	; 0x2f
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <main+0xa1c>
    1544:	88 ec       	ldi	r24, 0xC8	; 200
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9e a7       	std	Y+46, r25	; 0x2e
    154a:	8d a7       	std	Y+45, r24	; 0x2d
    154c:	8d a5       	ldd	r24, Y+45	; 0x2d
    154e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <main+0xa0a>
    1554:	9e a7       	std	Y+46, r25	; 0x2e
    1556:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1558:	8f a5       	ldd	r24, Y+47	; 0x2f
    155a:	98 a9       	ldd	r25, Y+48	; 0x30
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	98 ab       	std	Y+48, r25	; 0x30
    1560:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	8f a5       	ldd	r24, Y+47	; 0x2f
    1564:	98 a9       	ldd	r25, Y+48	; 0x30
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	69 f7       	brne	.-38     	; 0x1544 <main+0x9fe>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <main+0xa4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	69 a9       	ldd	r22, Y+49	; 0x31
    156e:	7a a9       	ldd	r23, Y+50	; 0x32
    1570:	8b a9       	ldd	r24, Y+51	; 0x33
    1572:	9c a9       	ldd	r25, Y+52	; 0x34
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	98 ab       	std	Y+48, r25	; 0x30
    157e:	8f a7       	std	Y+47, r24	; 0x2f
    1580:	8f a5       	ldd	r24, Y+47	; 0x2f
    1582:	98 a9       	ldd	r25, Y+48	; 0x30
    1584:	9c a7       	std	Y+44, r25	; 0x2c
    1586:	8b a7       	std	Y+43, r24	; 0x2b
    1588:	8b a5       	ldd	r24, Y+43	; 0x2b
    158a:	9c a5       	ldd	r25, Y+44	; 0x2c
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <main+0xa46>
    1590:	9c a7       	std	Y+44, r25	; 0x2c
    1592:	8b a7       	std	Y+43, r24	; 0x2b
        			_delay_ms(300);
        		}
        		while(key != '=');
    1594:	fe 01       	movw	r30, r28
    1596:	e9 57       	subi	r30, 0x79	; 121
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	8d 33       	cpi	r24, 0x3D	; 61
    159e:	09 f0       	breq	.+2      	; 0x15a2 <main+0xa5c>
    15a0:	81 cf       	rjmp	.-254    	; 0x14a4 <main+0x95e>

        		/* Wait until microcontroller2 is ready and then send to it OPEN_DOOR action */
        		while(UART_recieveByte() != M2_READY);
    15a2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    15a6:	80 31       	cpi	r24, 0x10	; 16
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <main+0xa5c>
        		UART_sendByte(OPEN_DOOR);
    15aa:	80 e1       	ldi	r24, 0x10	; 16
    15ac:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>

        		/* UART sends password to microcontroller2 to validate it */
        		for (int i = 0; i < MAX_PASSWORD; i++)
    15b0:	fe 01       	movw	r30, r28
    15b2:	ef 57       	subi	r30, 0x7F	; 127
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	11 82       	std	Z+1, r1	; 0x01
    15b8:	10 82       	st	Z, r1
    15ba:	89 c0       	rjmp	.+274    	; 0x16ce <main+0xb88>
        		{
        			UART_sendByte(g_password[i]);
    15bc:	fe 01       	movw	r30, r28
    15be:	ef 57       	subi	r30, 0x7F	; 127
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	fc 01       	movw	r30, r24
    15c8:	ef 5c       	subi	r30, 0xCF	; 207
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	80 81       	ld	r24, Z
    15ce:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a8 e4       	ldi	r26, 0x48	; 72
    15d8:	b2 e4       	ldi	r27, 0x42	; 66
    15da:	8f a3       	std	Y+39, r24	; 0x27
    15dc:	98 a7       	std	Y+40, r25	; 0x28
    15de:	a9 a7       	std	Y+41, r26	; 0x29
    15e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e2:	6f a1       	ldd	r22, Y+39	; 0x27
    15e4:	78 a5       	ldd	r23, Y+40	; 0x28
    15e6:	89 a5       	ldd	r24, Y+41	; 0x29
    15e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	4a ef       	ldi	r20, 0xFA	; 250
    15f0:	54 e4       	ldi	r21, 0x44	; 68
    15f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	8b a3       	std	Y+35, r24	; 0x23
    15fc:	9c a3       	std	Y+36, r25	; 0x24
    15fe:	ad a3       	std	Y+37, r26	; 0x25
    1600:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1602:	6b a1       	ldd	r22, Y+35	; 0x23
    1604:	7c a1       	ldd	r23, Y+36	; 0x24
    1606:	8d a1       	ldd	r24, Y+37	; 0x25
    1608:	9e a1       	ldd	r25, Y+38	; 0x26
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e8       	ldi	r20, 0x80	; 128
    1610:	5f e3       	ldi	r21, 0x3F	; 63
    1612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1616:	88 23       	and	r24, r24
    1618:	2c f4       	brge	.+10     	; 0x1624 <main+0xade>
		__ticks = 1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9a a3       	std	Y+34, r25	; 0x22
    1620:	89 a3       	std	Y+33, r24	; 0x21
    1622:	3f c0       	rjmp	.+126    	; 0x16a2 <main+0xb5c>
	else if (__tmp > 65535)
    1624:	6b a1       	ldd	r22, Y+35	; 0x23
    1626:	7c a1       	ldd	r23, Y+36	; 0x24
    1628:	8d a1       	ldd	r24, Y+37	; 0x25
    162a:	9e a1       	ldd	r25, Y+38	; 0x26
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	57 e4       	ldi	r21, 0x47	; 71
    1634:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1638:	18 16       	cp	r1, r24
    163a:	4c f5       	brge	.+82     	; 0x168e <main+0xb48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163c:	6f a1       	ldd	r22, Y+39	; 0x27
    163e:	78 a5       	ldd	r23, Y+40	; 0x28
    1640:	89 a5       	ldd	r24, Y+41	; 0x29
    1642:	9a a5       	ldd	r25, Y+42	; 0x2a
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e2       	ldi	r20, 0x20	; 32
    164a:	51 e4       	ldi	r21, 0x41	; 65
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9a a3       	std	Y+34, r25	; 0x22
    1662:	89 a3       	std	Y+33, r24	; 0x21
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <main+0xb3e>
    1666:	88 ec       	ldi	r24, 0xC8	; 200
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	98 a3       	std	Y+32, r25	; 0x20
    166c:	8f 8f       	std	Y+31, r24	; 0x1f
    166e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1670:	98 a1       	ldd	r25, Y+32	; 0x20
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <main+0xb2c>
    1676:	98 a3       	std	Y+32, r25	; 0x20
    1678:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167a:	89 a1       	ldd	r24, Y+33	; 0x21
    167c:	9a a1       	ldd	r25, Y+34	; 0x22
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	9a a3       	std	Y+34, r25	; 0x22
    1682:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1684:	89 a1       	ldd	r24, Y+33	; 0x21
    1686:	9a a1       	ldd	r25, Y+34	; 0x22
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	69 f7       	brne	.-38     	; 0x1666 <main+0xb20>
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <main+0xb70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168e:	6b a1       	ldd	r22, Y+35	; 0x23
    1690:	7c a1       	ldd	r23, Y+36	; 0x24
    1692:	8d a1       	ldd	r24, Y+37	; 0x25
    1694:	9e a1       	ldd	r25, Y+38	; 0x26
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9a a3       	std	Y+34, r25	; 0x22
    16a0:	89 a3       	std	Y+33, r24	; 0x21
    16a2:	89 a1       	ldd	r24, Y+33	; 0x21
    16a4:	9a a1       	ldd	r25, Y+34	; 0x22
    16a6:	9e 8f       	std	Y+30, r25	; 0x1e
    16a8:	8d 8f       	std	Y+29, r24	; 0x1d
    16aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <main+0xb68>
    16b2:	9e 8f       	std	Y+30, r25	; 0x1e
    16b4:	8d 8f       	std	Y+29, r24	; 0x1d
        		/* Wait until microcontroller2 is ready and then send to it OPEN_DOOR action */
        		while(UART_recieveByte() != M2_READY);
        		UART_sendByte(OPEN_DOOR);

        		/* UART sends password to microcontroller2 to validate it */
        		for (int i = 0; i < MAX_PASSWORD; i++)
    16b6:	de 01       	movw	r26, r28
    16b8:	af 57       	subi	r26, 0x7F	; 127
    16ba:	bf 4f       	sbci	r27, 0xFF	; 255
    16bc:	fe 01       	movw	r30, r28
    16be:	ef 57       	subi	r30, 0x7F	; 127
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	11 96       	adiw	r26, 0x01	; 1
    16ca:	9c 93       	st	X, r25
    16cc:	8e 93       	st	-X, r24
    16ce:	fe 01       	movw	r30, r28
    16d0:	ef 57       	subi	r30, 0x7F	; 127
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	85 30       	cpi	r24, 0x05	; 5
    16da:	91 05       	cpc	r25, r1
    16dc:	0c f4       	brge	.+2      	; 0x16e0 <main+0xb9a>
    16de:	6e cf       	rjmp	.-292    	; 0x15bc <main+0xa76>
        			UART_sendByte(g_password[i]);
        			_delay_ms(50);
        		}

        		/* UART sends to microcontroller2 that it is ready to receive result of validation */
        		UART_sendByte(M1_READY);
    16e0:	80 e2       	ldi	r24, 0x20	; 32
    16e2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>

        		/* UART receives result of validation */
        		g_match = UART_recieveByte();
    16e6:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    16ea:	80 93 2a 01 	sts	0x012A, r24

        		/* If passwords are matched then display on lcd door is unlocking */
        		if(g_match == TRUE)
    16ee:	80 91 2a 01 	lds	r24, 0x012A
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	e9 f4       	brne	.+58     	; 0x1730 <main+0xbea>
        		{
        			LCD_clearScreen();
    16f6:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_clearScreen>

        			/* Displays on lcd that door is unlocking */
        			LCD_displayString("Door is");
    16fa:	88 eb       	ldi	r24, 0xB8	; 184
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
        			LCD_goToRowColumn(1, 0);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 5f 14 	call	0x28be	; 0x28be <LCD_goToRowColumn>
        			LCD_displayString("unlocking");
    170a:	80 ec       	ldi	r24, 0xC0	; 192
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>

        			/* Wait until microcontroller2 sends byte indicating that the door will start closing */
        			while(UART_recieveByte() != M2_READY);
    1712:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    1716:	80 31       	cpi	r24, 0x10	; 16
    1718:	e1 f7       	brne	.-8      	; 0x1712 <main+0xbcc>

					LCD_clearScreen();
    171a:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_clearScreen>

					/* Displays on lcd that door is locking */
					LCD_displayString("Door is locking");
    171e:	8a ec       	ldi	r24, 0xCA	; 202
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>

					/* Wait until microcontroller2 sends byte indicating that the door is closed */
					while(UART_recieveByte() != M2_READY);
    1726:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    172a:	80 31       	cpi	r24, 0x10	; 16
    172c:	e1 f7       	brne	.-8      	; 0x1726 <main+0xbe0>
    172e:	8a c0       	rjmp	.+276    	; 0x1844 <main+0xcfe>
        		}

        		/* Give the user 3 tries to enter the current password correctly */
        		else if(g_match == FALSE && g_counter != 3)
    1730:	80 91 2a 01 	lds	r24, 0x012A
    1734:	88 23       	and	r24, r24
    1736:	09 f0       	breq	.+2      	; 0x173a <main+0xbf4>
    1738:	85 c0       	rjmp	.+266    	; 0x1844 <main+0xcfe>
    173a:	80 91 2b 01 	lds	r24, 0x012B
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	09 f4       	brne	.+2      	; 0x1744 <main+0xbfe>
    1742:	80 c0       	rjmp	.+256    	; 0x1844 <main+0xcfe>
        		{
        			LCD_clearScreen();
    1744:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_clearScreen>
        			LCD_displayString("Not matched");
    1748:	8a ed       	ldi	r24, 0xDA	; 218
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
        			LCD_goToRowColumn(1, 0);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	0e 94 5f 14 	call	0x28be	; 0x28be <LCD_goToRowColumn>
        			LCD_displayString("Try again");
    1758:	86 ee       	ldi	r24, 0xE6	; 230
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e8       	ldi	r25, 0x80	; 128
    1764:	ab eb       	ldi	r26, 0xBB	; 187
    1766:	b4 e4       	ldi	r27, 0x44	; 68
    1768:	89 8f       	std	Y+25, r24	; 0x19
    176a:	9a 8f       	std	Y+26, r25	; 0x1a
    176c:	ab 8f       	std	Y+27, r26	; 0x1b
    176e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	69 8d       	ldd	r22, Y+25	; 0x19
    1772:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1774:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1776:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a ef       	ldi	r20, 0xFA	; 250
    177e:	54 e4       	ldi	r21, 0x44	; 68
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8d 8b       	std	Y+21, r24	; 0x15
    178a:	9e 8b       	std	Y+22, r25	; 0x16
    178c:	af 8b       	std	Y+23, r26	; 0x17
    178e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1790:	6d 89       	ldd	r22, Y+21	; 0x15
    1792:	7e 89       	ldd	r23, Y+22	; 0x16
    1794:	8f 89       	ldd	r24, Y+23	; 0x17
    1796:	98 8d       	ldd	r25, Y+24	; 0x18
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <main+0xc6c>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9c 8b       	std	Y+20, r25	; 0x14
    17ae:	8b 8b       	std	Y+19, r24	; 0x13
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <main+0xcea>
	else if (__tmp > 65535)
    17b2:	6d 89       	ldd	r22, Y+21	; 0x15
    17b4:	7e 89       	ldd	r23, Y+22	; 0x16
    17b6:	8f 89       	ldd	r24, Y+23	; 0x17
    17b8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	4c f5       	brge	.+82     	; 0x181c <main+0xcd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ca:	69 8d       	ldd	r22, Y+25	; 0x19
    17cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9c 8b       	std	Y+20, r25	; 0x14
    17f0:	8b 8b       	std	Y+19, r24	; 0x13
    17f2:	0f c0       	rjmp	.+30     	; 0x1812 <main+0xccc>
    17f4:	88 ec       	ldi	r24, 0xC8	; 200
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9a 8b       	std	Y+18, r25	; 0x12
    17fa:	89 8b       	std	Y+17, r24	; 0x11
    17fc:	89 89       	ldd	r24, Y+17	; 0x11
    17fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <main+0xcba>
    1804:	9a 8b       	std	Y+18, r25	; 0x12
    1806:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	8b 89       	ldd	r24, Y+19	; 0x13
    180a:	9c 89       	ldd	r25, Y+20	; 0x14
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	9c 8b       	std	Y+20, r25	; 0x14
    1810:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	8b 89       	ldd	r24, Y+19	; 0x13
    1814:	9c 89       	ldd	r25, Y+20	; 0x14
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	69 f7       	brne	.-38     	; 0x17f4 <main+0xcae>
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <main+0xcfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	6d 89       	ldd	r22, Y+21	; 0x15
    181e:	7e 89       	ldd	r23, Y+22	; 0x16
    1820:	8f 89       	ldd	r24, Y+23	; 0x17
    1822:	98 8d       	ldd	r25, Y+24	; 0x18
    1824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9c 8b       	std	Y+20, r25	; 0x14
    182e:	8b 8b       	std	Y+19, r24	; 0x13
    1830:	8b 89       	ldd	r24, Y+19	; 0x13
    1832:	9c 89       	ldd	r25, Y+20	; 0x14
    1834:	98 8b       	std	Y+16, r25	; 0x10
    1836:	8f 87       	std	Y+15, r24	; 0x0f
    1838:	8f 85       	ldd	r24, Y+15	; 0x0f
    183a:	98 89       	ldd	r25, Y+16	; 0x10
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <main+0xcf6>
    1840:	98 8b       	std	Y+16, r25	; 0x10
    1842:	8f 87       	std	Y+15, r24	; 0x0f
    	{
    		g_match = FALSE;
    		g_counter = 0;

    		/* Give the user 3 chances to enter current password correct */
    		while(g_match != TRUE && g_counter != 3)
    1844:	80 91 2a 01 	lds	r24, 0x012A
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	29 f0       	breq	.+10     	; 0x1856 <main+0xd10>
    184c:	80 91 2b 01 	lds	r24, 0x012B
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	09 f0       	breq	.+2      	; 0x1856 <main+0xd10>
    1854:	1b ce       	rjmp	.-970    	; 0x148c <main+0x946>
        			LCD_displayString("Try again");
        			_delay_ms(1500);
        		}
    		}
    		/* If g_match is still false indicating that the user tries 3 times */
    		if(g_counter == 3 && g_match == FALSE)
    1856:	80 91 2b 01 	lds	r24, 0x012B
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	09 f0       	breq	.+2      	; 0x1860 <main+0xd1a>
    185e:	e6 c9       	rjmp	.-3124   	; 0xc2c <main+0xe6>
    1860:	80 91 2a 01 	lds	r24, 0x012A
    1864:	88 23       	and	r24, r24
    1866:	09 f0       	breq	.+2      	; 0x186a <main+0xd24>
    1868:	e1 c9       	rjmp	.-3134   	; 0xc2c <main+0xe6>
    		{
    			LCD_clearScreen();
    186a:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_clearScreen>

    			/* Wait until microcontroller2 is ready and then send to it EMERGENCY action */
        		while(UART_recieveByte() != M2_READY);
    186e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    1872:	80 31       	cpi	r24, 0x10	; 16
    1874:	e1 f7       	brne	.-8      	; 0x186e <main+0xd28>
        		UART_sendByte(EMERGENCY);
    1876:	81 e1       	ldi	r24, 0x11	; 17
    1878:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>

        		/* Display on lcd ERROR message */

        		LCD_displayString("ERROR");
    187c:	83 ea       	ldi	r24, 0xA3	; 163
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>

        		/* Wait for 1 minute */
				for(int i = 1; i <= 60; i++)
    1884:	fe 01       	movw	r30, r28
    1886:	e1 58       	subi	r30, 0x81	; 129
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
    1892:	7e c0       	rjmp	.+252    	; 0x1990 <main+0xe4a>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	aa e7       	ldi	r26, 0x7A	; 122
    189a:	b4 e4       	ldi	r27, 0x44	; 68
    189c:	8b 87       	std	Y+11, r24	; 0x0b
    189e:	9c 87       	std	Y+12, r25	; 0x0c
    18a0:	ad 87       	std	Y+13, r26	; 0x0d
    18a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a ef       	ldi	r20, 0xFA	; 250
    18b2:	54 e4       	ldi	r21, 0x44	; 68
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8f 83       	std	Y+7, r24	; 0x07
    18be:	98 87       	std	Y+8, r25	; 0x08
    18c0:	a9 87       	std	Y+9, r26	; 0x09
    18c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	78 85       	ldd	r23, Y+8	; 0x08
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <main+0xda0>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <main+0xe1e>
	else if (__tmp > 65535)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <main+0xe0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1900:	7c 85       	ldd	r23, Y+12	; 0x0c
    1902:	8d 85       	ldd	r24, Y+13	; 0x0d
    1904:	9e 85       	ldd	r25, Y+14	; 0x0e
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <main+0xe00>
    1928:	88 ec       	ldi	r24, 0xC8	; 200
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c 83       	std	Y+4, r25	; 0x04
    192e:	8b 83       	std	Y+3, r24	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <main+0xdee>
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <main+0xde2>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <main+0xe32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9e 83       	std	Y+6, r25	; 0x06
    1962:	8d 83       	std	Y+5, r24	; 0x05
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <main+0xe2a>
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	de 01       	movw	r26, r28
    197a:	a1 58       	subi	r26, 0x81	; 129
    197c:	bf 4f       	sbci	r27, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e1 58       	subi	r30, 0x81	; 129
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	11 96       	adiw	r26, 0x01	; 1
    198c:	9c 93       	st	X, r25
    198e:	8e 93       	st	-X, r24
    1990:	fe 01       	movw	r30, r28
    1992:	e1 58       	subi	r30, 0x81	; 129
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	8d 33       	cpi	r24, 0x3D	; 61
    199c:	91 05       	cpc	r25, r1
    199e:	0c f4       	brge	.+2      	; 0x19a2 <main+0xe5c>
    19a0:	79 cf       	rjmp	.-270    	; 0x1894 <main+0xd4e>
    19a2:	44 c9       	rjmp	.-3448   	; 0xc2c <main+0xe6>

000019a4 <sequence_1>:
 * [in]: action : indicate VALIDATE or CHANGE_PASS
 * [out]: The result of comparison
 */

uint8 sequence_1(uint8 a_action)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	a1 97       	sbiw	r28, 0x21	; 33
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	89 a3       	std	Y+33, r24	; 0x21
	g_counter = 0;
    19ba:	10 92 2b 01 	sts	0x012B, r1
	g_match = FALSE;
    19be:	10 92 2a 01 	sts	0x012A, r1
    19c2:	2a c1       	rjmp	.+596    	; 0x1c18 <sequence_1+0x274>

	/* Give the user 3 chances to enter the 2 passwords matched */
	while(g_match != TRUE && g_counter != 3)
	{
		g_counter++;
    19c4:	80 91 2b 01 	lds	r24, 0x012B
    19c8:	8f 5f       	subi	r24, 0xFF	; 255
    19ca:	80 93 2b 01 	sts	0x012B, r24

		/* CALL get_2passwords function */
		get_2passwords(g_password, g_repassword);
    19ce:	81 e3       	ldi	r24, 0x31	; 49
    19d0:	91 e0       	ldi	r25, 0x01	; 1
    19d2:	2c e2       	ldi	r18, 0x2C	; 44
    19d4:	31 e0       	ldi	r19, 0x01	; 1
    19d6:	b9 01       	movw	r22, r18
    19d8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <get_2passwords>

		/* Wait until microcontroller2 is ready and then send to it  a_action */
		while(UART_recieveByte() != M2_READY){}
    19dc:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    19e0:	80 31       	cpi	r24, 0x10	; 16
    19e2:	e1 f7       	brne	.-8      	; 0x19dc <sequence_1+0x38>
		UART_sendByte(a_action);
    19e4:	89 a1       	ldd	r24, Y+33	; 0x21
    19e6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>

		/* UART sends password to microcontroller2 */
		for (int i = 0; i < MAX_PASSWORD; i++)
    19ea:	18 a2       	std	Y+32, r1	; 0x20
    19ec:	1f 8e       	std	Y+31, r1	; 0x1f
    19ee:	7f c0       	rjmp	.+254    	; 0x1aee <sequence_1+0x14a>
		{
			UART_sendByte(g_password[i]);
    19f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19f2:	98 a1       	ldd	r25, Y+32	; 0x20
    19f4:	fc 01       	movw	r30, r24
    19f6:	ef 5c       	subi	r30, 0xCF	; 207
    19f8:	fe 4f       	sbci	r31, 0xFE	; 254
    19fa:	80 81       	ld	r24, Z
    19fc:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a8 e4       	ldi	r26, 0x48	; 72
    1a06:	b2 e4       	ldi	r27, 0x42	; 66
    1a08:	89 8f       	std	Y+25, r24	; 0x19
    1a0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a10:	69 8d       	ldd	r22, Y+25	; 0x19
    1a12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	4a ef       	ldi	r20, 0xFA	; 250
    1a1e:	54 e4       	ldi	r21, 0x44	; 68
    1a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	8d 8b       	std	Y+21, r24	; 0x15
    1a2a:	9e 8b       	std	Y+22, r25	; 0x16
    1a2c:	af 8b       	std	Y+23, r26	; 0x17
    1a2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e8       	ldi	r20, 0x80	; 128
    1a3e:	5f e3       	ldi	r21, 0x3F	; 63
    1a40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a44:	88 23       	and	r24, r24
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <sequence_1+0xae>
		__ticks = 1;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 8b       	std	Y+20, r25	; 0x14
    1a4e:	8b 8b       	std	Y+19, r24	; 0x13
    1a50:	3f c0       	rjmp	.+126    	; 0x1ad0 <sequence_1+0x12c>
	else if (__tmp > 65535)
    1a52:	6d 89       	ldd	r22, Y+21	; 0x15
    1a54:	7e 89       	ldd	r23, Y+22	; 0x16
    1a56:	8f 89       	ldd	r24, Y+23	; 0x17
    1a58:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	3f ef       	ldi	r19, 0xFF	; 255
    1a5e:	4f e7       	ldi	r20, 0x7F	; 127
    1a60:	57 e4       	ldi	r21, 0x47	; 71
    1a62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a66:	18 16       	cp	r1, r24
    1a68:	4c f5       	brge	.+82     	; 0x1abc <sequence_1+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e2       	ldi	r20, 0x20	; 32
    1a78:	51 e4       	ldi	r21, 0x41	; 65
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9c 8b       	std	Y+20, r25	; 0x14
    1a90:	8b 8b       	std	Y+19, r24	; 0x13
    1a92:	0f c0       	rjmp	.+30     	; 0x1ab2 <sequence_1+0x10e>
    1a94:	88 ec       	ldi	r24, 0xC8	; 200
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9a 8b       	std	Y+18, r25	; 0x12
    1a9a:	89 8b       	std	Y+17, r24	; 0x11
    1a9c:	89 89       	ldd	r24, Y+17	; 0x11
    1a9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <sequence_1+0xfc>
    1aa4:	9a 8b       	std	Y+18, r25	; 0x12
    1aa6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	9c 8b       	std	Y+20, r25	; 0x14
    1ab0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	69 f7       	brne	.-38     	; 0x1a94 <sequence_1+0xf0>
    1aba:	14 c0       	rjmp	.+40     	; 0x1ae4 <sequence_1+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abc:	6d 89       	ldd	r22, Y+21	; 0x15
    1abe:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	9c 8b       	std	Y+20, r25	; 0x14
    1ace:	8b 8b       	std	Y+19, r24	; 0x13
    1ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad4:	98 8b       	std	Y+16, r25	; 0x10
    1ad6:	8f 87       	std	Y+15, r24	; 0x0f
    1ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ada:	98 89       	ldd	r25, Y+16	; 0x10
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <sequence_1+0x138>
    1ae0:	98 8b       	std	Y+16, r25	; 0x10
    1ae2:	8f 87       	std	Y+15, r24	; 0x0f
		/* Wait until microcontroller2 is ready and then send to it  a_action */
		while(UART_recieveByte() != M2_READY){}
		UART_sendByte(a_action);

		/* UART sends password to microcontroller2 */
		for (int i = 0; i < MAX_PASSWORD; i++)
    1ae4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ae6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	98 a3       	std	Y+32, r25	; 0x20
    1aec:	8f 8f       	std	Y+31, r24	; 0x1f
    1aee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1af0:	98 a1       	ldd	r25, Y+32	; 0x20
    1af2:	85 30       	cpi	r24, 0x05	; 5
    1af4:	91 05       	cpc	r25, r1
    1af6:	0c f4       	brge	.+2      	; 0x1afa <sequence_1+0x156>
    1af8:	7b cf       	rjmp	.-266    	; 0x19f0 <sequence_1+0x4c>
			UART_sendByte(g_password[i]);
			_delay_ms(50);
		}

		/* UART sends repeated password to microcontroller2 */
		for (int i = 0; i < MAX_PASSWORD; i++)
    1afa:	1e 8e       	std	Y+30, r1	; 0x1e
    1afc:	1d 8e       	std	Y+29, r1	; 0x1d
    1afe:	7f c0       	rjmp	.+254    	; 0x1bfe <sequence_1+0x25a>
		{
			UART_sendByte(g_repassword[i]);
    1b00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b04:	fc 01       	movw	r30, r24
    1b06:	e4 5d       	subi	r30, 0xD4	; 212
    1b08:	fe 4f       	sbci	r31, 0xFE	; 254
    1b0a:	80 81       	ld	r24, Z
    1b0c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a8 e4       	ldi	r26, 0x48	; 72
    1b16:	b2 e4       	ldi	r27, 0x42	; 66
    1b18:	8b 87       	std	Y+11, r24	; 0x0b
    1b1a:	9c 87       	std	Y+12, r25	; 0x0c
    1b1c:	ad 87       	std	Y+13, r26	; 0x0d
    1b1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a ef       	ldi	r20, 0xFA	; 250
    1b2e:	54 e4       	ldi	r21, 0x44	; 68
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8f 83       	std	Y+7, r24	; 0x07
    1b3a:	98 87       	std	Y+8, r25	; 0x08
    1b3c:	a9 87       	std	Y+9, r26	; 0x09
    1b3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <sequence_1+0x1be>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	3f c0       	rjmp	.+126    	; 0x1be0 <sequence_1+0x23c>
	else if (__tmp > 65535)
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	57 e4       	ldi	r21, 0x47	; 71
    1b72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	4c f5       	brge	.+82     	; 0x1bcc <sequence_1+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e2       	ldi	r20, 0x20	; 32
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <sequence_1+0x21e>
    1ba4:	88 ec       	ldi	r24, 0xC8	; 200
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <sequence_1+0x20c>
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <sequence_1+0x200>
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <sequence_1+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <sequence_1+0x248>
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
			UART_sendByte(g_password[i]);
			_delay_ms(50);
		}

		/* UART sends repeated password to microcontroller2 */
		for (int i = 0; i < MAX_PASSWORD; i++)
    1bf4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bf6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	9e 8f       	std	Y+30, r25	; 0x1e
    1bfc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c02:	85 30       	cpi	r24, 0x05	; 5
    1c04:	91 05       	cpc	r25, r1
    1c06:	0c f4       	brge	.+2      	; 0x1c0a <sequence_1+0x266>
    1c08:	7b cf       	rjmp	.-266    	; 0x1b00 <sequence_1+0x15c>
			UART_sendByte(g_repassword[i]);
			_delay_ms(50);
		}

		/* UART sends to microcontroller2 that it is ready to receive result of validation */
		UART_sendByte(M1_READY);
    1c0a:	80 e2       	ldi	r24, 0x20	; 32
    1c0c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>

		/* UART receives result of validation */
		g_match = UART_recieveByte();
    1c10:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    1c14:	80 93 2a 01 	sts	0x012A, r24
{
	g_counter = 0;
	g_match = FALSE;

	/* Give the user 3 chances to enter the 2 passwords matched */
	while(g_match != TRUE && g_counter != 3)
    1c18:	80 91 2a 01 	lds	r24, 0x012A
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	29 f0       	breq	.+10     	; 0x1c2a <sequence_1+0x286>
    1c20:	80 91 2b 01 	lds	r24, 0x012B
    1c24:	83 30       	cpi	r24, 0x03	; 3
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <sequence_1+0x286>
    1c28:	cd ce       	rjmp	.-614    	; 0x19c4 <sequence_1+0x20>

		/* UART receives result of validation */
		g_match = UART_recieveByte();

	}
	return g_match;
    1c2a:	80 91 2a 01 	lds	r24, 0x012A
}
    1c2e:	a1 96       	adiw	r28, 0x21	; 33
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <get_2passwords>:
 * Description:  Function takes 2 passwords from the user
 * [in]: 2 arrays to saves passwords in them
 */

void get_2passwords(uint8 a_password[MAX_PASSWORD], uint8 a_repassword[MAX_PASSWORD])
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <get_2passwords+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <get_2passwords+0x8>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	7c 83       	std	Y+4, r23	; 0x04
    1c52:	6b 83       	std	Y+3, r22	; 0x03
	/* Get password from the user */
	get_password(a_password, "Enter new pass");
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	20 ef       	ldi	r18, 0xF0	; 240
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	b9 01       	movw	r22, r18
    1c5e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <get_password>

	/* Wait until user press '=' */
	while(KeyPad_getPressedKey() != '=');
    1c62:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <KeyPad_getPressedKey>
    1c66:	8d 33       	cpi	r24, 0x3D	; 61
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <get_2passwords+0x22>

	/* Get repeated password from the user */
	get_password(a_repassword, "Re_enter pass");
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	2f ef       	ldi	r18, 0xFF	; 255
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	b9 01       	movw	r22, r18
    1c74:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <get_password>

	/* Wait until user press '=' */
	while(KeyPad_getPressedKey() != '=');
    1c78:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <KeyPad_getPressedKey>
    1c7c:	8d 33       	cpi	r24, 0x3D	; 61
    1c7e:	e1 f7       	brne	.-8      	; 0x1c78 <get_2passwords+0x38>

	LCD_clearScreen();
    1c80:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_clearScreen>
	LCD_displayString("WAIT...");
    1c84:	8d e0       	ldi	r24, 0x0D	; 13
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>

}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <get_password>:
 * Description:  Function takes password from the user
 * [in]: one array to saves password in it
 */

void get_password(uint8 a_password[MAX_PASSWORD], char *Str)
{
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	64 97       	sbiw	r28, 0x14	; 20
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	9a 8b       	std	Y+18, r25	; 0x12
    1cb4:	89 8b       	std	Y+17, r24	; 0x11
    1cb6:	7c 8b       	std	Y+20, r23	; 0x14
    1cb8:	6b 8b       	std	Y+19, r22	; 0x13
	LCD_clearScreen();
    1cba:	0e 94 dd 14 	call	0x29ba	; 0x29ba <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	0e 94 5f 14 	call	0x28be	; 0x28be <LCD_goToRowColumn>
	LCD_displayString(Str);
    1cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cca:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	0e 94 5f 14 	call	0x28be	; 0x28be <LCD_goToRowColumn>
	LCD_displayString("*****");
    1cd6:	85 e1       	ldi	r24, 0x15	; 21
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	0e 94 5f 14 	call	0x28be	; 0x28be <LCD_goToRowColumn>
	/* Get password from user */
	for(int i = 0; i < MAX_PASSWORD; i++)
    1ce6:	18 8a       	std	Y+16, r1	; 0x10
    1ce8:	1f 86       	std	Y+15, r1	; 0x0f
    1cea:	9e c0       	rjmp	.+316    	; 0x1e28 <get_password+0x18e>
	{
		a_password[i] = KeyPad_getPressedKey();
    1cec:	2f 85       	ldd	r18, Y+15	; 0x0f
    1cee:	38 89       	ldd	r19, Y+16	; 0x10
    1cf0:	89 89       	ldd	r24, Y+17	; 0x11
    1cf2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf4:	8c 01       	movw	r16, r24
    1cf6:	02 0f       	add	r16, r18
    1cf8:	13 1f       	adc	r17, r19
    1cfa:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <KeyPad_getPressedKey>
    1cfe:	f8 01       	movw	r30, r16
    1d00:	80 83       	st	Z, r24

		/* Saves what user pressed on it if it is a number */
		if(a_password[i] >= 0 && a_password[i] <= 9)
    1d02:	2f 85       	ldd	r18, Y+15	; 0x0f
    1d04:	38 89       	ldd	r19, Y+16	; 0x10
    1d06:	89 89       	ldd	r24, Y+17	; 0x11
    1d08:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e2 0f       	add	r30, r18
    1d0e:	f3 1f       	adc	r31, r19
    1d10:	80 81       	ld	r24, Z
    1d12:	8a 30       	cpi	r24, 0x0A	; 10
    1d14:	68 f4       	brcc	.+26     	; 0x1d30 <get_password+0x96>
		{
			LCD_intgerToString(a_password[i]);
    1d16:	2f 85       	ldd	r18, Y+15	; 0x0f
    1d18:	38 89       	ldd	r19, Y+16	; 0x10
    1d1a:	89 89       	ldd	r24, Y+17	; 0x11
    1d1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1e:	fc 01       	movw	r30, r24
    1d20:	e2 0f       	add	r30, r18
    1d22:	f3 1f       	adc	r31, r19
    1d24:	80 81       	ld	r24, Z
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 ba 14 	call	0x2974	; 0x2974 <LCD_intgerToString>
    1d2e:	05 c0       	rjmp	.+10     	; 0x1d3a <get_password+0xa0>
		}
		else
		{
			i--;
    1d30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d32:	98 89       	ldd	r25, Y+16	; 0x10
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	98 8b       	std	Y+16, r25	; 0x10
    1d38:	8f 87       	std	Y+15, r24	; 0x0f
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	aa ef       	ldi	r26, 0xFA	; 250
    1d40:	b3 e4       	ldi	r27, 0x43	; 67
    1d42:	8b 87       	std	Y+11, r24	; 0x0b
    1d44:	9c 87       	std	Y+12, r25	; 0x0c
    1d46:	ad 87       	std	Y+13, r26	; 0x0d
    1d48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a ef       	ldi	r20, 0xFA	; 250
    1d58:	54 e4       	ldi	r21, 0x44	; 68
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	8f 83       	std	Y+7, r24	; 0x07
    1d64:	98 87       	std	Y+8, r25	; 0x08
    1d66:	a9 87       	std	Y+9, r26	; 0x09
    1d68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6c:	78 85       	ldd	r23, Y+8	; 0x08
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <get_password+0xf2>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	3f c0       	rjmp	.+126    	; 0x1e0a <get_password+0x170>
	else if (__tmp > 65535)
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	4c f5       	brge	.+82     	; 0x1df6 <get_password+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <get_password+0x152>
    1dce:	88 ec       	ldi	r24, 0xC8	; 200
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9c 83       	std	Y+4, r25	; 0x04
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <get_password+0x140>
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <get_password+0x134>
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <get_password+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <get_password+0x17c>
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString(Str);
	LCD_goToRowColumn(1, 0);
	LCD_displayString("*****");
	LCD_goToRowColumn(1, 0);
	/* Get password from user */
	for(int i = 0; i < MAX_PASSWORD; i++)
    1e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e20:	98 89       	ldd	r25, Y+16	; 0x10
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	98 8b       	std	Y+16, r25	; 0x10
    1e26:	8f 87       	std	Y+15, r24	; 0x0f
    1e28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2a:	98 89       	ldd	r25, Y+16	; 0x10
    1e2c:	85 30       	cpi	r24, 0x05	; 5
    1e2e:	91 05       	cpc	r25, r1
    1e30:	0c f4       	brge	.+2      	; 0x1e34 <get_password+0x19a>
    1e32:	5c cf       	rjmp	.-328    	; 0x1cec <get_password+0x52>
			i--;
		}
		_delay_ms(500);

	}
}
    1e34:	64 96       	adiw	r28, 0x14	; 20
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <KeyPad_getPressedKey+0x6>
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1e54:	1a 82       	std	Y+2, r1	; 0x02
    1e56:	4c c0       	rjmp	.+152    	; 0x1ef0 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1e58:	ea e3       	ldi	r30, 0x3A	; 58
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	80 e1       	ldi	r24, 0x10	; 16
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <KeyPad_getPressedKey+0x22>
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	2a 95       	dec	r18
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <KeyPad_getPressedKey+0x1e>
    1e70:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1e72:	eb e3       	ldi	r30, 0x3B	; 59
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	80 e1       	ldi	r24, 0x10	; 16
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 2e       	mov	r0, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <KeyPad_getPressedKey+0x3e>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0a 94       	dec	r0
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <KeyPad_getPressedKey+0x3a>
    1e8c:	80 95       	com	r24
    1e8e:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    1e90:	19 82       	std	Y+1, r1	; 0x01
    1e92:	28 c0       	rjmp	.+80     	; 0x1ee4 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1e94:	e9 e3       	ldi	r30, 0x39	; 57
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a9 01       	movw	r20, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <KeyPad_getPressedKey+0x62>
    1ea8:	55 95       	asr	r21
    1eaa:	47 95       	ror	r20
    1eac:	8a 95       	dec	r24
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <KeyPad_getPressedKey+0x5e>
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	81 70       	andi	r24, 0x01	; 1
    1eb4:	90 70       	andi	r25, 0x00	; 0
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	91 f4       	brne	.+36     	; 0x1ede <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	98 2f       	mov	r25, r24
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	89 0f       	add	r24, r25
    1ece:	8f 5f       	subi	r24, 0xFF	; 255
    1ed0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	84 30       	cpi	r24, 0x04	; 4
    1ee8:	a8 f2       	brcs	.-86     	; 0x1e94 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	8f 5f       	subi	r24, 0xFF	; 255
    1eee:	8a 83       	std	Y+2, r24	; 0x02
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	08 f4       	brcc	.+2      	; 0x1ef8 <KeyPad_getPressedKey+0xae>
    1ef6:	b0 cf       	rjmp	.-160    	; 0x1e58 <KeyPad_getPressedKey+0xe>
    1ef8:	ad cf       	rjmp	.-166    	; 0x1e54 <KeyPad_getPressedKey+0xa>

00001efa <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <KeyPad_4x4_adjustKeyNumber+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <KeyPad_4x4_adjustKeyNumber+0x8>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3c 83       	std	Y+4, r19	; 0x04
    1f10:	2b 83       	std	Y+3, r18	; 0x03
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	88 30       	cpi	r24, 0x08	; 8
    1f18:	91 05       	cpc	r25, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <KeyPad_4x4_adjustKeyNumber+0x24>
    1f1c:	70 c0       	rjmp	.+224    	; 0x1ffe <KeyPad_4x4_adjustKeyNumber+0x104>
    1f1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f20:	3c 81       	ldd	r19, Y+4	; 0x04
    1f22:	29 30       	cpi	r18, 0x09	; 9
    1f24:	31 05       	cpc	r19, r1
    1f26:	5c f5       	brge	.+86     	; 0x1f7e <KeyPad_4x4_adjustKeyNumber+0x84>
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	84 30       	cpi	r24, 0x04	; 4
    1f2e:	91 05       	cpc	r25, r1
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1f32:	59 c0       	rjmp	.+178    	; 0x1fe6 <KeyPad_4x4_adjustKeyNumber+0xec>
    1f34:	2b 81       	ldd	r18, Y+3	; 0x03
    1f36:	3c 81       	ldd	r19, Y+4	; 0x04
    1f38:	25 30       	cpi	r18, 0x05	; 5
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	9c f4       	brge	.+38     	; 0x1f64 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <KeyPad_4x4_adjustKeyNumber+0x50>
    1f48:	48 c0       	rjmp	.+144    	; 0x1fda <KeyPad_4x4_adjustKeyNumber+0xe0>
    1f4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4e:	23 30       	cpi	r18, 0x03	; 3
    1f50:	31 05       	cpc	r19, r1
    1f52:	0c f0       	brlt	.+2      	; 0x1f56 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1f54:	45 c0       	rjmp	.+138    	; 0x1fe0 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <KeyPad_4x4_adjustKeyNumber+0x68>
    1f60:	39 c0       	rjmp	.+114    	; 0x1fd4 <KeyPad_4x4_adjustKeyNumber+0xda>
    1f62:	67 c0       	rjmp	.+206    	; 0x2032 <KeyPad_4x4_adjustKeyNumber+0x138>
    1f64:	2b 81       	ldd	r18, Y+3	; 0x03
    1f66:	3c 81       	ldd	r19, Y+4	; 0x04
    1f68:	26 30       	cpi	r18, 0x06	; 6
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <KeyPad_4x4_adjustKeyNumber+0x76>
    1f6e:	41 c0       	rjmp	.+130    	; 0x1ff2 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	87 30       	cpi	r24, 0x07	; 7
    1f76:	91 05       	cpc	r25, r1
    1f78:	0c f0       	brlt	.+2      	; 0x1f7c <KeyPad_4x4_adjustKeyNumber+0x82>
    1f7a:	3e c0       	rjmp	.+124    	; 0x1ff8 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1f7c:	37 c0       	rjmp	.+110    	; 0x1fec <KeyPad_4x4_adjustKeyNumber+0xf2>
    1f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f80:	3c 81       	ldd	r19, Y+4	; 0x04
    1f82:	2c 30       	cpi	r18, 0x0C	; 12
    1f84:	31 05       	cpc	r19, r1
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <KeyPad_4x4_adjustKeyNumber+0x90>
    1f88:	46 c0       	rjmp	.+140    	; 0x2016 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	8d 30       	cpi	r24, 0x0D	; 13
    1f90:	91 05       	cpc	r25, r1
    1f92:	5c f4       	brge	.+22     	; 0x1faa <KeyPad_4x4_adjustKeyNumber+0xb0>
    1f94:	2b 81       	ldd	r18, Y+3	; 0x03
    1f96:	3c 81       	ldd	r19, Y+4	; 0x04
    1f98:	2a 30       	cpi	r18, 0x0A	; 10
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	b1 f1       	breq	.+108    	; 0x200a <KeyPad_4x4_adjustKeyNumber+0x110>
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	8b 30       	cpi	r24, 0x0B	; 11
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	a4 f5       	brge	.+104    	; 0x2010 <KeyPad_4x4_adjustKeyNumber+0x116>
    1fa8:	2d c0       	rjmp	.+90     	; 0x2004 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1faa:	2b 81       	ldd	r18, Y+3	; 0x03
    1fac:	3c 81       	ldd	r19, Y+4	; 0x04
    1fae:	2e 30       	cpi	r18, 0x0E	; 14
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	b9 f1       	breq	.+110    	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0x128>
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	8e 30       	cpi	r24, 0x0E	; 14
    1fba:	91 05       	cpc	r25, r1
    1fbc:	7c f1       	brlt	.+94     	; 0x201c <KeyPad_4x4_adjustKeyNumber+0x122>
    1fbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc2:	2f 30       	cpi	r18, 0x0F	; 15
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	79 f1       	breq	.+94     	; 0x2026 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	80 31       	cpi	r24, 0x10	; 16
    1fce:	91 05       	cpc	r25, r1
    1fd0:	69 f1       	breq	.+90     	; 0x202c <KeyPad_4x4_adjustKeyNumber+0x132>
    1fd2:	2f c0       	rjmp	.+94     	; 0x2032 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1fd4:	97 e0       	ldi	r25, 0x07	; 7
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	2e c0       	rjmp	.+92     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1fda:	28 e0       	ldi	r18, 0x08	; 8
    1fdc:	2a 83       	std	Y+2, r18	; 0x02
    1fde:	2b c0       	rjmp	.+86     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1fe0:	39 e0       	ldi	r19, 0x09	; 9
    1fe2:	3a 83       	std	Y+2, r19	; 0x02
    1fe4:	28 c0       	rjmp	.+80     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1fe6:	85 e2       	ldi	r24, 0x25	; 37
    1fe8:	8a 83       	std	Y+2, r24	; 0x02
    1fea:	25 c0       	rjmp	.+74     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1fec:	94 e0       	ldi	r25, 0x04	; 4
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	22 c0       	rjmp	.+68     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1ff2:	25 e0       	ldi	r18, 0x05	; 5
    1ff4:	2a 83       	std	Y+2, r18	; 0x02
    1ff6:	1f c0       	rjmp	.+62     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1ff8:	36 e0       	ldi	r19, 0x06	; 6
    1ffa:	3a 83       	std	Y+2, r19	; 0x02
    1ffc:	1c c0       	rjmp	.+56     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1ffe:	8a e2       	ldi	r24, 0x2A	; 42
    2000:	8a 83       	std	Y+2, r24	; 0x02
    2002:	19 c0       	rjmp	.+50     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    2004:	91 e0       	ldi	r25, 0x01	; 1
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	16 c0       	rjmp	.+44     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    200a:	22 e0       	ldi	r18, 0x02	; 2
    200c:	2a 83       	std	Y+2, r18	; 0x02
    200e:	13 c0       	rjmp	.+38     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    2010:	33 e0       	ldi	r19, 0x03	; 3
    2012:	3a 83       	std	Y+2, r19	; 0x02
    2014:	10 c0       	rjmp	.+32     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    2016:	8d e2       	ldi	r24, 0x2D	; 45
    2018:	8a 83       	std	Y+2, r24	; 0x02
    201a:	0d c0       	rjmp	.+26     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    201c:	9d e0       	ldi	r25, 0x0D	; 13
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	0a c0       	rjmp	.+20     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    2022:	1a 82       	std	Y+2, r1	; 0x02
    2024:	08 c0       	rjmp	.+16     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    2026:	2d e3       	ldi	r18, 0x3D	; 61
    2028:	2a 83       	std	Y+2, r18	; 0x02
    202a:	05 c0       	rjmp	.+10     	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    202c:	3b e2       	ldi	r19, 0x2B	; 43
    202e:	3a 83       	std	Y+2, r19	; 0x02
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	8a 83       	std	Y+2, r24	; 0x02
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    204e:	a7 e3       	ldi	r26, 0x37	; 55
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e7 e3       	ldi	r30, 0x37	; 55
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8e 60       	ori	r24, 0x0E	; 14
    205a:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    205c:	e4 e3       	ldi	r30, 0x34	; 52
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2064:	88 e3       	ldi	r24, 0x38	; 56
    2066:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    206a:	8c e0       	ldi	r24, 0x0C	; 12
    206c:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
}
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	e9 97       	sbiw	r28, 0x39	; 57
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2092:	a8 e3       	ldi	r26, 0x38	; 56
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e8 e3       	ldi	r30, 0x38	; 56
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8d 7f       	andi	r24, 0xFD	; 253
    209e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    20a0:	a8 e3       	ldi	r26, 0x38	; 56
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e8 e3       	ldi	r30, 0x38	; 56
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	8b 7f       	andi	r24, 0xFB	; 251
    20ac:	8c 93       	st	X, r24
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a0 e8       	ldi	r26, 0x80	; 128
    20b4:	bf e3       	ldi	r27, 0x3F	; 63
    20b6:	8d ab       	std	Y+53, r24	; 0x35
    20b8:	9e ab       	std	Y+54, r25	; 0x36
    20ba:	af ab       	std	Y+55, r26	; 0x37
    20bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20be:	6d a9       	ldd	r22, Y+53	; 0x35
    20c0:	7e a9       	ldd	r23, Y+54	; 0x36
    20c2:	8f a9       	ldd	r24, Y+55	; 0x37
    20c4:	98 ad       	ldd	r25, Y+56	; 0x38
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	4a ef       	ldi	r20, 0xFA	; 250
    20cc:	54 e4       	ldi	r21, 0x44	; 68
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	89 ab       	std	Y+49, r24	; 0x31
    20d8:	9a ab       	std	Y+50, r25	; 0x32
    20da:	ab ab       	std	Y+51, r26	; 0x33
    20dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20de:	69 a9       	ldd	r22, Y+49	; 0x31
    20e0:	7a a9       	ldd	r23, Y+50	; 0x32
    20e2:	8b a9       	ldd	r24, Y+51	; 0x33
    20e4:	9c a9       	ldd	r25, Y+52	; 0x34
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e8       	ldi	r20, 0x80	; 128
    20ec:	5f e3       	ldi	r21, 0x3F	; 63
    20ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f2:	88 23       	and	r24, r24
    20f4:	2c f4       	brge	.+10     	; 0x2100 <LCD_sendCommand+0x84>
		__ticks = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	98 ab       	std	Y+48, r25	; 0x30
    20fc:	8f a7       	std	Y+47, r24	; 0x2f
    20fe:	3f c0       	rjmp	.+126    	; 0x217e <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    2100:	69 a9       	ldd	r22, Y+49	; 0x31
    2102:	7a a9       	ldd	r23, Y+50	; 0x32
    2104:	8b a9       	ldd	r24, Y+51	; 0x33
    2106:	9c a9       	ldd	r25, Y+52	; 0x34
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	3f ef       	ldi	r19, 0xFF	; 255
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	57 e4       	ldi	r21, 0x47	; 71
    2110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	4c f5       	brge	.+82     	; 0x216a <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2118:	6d a9       	ldd	r22, Y+53	; 0x35
    211a:	7e a9       	ldd	r23, Y+54	; 0x36
    211c:	8f a9       	ldd	r24, Y+55	; 0x37
    211e:	98 ad       	ldd	r25, Y+56	; 0x38
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e2       	ldi	r20, 0x20	; 32
    2126:	51 e4       	ldi	r21, 0x41	; 65
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	98 ab       	std	Y+48, r25	; 0x30
    213e:	8f a7       	std	Y+47, r24	; 0x2f
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <LCD_sendCommand+0xe4>
    2142:	88 ec       	ldi	r24, 0xC8	; 200
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9e a7       	std	Y+46, r25	; 0x2e
    2148:	8d a7       	std	Y+45, r24	; 0x2d
    214a:	8d a5       	ldd	r24, Y+45	; 0x2d
    214c:	9e a5       	ldd	r25, Y+46	; 0x2e
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_sendCommand+0xd2>
    2152:	9e a7       	std	Y+46, r25	; 0x2e
    2154:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	8f a5       	ldd	r24, Y+47	; 0x2f
    2158:	98 a9       	ldd	r25, Y+48	; 0x30
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	98 ab       	std	Y+48, r25	; 0x30
    215e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	8f a5       	ldd	r24, Y+47	; 0x2f
    2162:	98 a9       	ldd	r25, Y+48	; 0x30
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	69 f7       	brne	.-38     	; 0x2142 <LCD_sendCommand+0xc6>
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216a:	69 a9       	ldd	r22, Y+49	; 0x31
    216c:	7a a9       	ldd	r23, Y+50	; 0x32
    216e:	8b a9       	ldd	r24, Y+51	; 0x33
    2170:	9c a9       	ldd	r25, Y+52	; 0x34
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	98 ab       	std	Y+48, r25	; 0x30
    217c:	8f a7       	std	Y+47, r24	; 0x2f
    217e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2180:	98 a9       	ldd	r25, Y+48	; 0x30
    2182:	9c a7       	std	Y+44, r25	; 0x2c
    2184:	8b a7       	std	Y+43, r24	; 0x2b
    2186:	8b a5       	ldd	r24, Y+43	; 0x2b
    2188:	9c a5       	ldd	r25, Y+44	; 0x2c
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_sendCommand+0x10e>
    218e:	9c a7       	std	Y+44, r25	; 0x2c
    2190:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2192:	a8 e3       	ldi	r26, 0x38	; 56
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e8 e3       	ldi	r30, 0x38	; 56
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	88 60       	ori	r24, 0x08	; 8
    219e:	8c 93       	st	X, r24
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a0 e8       	ldi	r26, 0x80	; 128
    21a6:	bf e3       	ldi	r27, 0x3F	; 63
    21a8:	8f a3       	std	Y+39, r24	; 0x27
    21aa:	98 a7       	std	Y+40, r25	; 0x28
    21ac:	a9 a7       	std	Y+41, r26	; 0x29
    21ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	6f a1       	ldd	r22, Y+39	; 0x27
    21b2:	78 a5       	ldd	r23, Y+40	; 0x28
    21b4:	89 a5       	ldd	r24, Y+41	; 0x29
    21b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4a ef       	ldi	r20, 0xFA	; 250
    21be:	54 e4       	ldi	r21, 0x44	; 68
    21c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	8b a3       	std	Y+35, r24	; 0x23
    21ca:	9c a3       	std	Y+36, r25	; 0x24
    21cc:	ad a3       	std	Y+37, r26	; 0x25
    21ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21d0:	6b a1       	ldd	r22, Y+35	; 0x23
    21d2:	7c a1       	ldd	r23, Y+36	; 0x24
    21d4:	8d a1       	ldd	r24, Y+37	; 0x25
    21d6:	9e a1       	ldd	r25, Y+38	; 0x26
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	2c f4       	brge	.+10     	; 0x21f2 <LCD_sendCommand+0x176>
		__ticks = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9a a3       	std	Y+34, r25	; 0x22
    21ee:	89 a3       	std	Y+33, r24	; 0x21
    21f0:	3f c0       	rjmp	.+126    	; 0x2270 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    21f2:	6b a1       	ldd	r22, Y+35	; 0x23
    21f4:	7c a1       	ldd	r23, Y+36	; 0x24
    21f6:	8d a1       	ldd	r24, Y+37	; 0x25
    21f8:	9e a1       	ldd	r25, Y+38	; 0x26
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	4f e7       	ldi	r20, 0x7F	; 127
    2200:	57 e4       	ldi	r21, 0x47	; 71
    2202:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2206:	18 16       	cp	r1, r24
    2208:	4c f5       	brge	.+82     	; 0x225c <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220a:	6f a1       	ldd	r22, Y+39	; 0x27
    220c:	78 a5       	ldd	r23, Y+40	; 0x28
    220e:	89 a5       	ldd	r24, Y+41	; 0x29
    2210:	9a a5       	ldd	r25, Y+42	; 0x2a
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9a a3       	std	Y+34, r25	; 0x22
    2230:	89 a3       	std	Y+33, r24	; 0x21
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <LCD_sendCommand+0x1d6>
    2234:	88 ec       	ldi	r24, 0xC8	; 200
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	98 a3       	std	Y+32, r25	; 0x20
    223a:	8f 8f       	std	Y+31, r24	; 0x1f
    223c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    223e:	98 a1       	ldd	r25, Y+32	; 0x20
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <LCD_sendCommand+0x1c4>
    2244:	98 a3       	std	Y+32, r25	; 0x20
    2246:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	89 a1       	ldd	r24, Y+33	; 0x21
    224a:	9a a1       	ldd	r25, Y+34	; 0x22
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	9a a3       	std	Y+34, r25	; 0x22
    2250:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2252:	89 a1       	ldd	r24, Y+33	; 0x21
    2254:	9a a1       	ldd	r25, Y+34	; 0x22
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	69 f7       	brne	.-38     	; 0x2234 <LCD_sendCommand+0x1b8>
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225c:	6b a1       	ldd	r22, Y+35	; 0x23
    225e:	7c a1       	ldd	r23, Y+36	; 0x24
    2260:	8d a1       	ldd	r24, Y+37	; 0x25
    2262:	9e a1       	ldd	r25, Y+38	; 0x26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9a a3       	std	Y+34, r25	; 0x22
    226e:	89 a3       	std	Y+33, r24	; 0x21
    2270:	89 a1       	ldd	r24, Y+33	; 0x21
    2272:	9a a1       	ldd	r25, Y+34	; 0x22
    2274:	9e 8f       	std	Y+30, r25	; 0x1e
    2276:	8d 8f       	std	Y+29, r24	; 0x1d
    2278:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <LCD_sendCommand+0x200>
    2280:	9e 8f       	std	Y+30, r25	; 0x1e
    2282:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    2284:	e5 e3       	ldi	r30, 0x35	; 53
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	89 ad       	ldd	r24, Y+57	; 0x39
    228a:	80 83       	st	Z, r24
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e8       	ldi	r26, 0x80	; 128
    2292:	bf e3       	ldi	r27, 0x3F	; 63
    2294:	89 8f       	std	Y+25, r24	; 0x19
    2296:	9a 8f       	std	Y+26, r25	; 0x1a
    2298:	ab 8f       	std	Y+27, r26	; 0x1b
    229a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	69 8d       	ldd	r22, Y+25	; 0x19
    229e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8d 8b       	std	Y+21, r24	; 0x15
    22b6:	9e 8b       	std	Y+22, r25	; 0x16
    22b8:	af 8b       	std	Y+23, r26	; 0x17
    22ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22bc:	6d 89       	ldd	r22, Y+21	; 0x15
    22be:	7e 89       	ldd	r23, Y+22	; 0x16
    22c0:	8f 89       	ldd	r24, Y+23	; 0x17
    22c2:	98 8d       	ldd	r25, Y+24	; 0x18
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_sendCommand+0x262>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9c 8b       	std	Y+20, r25	; 0x14
    22da:	8b 8b       	std	Y+19, r24	; 0x13
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    22de:	6d 89       	ldd	r22, Y+21	; 0x15
    22e0:	7e 89       	ldd	r23, Y+22	; 0x16
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	98 8d       	ldd	r25, Y+24	; 0x18
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	69 8d       	ldd	r22, Y+25	; 0x19
    22f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9c 8b       	std	Y+20, r25	; 0x14
    231c:	8b 8b       	std	Y+19, r24	; 0x13
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_sendCommand+0x2c2>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9a 8b       	std	Y+18, r25	; 0x12
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	89 89       	ldd	r24, Y+17	; 0x11
    232a:	9a 89       	ldd	r25, Y+18	; 0x12
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_sendCommand+0x2b0>
    2330:	9a 8b       	std	Y+18, r25	; 0x12
    2332:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8b 89       	ldd	r24, Y+19	; 0x13
    2340:	9c 89       	ldd	r25, Y+20	; 0x14
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_sendCommand+0x2a4>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9c 8b       	std	Y+20, r25	; 0x14
    235a:	8b 8b       	std	Y+19, r24	; 0x13
    235c:	8b 89       	ldd	r24, Y+19	; 0x13
    235e:	9c 89       	ldd	r25, Y+20	; 0x14
    2360:	98 8b       	std	Y+16, r25	; 0x10
    2362:	8f 87       	std	Y+15, r24	; 0x0f
    2364:	8f 85       	ldd	r24, Y+15	; 0x0f
    2366:	98 89       	ldd	r25, Y+16	; 0x10
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_sendCommand+0x2ec>
    236c:	98 8b       	std	Y+16, r25	; 0x10
    236e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2370:	a8 e3       	ldi	r26, 0x38	; 56
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e8 e3       	ldi	r30, 0x38	; 56
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	87 7f       	andi	r24, 0xF7	; 247
    237c:	8c 93       	st	X, r24
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 e8       	ldi	r26, 0x80	; 128
    2384:	bf e3       	ldi	r27, 0x3F	; 63
    2386:	8b 87       	std	Y+11, r24	; 0x0b
    2388:	9c 87       	std	Y+12, r25	; 0x0c
    238a:	ad 87       	std	Y+13, r26	; 0x0d
    238c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a ef       	ldi	r20, 0xFA	; 250
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8f 83       	std	Y+7, r24	; 0x07
    23a8:	98 87       	std	Y+8, r25	; 0x08
    23aa:	a9 87       	std	Y+9, r26	; 0x09
    23ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <LCD_sendCommand+0x354>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    23d0:	6f 81       	ldd	r22, Y+7	; 0x07
    23d2:	78 85       	ldd	r23, Y+8	; 0x08
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <LCD_sendCommand+0x3b4>
    2412:	88 ec       	ldi	r24, 0xC8	; 200
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_sendCommand+0x3a2>
    2422:	9c 83       	std	Y+4, r25	; 0x04
    2424:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <LCD_sendCommand+0x396>
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_sendCommand+0x3de>
    245e:	9a 83       	std	Y+2, r25	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2462:	e9 96       	adiw	r28, 0x39	; 57
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	e9 97       	sbiw	r28, 0x39	; 57
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    248a:	a8 e3       	ldi	r26, 0x38	; 56
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e8 e3       	ldi	r30, 0x38	; 56
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	82 60       	ori	r24, 0x02	; 2
    2496:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2498:	a8 e3       	ldi	r26, 0x38	; 56
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e8 e3       	ldi	r30, 0x38	; 56
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	8b 7f       	andi	r24, 0xFB	; 251
    24a4:	8c 93       	st	X, r24
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	bf e3       	ldi	r27, 0x3F	; 63
    24ae:	8d ab       	std	Y+53, r24	; 0x35
    24b0:	9e ab       	std	Y+54, r25	; 0x36
    24b2:	af ab       	std	Y+55, r26	; 0x37
    24b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6d a9       	ldd	r22, Y+53	; 0x35
    24b8:	7e a9       	ldd	r23, Y+54	; 0x36
    24ba:	8f a9       	ldd	r24, Y+55	; 0x37
    24bc:	98 ad       	ldd	r25, Y+56	; 0x38
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a ef       	ldi	r20, 0xFA	; 250
    24c4:	54 e4       	ldi	r21, 0x44	; 68
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	89 ab       	std	Y+49, r24	; 0x31
    24d0:	9a ab       	std	Y+50, r25	; 0x32
    24d2:	ab ab       	std	Y+51, r26	; 0x33
    24d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24d6:	69 a9       	ldd	r22, Y+49	; 0x31
    24d8:	7a a9       	ldd	r23, Y+50	; 0x32
    24da:	8b a9       	ldd	r24, Y+51	; 0x33
    24dc:	9c a9       	ldd	r25, Y+52	; 0x34
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_displayCharacter+0x84>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	98 ab       	std	Y+48, r25	; 0x30
    24f4:	8f a7       	std	Y+47, r24	; 0x2f
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    24f8:	69 a9       	ldd	r22, Y+49	; 0x31
    24fa:	7a a9       	ldd	r23, Y+50	; 0x32
    24fc:	8b a9       	ldd	r24, Y+51	; 0x33
    24fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6d a9       	ldd	r22, Y+53	; 0x35
    2512:	7e a9       	ldd	r23, Y+54	; 0x36
    2514:	8f a9       	ldd	r24, Y+55	; 0x37
    2516:	98 ad       	ldd	r25, Y+56	; 0x38
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	98 ab       	std	Y+48, r25	; 0x30
    2536:	8f a7       	std	Y+47, r24	; 0x2f
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_displayCharacter+0xe4>
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e a7       	std	Y+46, r25	; 0x2e
    2540:	8d a7       	std	Y+45, r24	; 0x2d
    2542:	8d a5       	ldd	r24, Y+45	; 0x2d
    2544:	9e a5       	ldd	r25, Y+46	; 0x2e
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_displayCharacter+0xd2>
    254a:	9e a7       	std	Y+46, r25	; 0x2e
    254c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2550:	98 a9       	ldd	r25, Y+48	; 0x30
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	98 ab       	std	Y+48, r25	; 0x30
    2556:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	8f a5       	ldd	r24, Y+47	; 0x2f
    255a:	98 a9       	ldd	r25, Y+48	; 0x30
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_displayCharacter+0xc6>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	69 a9       	ldd	r22, Y+49	; 0x31
    2564:	7a a9       	ldd	r23, Y+50	; 0x32
    2566:	8b a9       	ldd	r24, Y+51	; 0x33
    2568:	9c a9       	ldd	r25, Y+52	; 0x34
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	98 ab       	std	Y+48, r25	; 0x30
    2574:	8f a7       	std	Y+47, r24	; 0x2f
    2576:	8f a5       	ldd	r24, Y+47	; 0x2f
    2578:	98 a9       	ldd	r25, Y+48	; 0x30
    257a:	9c a7       	std	Y+44, r25	; 0x2c
    257c:	8b a7       	std	Y+43, r24	; 0x2b
    257e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2580:	9c a5       	ldd	r25, Y+44	; 0x2c
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_displayCharacter+0x10e>
    2586:	9c a7       	std	Y+44, r25	; 0x2c
    2588:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    258a:	a8 e3       	ldi	r26, 0x38	; 56
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e8 e3       	ldi	r30, 0x38	; 56
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	88 60       	ori	r24, 0x08	; 8
    2596:	8c 93       	st	X, r24
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	a0 e8       	ldi	r26, 0x80	; 128
    259e:	bf e3       	ldi	r27, 0x3F	; 63
    25a0:	8f a3       	std	Y+39, r24	; 0x27
    25a2:	98 a7       	std	Y+40, r25	; 0x28
    25a4:	a9 a7       	std	Y+41, r26	; 0x29
    25a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a8:	6f a1       	ldd	r22, Y+39	; 0x27
    25aa:	78 a5       	ldd	r23, Y+40	; 0x28
    25ac:	89 a5       	ldd	r24, Y+41	; 0x29
    25ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	4a ef       	ldi	r20, 0xFA	; 250
    25b6:	54 e4       	ldi	r21, 0x44	; 68
    25b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	8b a3       	std	Y+35, r24	; 0x23
    25c2:	9c a3       	std	Y+36, r25	; 0x24
    25c4:	ad a3       	std	Y+37, r26	; 0x25
    25c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25c8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ca:	7c a1       	ldd	r23, Y+36	; 0x24
    25cc:	8d a1       	ldd	r24, Y+37	; 0x25
    25ce:	9e a1       	ldd	r25, Y+38	; 0x26
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5f e3       	ldi	r21, 0x3F	; 63
    25d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25dc:	88 23       	and	r24, r24
    25de:	2c f4       	brge	.+10     	; 0x25ea <LCD_displayCharacter+0x176>
		__ticks = 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9a a3       	std	Y+34, r25	; 0x22
    25e6:	89 a3       	std	Y+33, r24	; 0x21
    25e8:	3f c0       	rjmp	.+126    	; 0x2668 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    25ea:	6b a1       	ldd	r22, Y+35	; 0x23
    25ec:	7c a1       	ldd	r23, Y+36	; 0x24
    25ee:	8d a1       	ldd	r24, Y+37	; 0x25
    25f0:	9e a1       	ldd	r25, Y+38	; 0x26
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	3f ef       	ldi	r19, 0xFF	; 255
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	57 e4       	ldi	r21, 0x47	; 71
    25fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	4c f5       	brge	.+82     	; 0x2654 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	6f a1       	ldd	r22, Y+39	; 0x27
    2604:	78 a5       	ldd	r23, Y+40	; 0x28
    2606:	89 a5       	ldd	r24, Y+41	; 0x29
    2608:	9a a5       	ldd	r25, Y+42	; 0x2a
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e2       	ldi	r20, 0x20	; 32
    2610:	51 e4       	ldi	r21, 0x41	; 65
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	bc 01       	movw	r22, r24
    261c:	cd 01       	movw	r24, r26
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	9a a3       	std	Y+34, r25	; 0x22
    2628:	89 a3       	std	Y+33, r24	; 0x21
    262a:	0f c0       	rjmp	.+30     	; 0x264a <LCD_displayCharacter+0x1d6>
    262c:	88 ec       	ldi	r24, 0xC8	; 200
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	98 a3       	std	Y+32, r25	; 0x20
    2632:	8f 8f       	std	Y+31, r24	; 0x1f
    2634:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2636:	98 a1       	ldd	r25, Y+32	; 0x20
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <LCD_displayCharacter+0x1c4>
    263c:	98 a3       	std	Y+32, r25	; 0x20
    263e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2640:	89 a1       	ldd	r24, Y+33	; 0x21
    2642:	9a a1       	ldd	r25, Y+34	; 0x22
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	9a a3       	std	Y+34, r25	; 0x22
    2648:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	89 a1       	ldd	r24, Y+33	; 0x21
    264c:	9a a1       	ldd	r25, Y+34	; 0x22
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	69 f7       	brne	.-38     	; 0x262c <LCD_displayCharacter+0x1b8>
    2652:	14 c0       	rjmp	.+40     	; 0x267c <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2654:	6b a1       	ldd	r22, Y+35	; 0x23
    2656:	7c a1       	ldd	r23, Y+36	; 0x24
    2658:	8d a1       	ldd	r24, Y+37	; 0x25
    265a:	9e a1       	ldd	r25, Y+38	; 0x26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9a a3       	std	Y+34, r25	; 0x22
    2666:	89 a3       	std	Y+33, r24	; 0x21
    2668:	89 a1       	ldd	r24, Y+33	; 0x21
    266a:	9a a1       	ldd	r25, Y+34	; 0x22
    266c:	9e 8f       	std	Y+30, r25	; 0x1e
    266e:	8d 8f       	std	Y+29, r24	; 0x1d
    2670:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2672:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <LCD_displayCharacter+0x200>
    2678:	9e 8f       	std	Y+30, r25	; 0x1e
    267a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    267c:	e5 e3       	ldi	r30, 0x35	; 53
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	89 ad       	ldd	r24, Y+57	; 0x39
    2682:	80 83       	st	Z, r24
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a0 e8       	ldi	r26, 0x80	; 128
    268a:	bf e3       	ldi	r27, 0x3F	; 63
    268c:	89 8f       	std	Y+25, r24	; 0x19
    268e:	9a 8f       	std	Y+26, r25	; 0x1a
    2690:	ab 8f       	std	Y+27, r26	; 0x1b
    2692:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2694:	69 8d       	ldd	r22, Y+25	; 0x19
    2696:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	4a ef       	ldi	r20, 0xFA	; 250
    26a2:	54 e4       	ldi	r21, 0x44	; 68
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	8d 8b       	std	Y+21, r24	; 0x15
    26ae:	9e 8b       	std	Y+22, r25	; 0x16
    26b0:	af 8b       	std	Y+23, r26	; 0x17
    26b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26b4:	6d 89       	ldd	r22, Y+21	; 0x15
    26b6:	7e 89       	ldd	r23, Y+22	; 0x16
    26b8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ba:	98 8d       	ldd	r25, Y+24	; 0x18
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e8       	ldi	r20, 0x80	; 128
    26c2:	5f e3       	ldi	r21, 0x3F	; 63
    26c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c8:	88 23       	and	r24, r24
    26ca:	2c f4       	brge	.+10     	; 0x26d6 <LCD_displayCharacter+0x262>
		__ticks = 1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9c 8b       	std	Y+20, r25	; 0x14
    26d2:	8b 8b       	std	Y+19, r24	; 0x13
    26d4:	3f c0       	rjmp	.+126    	; 0x2754 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    26d6:	6d 89       	ldd	r22, Y+21	; 0x15
    26d8:	7e 89       	ldd	r23, Y+22	; 0x16
    26da:	8f 89       	ldd	r24, Y+23	; 0x17
    26dc:	98 8d       	ldd	r25, Y+24	; 0x18
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	3f ef       	ldi	r19, 0xFF	; 255
    26e2:	4f e7       	ldi	r20, 0x7F	; 127
    26e4:	57 e4       	ldi	r21, 0x47	; 71
    26e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ea:	18 16       	cp	r1, r24
    26ec:	4c f5       	brge	.+82     	; 0x2740 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ee:	69 8d       	ldd	r22, Y+25	; 0x19
    26f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e2       	ldi	r20, 0x20	; 32
    26fc:	51 e4       	ldi	r21, 0x41	; 65
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9c 8b       	std	Y+20, r25	; 0x14
    2714:	8b 8b       	std	Y+19, r24	; 0x13
    2716:	0f c0       	rjmp	.+30     	; 0x2736 <LCD_displayCharacter+0x2c2>
    2718:	88 ec       	ldi	r24, 0xC8	; 200
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9a 8b       	std	Y+18, r25	; 0x12
    271e:	89 8b       	std	Y+17, r24	; 0x11
    2720:	89 89       	ldd	r24, Y+17	; 0x11
    2722:	9a 89       	ldd	r25, Y+18	; 0x12
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <LCD_displayCharacter+0x2b0>
    2728:	9a 8b       	std	Y+18, r25	; 0x12
    272a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272c:	8b 89       	ldd	r24, Y+19	; 0x13
    272e:	9c 89       	ldd	r25, Y+20	; 0x14
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	9c 8b       	std	Y+20, r25	; 0x14
    2734:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2736:	8b 89       	ldd	r24, Y+19	; 0x13
    2738:	9c 89       	ldd	r25, Y+20	; 0x14
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	69 f7       	brne	.-38     	; 0x2718 <LCD_displayCharacter+0x2a4>
    273e:	14 c0       	rjmp	.+40     	; 0x2768 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2740:	6d 89       	ldd	r22, Y+21	; 0x15
    2742:	7e 89       	ldd	r23, Y+22	; 0x16
    2744:	8f 89       	ldd	r24, Y+23	; 0x17
    2746:	98 8d       	ldd	r25, Y+24	; 0x18
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9c 8b       	std	Y+20, r25	; 0x14
    2752:	8b 8b       	std	Y+19, r24	; 0x13
    2754:	8b 89       	ldd	r24, Y+19	; 0x13
    2756:	9c 89       	ldd	r25, Y+20	; 0x14
    2758:	98 8b       	std	Y+16, r25	; 0x10
    275a:	8f 87       	std	Y+15, r24	; 0x0f
    275c:	8f 85       	ldd	r24, Y+15	; 0x0f
    275e:	98 89       	ldd	r25, Y+16	; 0x10
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <LCD_displayCharacter+0x2ec>
    2764:	98 8b       	std	Y+16, r25	; 0x10
    2766:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2768:	a8 e3       	ldi	r26, 0x38	; 56
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e8 e3       	ldi	r30, 0x38	; 56
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	87 7f       	andi	r24, 0xF7	; 247
    2774:	8c 93       	st	X, r24
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a0 e8       	ldi	r26, 0x80	; 128
    277c:	bf e3       	ldi	r27, 0x3F	; 63
    277e:	8b 87       	std	Y+11, r24	; 0x0b
    2780:	9c 87       	std	Y+12, r25	; 0x0c
    2782:	ad 87       	std	Y+13, r26	; 0x0d
    2784:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2786:	6b 85       	ldd	r22, Y+11	; 0x0b
    2788:	7c 85       	ldd	r23, Y+12	; 0x0c
    278a:	8d 85       	ldd	r24, Y+13	; 0x0d
    278c:	9e 85       	ldd	r25, Y+14	; 0x0e
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	4a ef       	ldi	r20, 0xFA	; 250
    2794:	54 e4       	ldi	r21, 0x44	; 68
    2796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	8f 83       	std	Y+7, r24	; 0x07
    27a0:	98 87       	std	Y+8, r25	; 0x08
    27a2:	a9 87       	std	Y+9, r26	; 0x09
    27a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a6:	6f 81       	ldd	r22, Y+7	; 0x07
    27a8:	78 85       	ldd	r23, Y+8	; 0x08
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e8       	ldi	r20, 0x80	; 128
    27b4:	5f e3       	ldi	r21, 0x3F	; 63
    27b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ba:	88 23       	and	r24, r24
    27bc:	2c f4       	brge	.+10     	; 0x27c8 <LCD_displayCharacter+0x354>
		__ticks = 1;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	3f c0       	rjmp	.+126    	; 0x2846 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    27c8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ca:	78 85       	ldd	r23, Y+8	; 0x08
    27cc:	89 85       	ldd	r24, Y+9	; 0x09
    27ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	3f ef       	ldi	r19, 0xFF	; 255
    27d4:	4f e7       	ldi	r20, 0x7F	; 127
    27d6:	57 e4       	ldi	r21, 0x47	; 71
    27d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27dc:	18 16       	cp	r1, r24
    27de:	4c f5       	brge	.+82     	; 0x2832 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e2       	ldi	r20, 0x20	; 32
    27ee:	51 e4       	ldi	r21, 0x41	; 65
    27f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	bc 01       	movw	r22, r24
    27fa:	cd 01       	movw	r24, r26
    27fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
    2808:	0f c0       	rjmp	.+30     	; 0x2828 <LCD_displayCharacter+0x3b4>
    280a:	88 ec       	ldi	r24, 0xC8	; 200
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9c 83       	std	Y+4, r25	; 0x04
    2810:	8b 83       	std	Y+3, r24	; 0x03
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <LCD_displayCharacter+0x3a2>
    281a:	9c 83       	std	Y+4, r25	; 0x04
    281c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	9e 81       	ldd	r25, Y+6	; 0x06
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	69 f7       	brne	.-38     	; 0x280a <LCD_displayCharacter+0x396>
    2830:	14 c0       	rjmp	.+40     	; 0x285a <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	9e 83       	std	Y+6, r25	; 0x06
    2844:	8d 83       	std	Y+5, r24	; 0x05
    2846:	8d 81       	ldd	r24, Y+5	; 0x05
    2848:	9e 81       	ldd	r25, Y+6	; 0x06
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <LCD_displayCharacter+0x3de>
    2856:	9a 83       	std	Y+2, r25	; 0x02
    2858:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    285a:	e9 96       	adiw	r28, 0x39	; 57
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <LCD_displayString+0x6>
    2872:	0f 92       	push	r0
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	9b 83       	std	Y+3, r25	; 0x03
    287a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    287c:	19 82       	std	Y+1, r1	; 0x01
    287e:	0e c0       	rjmp	.+28     	; 0x289c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	9b 81       	ldd	r25, Y+3	; 0x03
    288a:	fc 01       	movw	r30, r24
    288c:	e2 0f       	add	r30, r18
    288e:	f3 1f       	adc	r31, r19
    2890:	80 81       	ld	r24, Z
    2892:	0e 94 3a 12 	call	0x2474	; 0x2474 <LCD_displayCharacter>
		i++;
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	9b 81       	ldd	r25, Y+3	; 0x03
    28a6:	fc 01       	movw	r30, r24
    28a8:	e2 0f       	add	r30, r18
    28aa:	f3 1f       	adc	r31, r19
    28ac:	80 81       	ld	r24, Z
    28ae:	88 23       	and	r24, r24
    28b0:	39 f7       	brne	.-50     	; 0x2880 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <LCD_goToRowColumn+0x6>
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <LCD_goToRowColumn+0x8>
    28c6:	0f 92       	push	r0
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	8a 83       	std	Y+2, r24	; 0x02
    28ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	3d 83       	std	Y+5, r19	; 0x05
    28d8:	2c 83       	std	Y+4, r18	; 0x04
    28da:	8c 81       	ldd	r24, Y+4	; 0x04
    28dc:	9d 81       	ldd	r25, Y+5	; 0x05
    28de:	81 30       	cpi	r24, 0x01	; 1
    28e0:	91 05       	cpc	r25, r1
    28e2:	c1 f0       	breq	.+48     	; 0x2914 <LCD_goToRowColumn+0x56>
    28e4:	2c 81       	ldd	r18, Y+4	; 0x04
    28e6:	3d 81       	ldd	r19, Y+5	; 0x05
    28e8:	22 30       	cpi	r18, 0x02	; 2
    28ea:	31 05       	cpc	r19, r1
    28ec:	2c f4       	brge	.+10     	; 0x28f8 <LCD_goToRowColumn+0x3a>
    28ee:	8c 81       	ldd	r24, Y+4	; 0x04
    28f0:	9d 81       	ldd	r25, Y+5	; 0x05
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	61 f0       	breq	.+24     	; 0x290e <LCD_goToRowColumn+0x50>
    28f6:	19 c0       	rjmp	.+50     	; 0x292a <LCD_goToRowColumn+0x6c>
    28f8:	2c 81       	ldd	r18, Y+4	; 0x04
    28fa:	3d 81       	ldd	r19, Y+5	; 0x05
    28fc:	22 30       	cpi	r18, 0x02	; 2
    28fe:	31 05       	cpc	r19, r1
    2900:	69 f0       	breq	.+26     	; 0x291c <LCD_goToRowColumn+0x5e>
    2902:	8c 81       	ldd	r24, Y+4	; 0x04
    2904:	9d 81       	ldd	r25, Y+5	; 0x05
    2906:	83 30       	cpi	r24, 0x03	; 3
    2908:	91 05       	cpc	r25, r1
    290a:	61 f0       	breq	.+24     	; 0x2924 <LCD_goToRowColumn+0x66>
    290c:	0e c0       	rjmp	.+28     	; 0x292a <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	89 83       	std	Y+1, r24	; 0x01
    2912:	0b c0       	rjmp	.+22     	; 0x292a <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	80 5c       	subi	r24, 0xC0	; 192
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	07 c0       	rjmp	.+14     	; 0x292a <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	80 5f       	subi	r24, 0xF0	; 240
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	03 c0       	rjmp	.+6      	; 0x292a <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	80 5b       	subi	r24, 0xB0	; 176
    2928:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	80 68       	ori	r24, 0x80	; 128
    292e:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
}
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <LCD_displayStringRowColumn+0x6>
    2948:	00 d0       	rcall	.+0      	; 0x294a <LCD_displayStringRowColumn+0x8>
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	6a 83       	std	Y+2, r22	; 0x02
    2952:	5c 83       	std	Y+4, r21	; 0x04
    2954:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	6a 81       	ldd	r22, Y+2	; 0x02
    295a:	0e 94 5f 14 	call	0x28be	; 0x28be <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	62 97       	sbiw	r28, 0x12	; 18
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	9a 8b       	std	Y+18, r25	; 0x12
    298a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    298c:	89 89       	ldd	r24, Y+17	; 0x11
    298e:	9a 89       	ldd	r25, Y+18	; 0x12
    2990:	9e 01       	movw	r18, r28
    2992:	2f 5f       	subi	r18, 0xFF	; 255
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	b9 01       	movw	r22, r18
    2998:	4a e0       	ldi	r20, 0x0A	; 10
    299a:	50 e0       	ldi	r21, 0x00	; 0
    299c:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <itoa>
   LCD_displayString(buff);
    29a0:	ce 01       	movw	r24, r28
    29a2:	01 96       	adiw	r24, 0x01	; 1
    29a4:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
}
    29a8:	62 96       	adiw	r28, 0x12	; 18
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_sendCommand>
}
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <UART_init+0xa>
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    29e0:	eb e2       	ldi	r30, 0x2B	; 43
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    29e8:	ea e2       	ldi	r30, 0x2A	; 42
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	88 e1       	ldi	r24, 0x18	; 24
    29ee:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    29f0:	e0 e4       	ldi	r30, 0x40	; 64
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 e8       	ldi	r24, 0x80	; 128
    29f6:	80 83       	st	Z, r24

	if(Config_Ptr->parity == EVEN_PARITY)
    29f8:	e9 81       	ldd	r30, Y+1	; 0x01
    29fa:	fa 81       	ldd	r31, Y+2	; 0x02
    29fc:	81 81       	ldd	r24, Z+1	; 0x01
    29fe:	82 30       	cpi	r24, 0x02	; 2
    2a00:	41 f4       	brne	.+16     	; 0x2a12 <UART_init+0x44>
	{
		SET_BIT(UCSRC, UPM1);
    2a02:	a0 e4       	ldi	r26, 0x40	; 64
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e0 e4       	ldi	r30, 0x40	; 64
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	80 62       	ori	r24, 0x20	; 32
    2a0e:	8c 93       	st	X, r24
    2a10:	13 c0       	rjmp	.+38     	; 0x2a38 <UART_init+0x6a>
	}
	else if(Config_Ptr->parity == ODD_PARITY)
    2a12:	e9 81       	ldd	r30, Y+1	; 0x01
    2a14:	fa 81       	ldd	r31, Y+2	; 0x02
    2a16:	81 81       	ldd	r24, Z+1	; 0x01
    2a18:	83 30       	cpi	r24, 0x03	; 3
    2a1a:	71 f4       	brne	.+28     	; 0x2a38 <UART_init+0x6a>
	{
		SET_BIT(UCSRC, UPM0);
    2a1c:	a0 e4       	ldi	r26, 0x40	; 64
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e0 e4       	ldi	r30, 0x40	; 64
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	80 61       	ori	r24, 0x10	; 16
    2a28:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
    2a2a:	a0 e4       	ldi	r26, 0x40	; 64
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e0 e4       	ldi	r30, 0x40	; 64
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	80 62       	ori	r24, 0x20	; 32
    2a36:	8c 93       	st	X, r24
	}


	if(Config_Ptr->stop == TWO_STOP_BIT)
    2a38:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3c:	82 81       	ldd	r24, Z+2	; 0x02
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	39 f4       	brne	.+14     	; 0x2a50 <UART_init+0x82>
	{
		SET_BIT(UCSRC, USBS);
    2a42:	a0 e4       	ldi	r26, 0x40	; 64
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e0 e4       	ldi	r30, 0x40	; 64
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 60       	ori	r24, 0x08	; 8
    2a4e:	8c 93       	st	X, r24
	}


	if (Config_Ptr->bit_data == SIXTH_BITS)
    2a50:	e9 81       	ldd	r30, Y+1	; 0x01
    2a52:	fa 81       	ldd	r31, Y+2	; 0x02
    2a54:	80 81       	ld	r24, Z
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	41 f4       	brne	.+16     	; 0x2a6a <UART_init+0x9c>
	{
		UCSRC |= (1<<UCSZ0);
    2a5a:	a0 e4       	ldi	r26, 0x40	; 64
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e0 e4       	ldi	r30, 0x40	; 64
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	82 60       	ori	r24, 0x02	; 2
    2a66:	8c 93       	st	X, r24
    2a68:	19 c0       	rjmp	.+50     	; 0x2a9c <UART_init+0xce>
	}
	else if(Config_Ptr->bit_data == SEVEN_BITS)
    2a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6e:	80 81       	ld	r24, Z
    2a70:	82 30       	cpi	r24, 0x02	; 2
    2a72:	41 f4       	brne	.+16     	; 0x2a84 <UART_init+0xb6>
	{
		UCSRC |= (1<<UCSZ1);
    2a74:	a0 e4       	ldi	r26, 0x40	; 64
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e0 e4       	ldi	r30, 0x40	; 64
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	84 60       	ori	r24, 0x04	; 4
    2a80:	8c 93       	st	X, r24
    2a82:	0c c0       	rjmp	.+24     	; 0x2a9c <UART_init+0xce>
	}
	else if (Config_Ptr->bit_data == EIGHT_BITS)
    2a84:	e9 81       	ldd	r30, Y+1	; 0x01
    2a86:	fa 81       	ldd	r31, Y+2	; 0x02
    2a88:	80 81       	ld	r24, Z
    2a8a:	83 30       	cpi	r24, 0x03	; 3
    2a8c:	39 f4       	brne	.+14     	; 0x2a9c <UART_init+0xce>
	{
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    2a8e:	a0 e4       	ldi	r26, 0x40	; 64
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	e0 e4       	ldi	r30, 0x40	; 64
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	86 60       	ori	r24, 0x06	; 6
    2a9a:	8c 93       	st	X, r24
	}

	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

	UBRRH = (((F_CPU / (Config_Ptr->baudrate * 8UL))) - 1)>>8;
    2a9c:	00 e4       	ldi	r16, 0x40	; 64
    2a9e:	10 e0       	ldi	r17, 0x00	; 0
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	83 81       	ldd	r24, Z+3	; 0x03
    2aa6:	94 81       	ldd	r25, Z+4	; 0x04
    2aa8:	a5 81       	ldd	r26, Z+5	; 0x05
    2aaa:	b6 81       	ldd	r27, Z+6	; 0x06
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	aa 1f       	adc	r26, r26
    2ab2:	bb 1f       	adc	r27, r27
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	aa 1f       	adc	r26, r26
    2aba:	bb 1f       	adc	r27, r27
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	aa 1f       	adc	r26, r26
    2ac2:	bb 1f       	adc	r27, r27
    2ac4:	9c 01       	movw	r18, r24
    2ac6:	ad 01       	movw	r20, r26
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	92 e1       	ldi	r25, 0x12	; 18
    2acc:	aa e7       	ldi	r26, 0x7A	; 122
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__udivmodsi4>
    2ad8:	da 01       	movw	r26, r20
    2ada:	c9 01       	movw	r24, r18
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	a1 09       	sbc	r26, r1
    2ae0:	b1 09       	sbc	r27, r1
    2ae2:	89 2f       	mov	r24, r25
    2ae4:	9a 2f       	mov	r25, r26
    2ae6:	ab 2f       	mov	r26, r27
    2ae8:	bb 27       	eor	r27, r27
    2aea:	f8 01       	movw	r30, r16
    2aec:	80 83       	st	Z, r24
	UBRRL = (((F_CPU / (Config_Ptr->baudrate * 8UL))) - 1);
    2aee:	09 e2       	ldi	r16, 0x29	; 41
    2af0:	10 e0       	ldi	r17, 0x00	; 0
    2af2:	e9 81       	ldd	r30, Y+1	; 0x01
    2af4:	fa 81       	ldd	r31, Y+2	; 0x02
    2af6:	83 81       	ldd	r24, Z+3	; 0x03
    2af8:	94 81       	ldd	r25, Z+4	; 0x04
    2afa:	a5 81       	ldd	r26, Z+5	; 0x05
    2afc:	b6 81       	ldd	r27, Z+6	; 0x06
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	aa 1f       	adc	r26, r26
    2b04:	bb 1f       	adc	r27, r27
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	aa 1f       	adc	r26, r26
    2b0c:	bb 1f       	adc	r27, r27
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	aa 1f       	adc	r26, r26
    2b14:	bb 1f       	adc	r27, r27
    2b16:	9c 01       	movw	r18, r24
    2b18:	ad 01       	movw	r20, r26
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	92 e1       	ldi	r25, 0x12	; 18
    2b1e:	aa e7       	ldi	r26, 0x7A	; 122
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__udivmodsi4>
    2b2a:	da 01       	movw	r26, r20
    2b2c:	c9 01       	movw	r24, r18
    2b2e:	81 50       	subi	r24, 0x01	; 1
    2b30:	f8 01       	movw	r30, r16
    2b32:	80 83       	st	Z, r24
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	08 95       	ret

00002b42 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	0f 92       	push	r0
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b4e:	eb e2       	ldi	r30, 0x2B	; 43
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	88 2f       	mov	r24, r24
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	80 72       	andi	r24, 0x20	; 32
    2b5a:	90 70       	andi	r25, 0x00	; 0
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	b9 f3       	breq	.-18     	; 0x2b4e <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2b60:	ec e2       	ldi	r30, 0x2C	; 44
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2b68:	0f 90       	pop	r0
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b78:	eb e2       	ldi	r30, 0x2B	; 43
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	88 23       	and	r24, r24
    2b80:	dc f7       	brge	.-10     	; 0x2b78 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    2b82:	ec e2       	ldi	r30, 0x2C	; 44
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
}
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <UART_sendString+0x6>
    2b94:	0f 92       	push	r0
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	9b 83       	std	Y+3, r25	; 0x03
    2b9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b9e:	19 82       	std	Y+1, r1	; 0x01
    2ba0:	0e c0       	rjmp	.+28     	; 0x2bbe <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bac:	fc 01       	movw	r30, r24
    2bae:	e2 0f       	add	r30, r18
    2bb0:	f3 1f       	adc	r31, r19
    2bb2:	80 81       	ld	r24, Z
    2bb4:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <UART_sendByte>
		i++;
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc8:	fc 01       	movw	r30, r24
    2bca:	e2 0f       	add	r30, r18
    2bcc:	f3 1f       	adc	r31, r19
    2bce:	80 81       	ld	r24, Z
    2bd0:	88 23       	and	r24, r24
    2bd2:	39 f7       	brne	.-50     	; 0x2ba2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2be0:	0f 93       	push	r16
    2be2:	1f 93       	push	r17
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <UART_receiveString+0xa>
    2bea:	0f 92       	push	r0
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	9b 83       	std	Y+3, r25	; 0x03
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bf4:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2c00:	8c 01       	movw	r16, r24
    2c02:	02 0f       	add	r16, r18
    2c04:	13 1f       	adc	r17, r19
    2c06:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	80 83       	st	Z, r24
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	8f 5f       	subi	r24, 0xFF	; 255
    2c14:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c20:	8c 01       	movw	r16, r24
    2c22:	02 0f       	add	r16, r18
    2c24:	13 1f       	adc	r17, r19
    2c26:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UART_recieveByte>
    2c2a:	f8 01       	movw	r30, r16
    2c2c:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	9b 81       	ldd	r25, Y+3	; 0x03
    2c38:	fc 01       	movw	r30, r24
    2c3a:	e2 0f       	add	r30, r18
    2c3c:	f3 1f       	adc	r31, r19
    2c3e:	80 81       	ld	r24, Z
    2c40:	83 32       	cpi	r24, 0x23	; 35
    2c42:	31 f7       	brne	.-52     	; 0x2c10 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e2 0f       	add	r30, r18
    2c52:	f3 1f       	adc	r31, r19
    2c54:	10 82       	st	Z, r1
}
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	08 95       	ret

00002c66 <__udivmodsi4>:
    2c66:	a1 e2       	ldi	r26, 0x21	; 33
    2c68:	1a 2e       	mov	r1, r26
    2c6a:	aa 1b       	sub	r26, r26
    2c6c:	bb 1b       	sub	r27, r27
    2c6e:	fd 01       	movw	r30, r26
    2c70:	0d c0       	rjmp	.+26     	; 0x2c8c <__udivmodsi4_ep>

00002c72 <__udivmodsi4_loop>:
    2c72:	aa 1f       	adc	r26, r26
    2c74:	bb 1f       	adc	r27, r27
    2c76:	ee 1f       	adc	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	a2 17       	cp	r26, r18
    2c7c:	b3 07       	cpc	r27, r19
    2c7e:	e4 07       	cpc	r30, r20
    2c80:	f5 07       	cpc	r31, r21
    2c82:	20 f0       	brcs	.+8      	; 0x2c8c <__udivmodsi4_ep>
    2c84:	a2 1b       	sub	r26, r18
    2c86:	b3 0b       	sbc	r27, r19
    2c88:	e4 0b       	sbc	r30, r20
    2c8a:	f5 0b       	sbc	r31, r21

00002c8c <__udivmodsi4_ep>:
    2c8c:	66 1f       	adc	r22, r22
    2c8e:	77 1f       	adc	r23, r23
    2c90:	88 1f       	adc	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	1a 94       	dec	r1
    2c96:	69 f7       	brne	.-38     	; 0x2c72 <__udivmodsi4_loop>
    2c98:	60 95       	com	r22
    2c9a:	70 95       	com	r23
    2c9c:	80 95       	com	r24
    2c9e:	90 95       	com	r25
    2ca0:	9b 01       	movw	r18, r22
    2ca2:	ac 01       	movw	r20, r24
    2ca4:	bd 01       	movw	r22, r26
    2ca6:	cf 01       	movw	r24, r30
    2ca8:	08 95       	ret

00002caa <__prologue_saves__>:
    2caa:	2f 92       	push	r2
    2cac:	3f 92       	push	r3
    2cae:	4f 92       	push	r4
    2cb0:	5f 92       	push	r5
    2cb2:	6f 92       	push	r6
    2cb4:	7f 92       	push	r7
    2cb6:	8f 92       	push	r8
    2cb8:	9f 92       	push	r9
    2cba:	af 92       	push	r10
    2cbc:	bf 92       	push	r11
    2cbe:	cf 92       	push	r12
    2cc0:	df 92       	push	r13
    2cc2:	ef 92       	push	r14
    2cc4:	ff 92       	push	r15
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	ca 1b       	sub	r28, r26
    2cd4:	db 0b       	sbc	r29, r27
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	09 94       	ijmp

00002ce2 <__epilogue_restores__>:
    2ce2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ce4:	39 88       	ldd	r3, Y+17	; 0x11
    2ce6:	48 88       	ldd	r4, Y+16	; 0x10
    2ce8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cea:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cec:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cee:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cf0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cf2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cf4:	b9 84       	ldd	r11, Y+9	; 0x09
    2cf6:	c8 84       	ldd	r12, Y+8	; 0x08
    2cf8:	df 80       	ldd	r13, Y+7	; 0x07
    2cfa:	ee 80       	ldd	r14, Y+6	; 0x06
    2cfc:	fd 80       	ldd	r15, Y+5	; 0x05
    2cfe:	0c 81       	ldd	r16, Y+4	; 0x04
    2d00:	1b 81       	ldd	r17, Y+3	; 0x03
    2d02:	aa 81       	ldd	r26, Y+2	; 0x02
    2d04:	b9 81       	ldd	r27, Y+1	; 0x01
    2d06:	ce 0f       	add	r28, r30
    2d08:	d1 1d       	adc	r29, r1
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	ed 01       	movw	r28, r26
    2d16:	08 95       	ret

00002d18 <itoa>:
    2d18:	fb 01       	movw	r30, r22
    2d1a:	9f 01       	movw	r18, r30
    2d1c:	e8 94       	clt
    2d1e:	42 30       	cpi	r20, 0x02	; 2
    2d20:	c4 f0       	brlt	.+48     	; 0x2d52 <itoa+0x3a>
    2d22:	45 32       	cpi	r20, 0x25	; 37
    2d24:	b4 f4       	brge	.+44     	; 0x2d52 <itoa+0x3a>
    2d26:	4a 30       	cpi	r20, 0x0A	; 10
    2d28:	29 f4       	brne	.+10     	; 0x2d34 <itoa+0x1c>
    2d2a:	97 fb       	bst	r25, 7
    2d2c:	1e f4       	brtc	.+6      	; 0x2d34 <itoa+0x1c>
    2d2e:	90 95       	com	r25
    2d30:	81 95       	neg	r24
    2d32:	9f 4f       	sbci	r25, 0xFF	; 255
    2d34:	64 2f       	mov	r22, r20
    2d36:	77 27       	eor	r23, r23
    2d38:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__udivmodhi4>
    2d3c:	80 5d       	subi	r24, 0xD0	; 208
    2d3e:	8a 33       	cpi	r24, 0x3A	; 58
    2d40:	0c f0       	brlt	.+2      	; 0x2d44 <itoa+0x2c>
    2d42:	89 5d       	subi	r24, 0xD9	; 217
    2d44:	81 93       	st	Z+, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	a1 f7       	brne	.-24     	; 0x2d34 <itoa+0x1c>
    2d4c:	16 f4       	brtc	.+4      	; 0x2d52 <itoa+0x3a>
    2d4e:	5d e2       	ldi	r21, 0x2D	; 45
    2d50:	51 93       	st	Z+, r21
    2d52:	10 82       	st	Z, r1
    2d54:	c9 01       	movw	r24, r18
    2d56:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <strrev>

00002d5a <strrev>:
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	67 2f       	mov	r22, r23
    2d60:	71 91       	ld	r23, Z+
    2d62:	77 23       	and	r23, r23
    2d64:	e1 f7       	brne	.-8      	; 0x2d5e <strrev+0x4>
    2d66:	32 97       	sbiw	r30, 0x02	; 2
    2d68:	04 c0       	rjmp	.+8      	; 0x2d72 <strrev+0x18>
    2d6a:	7c 91       	ld	r23, X
    2d6c:	6d 93       	st	X+, r22
    2d6e:	70 83       	st	Z, r23
    2d70:	62 91       	ld	r22, -Z
    2d72:	ae 17       	cp	r26, r30
    2d74:	bf 07       	cpc	r27, r31
    2d76:	c8 f3       	brcs	.-14     	; 0x2d6a <strrev+0x10>
    2d78:	08 95       	ret

00002d7a <__udivmodhi4>:
    2d7a:	aa 1b       	sub	r26, r26
    2d7c:	bb 1b       	sub	r27, r27
    2d7e:	51 e1       	ldi	r21, 0x11	; 17
    2d80:	07 c0       	rjmp	.+14     	; 0x2d90 <__udivmodhi4_ep>

00002d82 <__udivmodhi4_loop>:
    2d82:	aa 1f       	adc	r26, r26
    2d84:	bb 1f       	adc	r27, r27
    2d86:	a6 17       	cp	r26, r22
    2d88:	b7 07       	cpc	r27, r23
    2d8a:	10 f0       	brcs	.+4      	; 0x2d90 <__udivmodhi4_ep>
    2d8c:	a6 1b       	sub	r26, r22
    2d8e:	b7 0b       	sbc	r27, r23

00002d90 <__udivmodhi4_ep>:
    2d90:	88 1f       	adc	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	5a 95       	dec	r21
    2d96:	a9 f7       	brne	.-22     	; 0x2d82 <__udivmodhi4_loop>
    2d98:	80 95       	com	r24
    2d9a:	90 95       	com	r25
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	cd 01       	movw	r24, r26
    2da0:	08 95       	ret

00002da2 <_exit>:
    2da2:	f8 94       	cli

00002da4 <__stop_program>:
    2da4:	ff cf       	rjmp	.-2      	; 0x2da4 <__stop_program>
