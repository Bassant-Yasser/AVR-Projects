
Control_M2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002ee2  00002f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800070  00800070  00002f86  2**0
                  ALLOC
  3 .stab         00002cb8  00000000  00000000  00002f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ca  00000000  00000000  00005c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000070ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a99c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ad89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__vector_3>
      10:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__vector_6>
      1c:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__vector_7>
      20:	0c 94 97 12 	jmp	0x252e	; 0x252e <__vector_8>
      24:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void door();

uint8 validate_password(const uint8 * password, const uint8 * re_password);

int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c9 57       	subi	r28, 0x79	; 121
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 password[MAX_PASSWORD];
	uint8 re_password[MAX_PASSWORD];
	uint8 old_password[MAX_PASSWORD];
	uint8 match = FALSE;
     b60:	fe 01       	movw	r30, r28
     b62:	e3 59       	subi	r30, 0x93	; 147
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
	uint8 action;

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     b68:	af e5       	ldi	r26, 0x5F	; 95
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	ef e5       	ldi	r30, 0x5F	; 95
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	80 68       	ori	r24, 0x80	; 128
     b74:	8c 93       	st	X, r24

	/* Create configuration structure for UART driver */
	UART_ConfigType uart_config_ptr = {EIGHT_BITS, DISABLED, ONE_STOP_BIT, 9600};
     b76:	ce 01       	movw	r24, r28
     b78:	82 59       	subi	r24, 0x92	; 146
     b7a:	9f 4f       	sbci	r25, 0xFF	; 255
     b7c:	e7 96       	adiw	r28, 0x37	; 55
     b7e:	9f af       	std	Y+63, r25	; 0x3f
     b80:	8e af       	std	Y+62, r24	; 0x3e
     b82:	e7 97       	sbiw	r28, 0x37	; 55
     b84:	88 e6       	ldi	r24, 0x68	; 104
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	e9 96       	adiw	r28, 0x39	; 57
     b8a:	9f af       	std	Y+63, r25	; 0x3f
     b8c:	8e af       	std	Y+62, r24	; 0x3e
     b8e:	e9 97       	sbiw	r28, 0x39	; 57
     b90:	97 e0       	ldi	r25, 0x07	; 7
     b92:	ea 96       	adiw	r28, 0x3a	; 58
     b94:	9f af       	std	Y+63, r25	; 0x3f
     b96:	ea 97       	sbiw	r28, 0x3a	; 58
     b98:	e9 96       	adiw	r28, 0x39	; 57
     b9a:	ee ad       	ldd	r30, Y+62	; 0x3e
     b9c:	ff ad       	ldd	r31, Y+63	; 0x3f
     b9e:	e9 97       	sbiw	r28, 0x39	; 57
     ba0:	00 80       	ld	r0, Z
     ba2:	e9 96       	adiw	r28, 0x39	; 57
     ba4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ba6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ba8:	e9 97       	sbiw	r28, 0x39	; 57
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	e9 96       	adiw	r28, 0x39	; 57
     bae:	9f af       	std	Y+63, r25	; 0x3f
     bb0:	8e af       	std	Y+62, r24	; 0x3e
     bb2:	e9 97       	sbiw	r28, 0x39	; 57
     bb4:	e7 96       	adiw	r28, 0x37	; 55
     bb6:	ee ad       	ldd	r30, Y+62	; 0x3e
     bb8:	ff ad       	ldd	r31, Y+63	; 0x3f
     bba:	e7 97       	sbiw	r28, 0x37	; 55
     bbc:	00 82       	st	Z, r0
     bbe:	e7 96       	adiw	r28, 0x37	; 55
     bc0:	8e ad       	ldd	r24, Y+62	; 0x3e
     bc2:	9f ad       	ldd	r25, Y+63	; 0x3f
     bc4:	e7 97       	sbiw	r28, 0x37	; 55
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	e7 96       	adiw	r28, 0x37	; 55
     bca:	9f af       	std	Y+63, r25	; 0x3f
     bcc:	8e af       	std	Y+62, r24	; 0x3e
     bce:	e7 97       	sbiw	r28, 0x37	; 55
     bd0:	ea 96       	adiw	r28, 0x3a	; 58
     bd2:	9f ad       	ldd	r25, Y+63	; 0x3f
     bd4:	ea 97       	sbiw	r28, 0x3a	; 58
     bd6:	91 50       	subi	r25, 0x01	; 1
     bd8:	ea 96       	adiw	r28, 0x3a	; 58
     bda:	9f af       	std	Y+63, r25	; 0x3f
     bdc:	ea 97       	sbiw	r28, 0x3a	; 58
     bde:	ea 96       	adiw	r28, 0x3a	; 58
     be0:	ef ad       	ldd	r30, Y+63	; 0x3f
     be2:	ea 97       	sbiw	r28, 0x3a	; 58
     be4:	ee 23       	and	r30, r30
     be6:	c1 f6       	brne	.-80     	; 0xb98 <main+0x52>

	/* Initialize both the UART and EEPROM driver */
	UART_init(&uart_config_ptr);
     be8:	ce 01       	movw	r24, r28
     bea:	82 59       	subi	r24, 0x92	; 146
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <UART_init>
	LCD_init();
     bf2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_init>
	EEPROM_init();
     bf6:	0e 94 24 0c 	call	0x1848	; 0x1848 <EEPROM_init>

	/* configure pin PC6 and PC7 (motors pins) as output pins */
	SET_BIT(DDRB, PB6);
     bfa:	a7 e3       	ldi	r26, 0x37	; 55
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e7 e3       	ldi	r30, 0x37	; 55
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	8c 93       	st	X, r24
	SET_BIT(DDRB, PB7);
     c08:	a7 e3       	ldi	r26, 0x37	; 55
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e7 e3       	ldi	r30, 0x37	; 55
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 68       	ori	r24, 0x80	; 128
     c14:	8c 93       	st	X, r24

	/* Motor is stop at the beginning */
	CLEAR_BIT(PORTB, PB6);
     c16:	a8 e3       	ldi	r26, 0x38	; 56
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e8 e3       	ldi	r30, 0x38	; 56
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8f 7b       	andi	r24, 0xBF	; 191
     c22:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, PB7);
     c24:	a5 e3       	ldi	r26, 0x35	; 53
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e5 e3       	ldi	r30, 0x35	; 53
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	8f 77       	andi	r24, 0x7F	; 127
     c30:	8c 93       	st	X, r24

	/* configure pin PD3 (led pin) as output pin */
	SET_BIT(DDRD, PD3);
     c32:	a1 e3       	ldi	r26, 0x31	; 49
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e1 e3       	ldi	r30, 0x31	; 49
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	88 60       	ori	r24, 0x08	; 8
     c3e:	8c 93       	st	X, r24

	/* led is off at the beginning (positive logic) */
	CLEAR_BIT(PORTD, PD3);
     c40:	a2 e3       	ldi	r26, 0x32	; 50
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e2 e3       	ldi	r30, 0x32	; 50
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	87 7f       	andi	r24, 0xF7	; 247
     c4c:	8c 93       	st	X, r24

	EEPROM_readByte(FIRST_OPEN_ADDRESS, &match);
     c4e:	9e 01       	movw	r18, r28
     c50:	23 59       	subi	r18, 0x93	; 147
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	93 e0       	ldi	r25, 0x03	; 3
     c58:	b9 01       	movw	r22, r18
     c5a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <EEPROM_readByte>
	if(match == 0x0A)
     c5e:	fe 01       	movw	r30, r28
     c60:	e3 59       	subi	r30, 0x93	; 147
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	80 81       	ld	r24, Z
     c66:	8a 30       	cpi	r24, 0x0A	; 10
     c68:	41 f4       	brne	.+16     	; 0xc7a <main+0x134>
	{
		/* Wait until microcontroller1 is ready */
		while(UART_recieveByte() != M1_READY);
     c6a:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
     c6e:	80 32       	cpi	r24, 0x20	; 32
     c70:	e1 f7       	brne	.-8      	; 0xc6a <main+0x124>
		UART_sendByte(TRUE);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>
     c78:	50 c1       	rjmp	.+672    	; 0xf1a <main+0x3d4>
	}
	else if(match != 0x0A)
     c7a:	fe 01       	movw	r30, r28
     c7c:	e3 59       	subi	r30, 0x93	; 147
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	80 81       	ld	r24, Z
     c82:	8a 30       	cpi	r24, 0x0A	; 10
     c84:	09 f4       	brne	.+2      	; 0xc88 <main+0x142>
     c86:	49 c1       	rjmp	.+658    	; 0xf1a <main+0x3d4>
	{
		/* Wait until microcontroller1 is ready and then send to it the result of validation */
		while(UART_recieveByte() != M1_READY);
     c88:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
     c8c:	80 32       	cpi	r24, 0x20	; 32
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <main+0x142>
		UART_sendByte(FALSE);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>

		match = FALSE;
     c96:	fe 01       	movw	r30, r28
     c98:	e3 59       	subi	r30, 0x93	; 147
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	10 82       	st	Z, r1
     c9e:	31 c1       	rjmp	.+610    	; 0xf02 <main+0x3bc>
		while(match != TRUE)
		{
			/* UART sends to microcontroller1 that it is ready to receive data from it */
			UART_sendByte(M2_READY);
     ca0:	80 e1       	ldi	r24, 0x10	; 16
     ca2:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>

			/* UART receives action (VALIDATE) to validate the 2 passwords */
			action = UART_recieveByte();
     ca6:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
     caa:	fe 01       	movw	r30, r28
     cac:	e3 5a       	subi	r30, 0xA3	; 163
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	80 83       	st	Z, r24

			/* UART receives password and saves it */
			for (int i = 0; i < MAX_PASSWORD; i++)
     cb2:	fe 01       	movw	r30, r28
     cb4:	e5 5a       	subi	r30, 0xA5	; 165
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	11 82       	std	Z+1, r1	; 0x01
     cba:	10 82       	st	Z, r1
     cbc:	1b c0       	rjmp	.+54     	; 0xcf4 <main+0x1ae>
			{
				password [i] = UART_recieveByte();
     cbe:	fe 01       	movw	r30, r28
     cc0:	e5 5a       	subi	r30, 0xA5	; 165
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	00 81       	ld	r16, Z
     cc6:	11 81       	ldd	r17, Z+1	; 0x01
     cc8:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
     ccc:	28 2f       	mov	r18, r24
     cce:	ce 01       	movw	r24, r28
     cd0:	82 5a       	subi	r24, 0xA2	; 162
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	fc 01       	movw	r30, r24
     cd6:	e0 0f       	add	r30, r16
     cd8:	f1 1f       	adc	r31, r17
     cda:	20 83       	st	Z, r18

			/* UART receives action (VALIDATE) to validate the 2 passwords */
			action = UART_recieveByte();

			/* UART receives password and saves it */
			for (int i = 0; i < MAX_PASSWORD; i++)
     cdc:	de 01       	movw	r26, r28
     cde:	a5 5a       	subi	r26, 0xA5	; 165
     ce0:	bf 4f       	sbci	r27, 0xFF	; 255
     ce2:	fe 01       	movw	r30, r28
     ce4:	e5 5a       	subi	r30, 0xA5	; 165
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	11 96       	adiw	r26, 0x01	; 1
     cf0:	9c 93       	st	X, r25
     cf2:	8e 93       	st	-X, r24
     cf4:	fe 01       	movw	r30, r28
     cf6:	e5 5a       	subi	r30, 0xA5	; 165
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	80 81       	ld	r24, Z
     cfc:	91 81       	ldd	r25, Z+1	; 0x01
     cfe:	85 30       	cpi	r24, 0x05	; 5
     d00:	91 05       	cpc	r25, r1
     d02:	ec f2       	brlt	.-70     	; 0xcbe <main+0x178>
			{
				password [i] = UART_recieveByte();
			}

			/* UART receives repeated password and saves it */
			for (int i = 0; i < MAX_PASSWORD; i++)
     d04:	fe 01       	movw	r30, r28
     d06:	e7 5a       	subi	r30, 0xA7	; 167
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	11 82       	std	Z+1, r1	; 0x01
     d0c:	10 82       	st	Z, r1
     d0e:	1b c0       	rjmp	.+54     	; 0xd46 <main+0x200>
			{
				re_password [i] = UART_recieveByte();
     d10:	fe 01       	movw	r30, r28
     d12:	e7 5a       	subi	r30, 0xA7	; 167
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	00 81       	ld	r16, Z
     d18:	11 81       	ldd	r17, Z+1	; 0x01
     d1a:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
     d1e:	28 2f       	mov	r18, r24
     d20:	ce 01       	movw	r24, r28
     d22:	8d 59       	subi	r24, 0x9D	; 157
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	fc 01       	movw	r30, r24
     d28:	e0 0f       	add	r30, r16
     d2a:	f1 1f       	adc	r31, r17
     d2c:	20 83       	st	Z, r18
			{
				password [i] = UART_recieveByte();
			}

			/* UART receives repeated password and saves it */
			for (int i = 0; i < MAX_PASSWORD; i++)
     d2e:	de 01       	movw	r26, r28
     d30:	a7 5a       	subi	r26, 0xA7	; 167
     d32:	bf 4f       	sbci	r27, 0xFF	; 255
     d34:	fe 01       	movw	r30, r28
     d36:	e7 5a       	subi	r30, 0xA7	; 167
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	11 96       	adiw	r26, 0x01	; 1
     d42:	9c 93       	st	X, r25
     d44:	8e 93       	st	-X, r24
     d46:	fe 01       	movw	r30, r28
     d48:	e7 5a       	subi	r30, 0xA7	; 167
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	85 30       	cpi	r24, 0x05	; 5
     d52:	91 05       	cpc	r25, r1
     d54:	ec f2       	brlt	.-70     	; 0xd10 <main+0x1ca>
			{
				re_password [i] = UART_recieveByte();
			}

			/* Checks if 2 passwords are matched and return the result if matched or not */
			match = validate_password(password, re_password);
     d56:	ce 01       	movw	r24, r28
     d58:	82 5a       	subi	r24, 0xA2	; 162
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	9e 01       	movw	r18, r28
     d5e:	2d 59       	subi	r18, 0x9D	; 157
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	b9 01       	movw	r22, r18
     d64:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <validate_password>
     d68:	fe 01       	movw	r30, r28
     d6a:	e3 59       	subi	r30, 0x93	; 147
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	80 83       	st	Z, r24

			/* If passwords are matched then will saves password in EE2PROM */
			if(match == TRUE)
     d70:	fe 01       	movw	r30, r28
     d72:	e3 59       	subi	r30, 0x93	; 147
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	80 81       	ld	r24, Z
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	09 f0       	breq	.+2      	; 0xd7e <main+0x238>
     d7c:	b8 c0       	rjmp	.+368    	; 0xeee <main+0x3a8>
			{
				for(int i = 0; i < MAX_PASSWORD; i++)
     d7e:	fe 01       	movw	r30, r28
     d80:	e9 5a       	subi	r30, 0xA9	; 169
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	11 82       	std	Z+1, r1	; 0x01
     d86:	10 82       	st	Z, r1
     d88:	a9 c0       	rjmp	.+338    	; 0xedc <main+0x396>
				{
					EEPROM_writeByte(START_ADDRESS + i, password[i]);
     d8a:	fe 01       	movw	r30, r28
     d8c:	e9 5a       	subi	r30, 0xA9	; 169
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	8f 5e       	subi	r24, 0xEF	; 239
     d96:	9c 4f       	sbci	r25, 0xFC	; 252
     d98:	ac 01       	movw	r20, r24
     d9a:	fe 01       	movw	r30, r28
     d9c:	e9 5a       	subi	r30, 0xA9	; 169
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	20 81       	ld	r18, Z
     da2:	31 81       	ldd	r19, Z+1	; 0x01
     da4:	ce 01       	movw	r24, r28
     da6:	82 5a       	subi	r24, 0xA2	; 162
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	fc 01       	movw	r30, r24
     dac:	e2 0f       	add	r30, r18
     dae:	f3 1f       	adc	r31, r19
     db0:	20 81       	ld	r18, Z
     db2:	ca 01       	movw	r24, r20
     db4:	62 2f       	mov	r22, r18
     db6:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_writeByte>
     dba:	fe 01       	movw	r30, r28
     dbc:	ed 5b       	subi	r30, 0xBD	; 189
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a0 e2       	ldi	r26, 0x20	; 32
     dc6:	b1 e4       	ldi	r27, 0x41	; 65
     dc8:	80 83       	st	Z, r24
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	a2 83       	std	Z+2, r26	; 0x02
     dce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd0:	8e 01       	movw	r16, r28
     dd2:	01 5c       	subi	r16, 0xC1	; 193
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	fe 01       	movw	r30, r28
     dd8:	ed 5b       	subi	r30, 0xBD	; 189
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4a ef       	ldi	r20, 0xFA	; 250
     dea:	54 e4       	ldi	r21, 0x44	; 68
     dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	f8 01       	movw	r30, r16
     df6:	80 83       	st	Z, r24
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	a2 83       	std	Z+2, r26	; 0x02
     dfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dfe:	fe 01       	movw	r30, r28
     e00:	ff 96       	adiw	r30, 0x3f	; 63
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <main+0x2de>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e af       	std	Y+62, r25	; 0x3e
     e20:	8d af       	std	Y+61, r24	; 0x3d
     e22:	46 c0       	rjmp	.+140    	; 0xeb0 <main+0x36a>
	else if (__tmp > 65535)
     e24:	fe 01       	movw	r30, r28
     e26:	ff 96       	adiw	r30, 0x3f	; 63
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	3f ef       	ldi	r19, 0xFF	; 255
     e34:	4f e7       	ldi	r20, 0x7F	; 127
     e36:	57 e4       	ldi	r21, 0x47	; 71
     e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e3c:	18 16       	cp	r1, r24
     e3e:	64 f5       	brge	.+88     	; 0xe98 <main+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e40:	fe 01       	movw	r30, r28
     e42:	ed 5b       	subi	r30, 0xBD	; 189
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e2       	ldi	r20, 0x20	; 32
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	9e af       	std	Y+62, r25	; 0x3e
     e6c:	8d af       	std	Y+61, r24	; 0x3d
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <main+0x348>
     e70:	88 ec       	ldi	r24, 0xC8	; 200
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9c af       	std	Y+60, r25	; 0x3c
     e76:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e78:	8b ad       	ldd	r24, Y+59	; 0x3b
     e7a:	9c ad       	ldd	r25, Y+60	; 0x3c
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <main+0x336>
     e80:	9c af       	std	Y+60, r25	; 0x3c
     e82:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e84:	8d ad       	ldd	r24, Y+61	; 0x3d
     e86:	9e ad       	ldd	r25, Y+62	; 0x3e
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	9e af       	std	Y+62, r25	; 0x3e
     e8c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8e:	8d ad       	ldd	r24, Y+61	; 0x3d
     e90:	9e ad       	ldd	r25, Y+62	; 0x3e
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	69 f7       	brne	.-38     	; 0xe70 <main+0x32a>
     e96:	16 c0       	rjmp	.+44     	; 0xec4 <main+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e98:	fe 01       	movw	r30, r28
     e9a:	ff 96       	adiw	r30, 0x3f	; 63
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	9e af       	std	Y+62, r25	; 0x3e
     eae:	8d af       	std	Y+61, r24	; 0x3d
     eb0:	8d ad       	ldd	r24, Y+61	; 0x3d
     eb2:	9e ad       	ldd	r25, Y+62	; 0x3e
     eb4:	9a af       	std	Y+58, r25	; 0x3a
     eb6:	89 af       	std	Y+57, r24	; 0x39
     eb8:	89 ad       	ldd	r24, Y+57	; 0x39
     eba:	9a ad       	ldd	r25, Y+58	; 0x3a
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <main+0x376>
     ec0:	9a af       	std	Y+58, r25	; 0x3a
     ec2:	89 af       	std	Y+57, r24	; 0x39
			match = validate_password(password, re_password);

			/* If passwords are matched then will saves password in EE2PROM */
			if(match == TRUE)
			{
				for(int i = 0; i < MAX_PASSWORD; i++)
     ec4:	de 01       	movw	r26, r28
     ec6:	a9 5a       	subi	r26, 0xA9	; 169
     ec8:	bf 4f       	sbci	r27, 0xFF	; 255
     eca:	fe 01       	movw	r30, r28
     ecc:	e9 5a       	subi	r30, 0xA9	; 169
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	9c 93       	st	X, r25
     eda:	8e 93       	st	-X, r24
     edc:	fe 01       	movw	r30, r28
     ede:	e9 5a       	subi	r30, 0xA9	; 169
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	85 30       	cpi	r24, 0x05	; 5
     ee8:	91 05       	cpc	r25, r1
     eea:	0c f4       	brge	.+2      	; 0xeee <main+0x3a8>
     eec:	4e cf       	rjmp	.-356    	; 0xd8a <main+0x244>
					_delay_ms(10);
				}
			}

			/* Wait until microcontroller1 is ready and then send to it the result of validation */
			while(UART_recieveByte() != M1_READY);
     eee:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
     ef2:	80 32       	cpi	r24, 0x20	; 32
     ef4:	e1 f7       	brne	.-8      	; 0xeee <main+0x3a8>
			UART_sendByte(match);
     ef6:	fe 01       	movw	r30, r28
     ef8:	e3 59       	subi	r30, 0x93	; 147
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	80 81       	ld	r24, Z
     efe:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>
		/* Wait until microcontroller1 is ready and then send to it the result of validation */
		while(UART_recieveByte() != M1_READY);
		UART_sendByte(FALSE);

		match = FALSE;
		while(match != TRUE)
     f02:	fe 01       	movw	r30, r28
     f04:	e3 59       	subi	r30, 0x93	; 147
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	80 81       	ld	r24, Z
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <main+0x3ca>
     f0e:	c8 ce       	rjmp	.-624    	; 0xca0 <main+0x15a>
			/* Wait until microcontroller1 is ready and then send to it the result of validation */
			while(UART_recieveByte() != M1_READY);
			UART_sendByte(match);
		}

		EEPROM_writeByte(FIRST_OPEN_ADDRESS,0x0A);
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	6a e0       	ldi	r22, 0x0A	; 10
     f16:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_writeByte>


    while(1)
    {
    	/* UART sends to microcontroller1 that it is ready to receive data from it */
    	UART_sendByte(M2_READY);
     f1a:	80 e1       	ldi	r24, 0x10	; 16
     f1c:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>

    	/* UART receives action*/
    	action = UART_recieveByte();
     f20:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
     f24:	fe 01       	movw	r30, r28
     f26:	e3 5a       	subi	r30, 0xA3	; 163
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	80 83       	st	Z, r24

    	/* If action is to validate then will receive password and compare t with saved password in EE2PROM */
    	if(action == VALIDATE)
     f2c:	fe 01       	movw	r30, r28
     f2e:	e3 5a       	subi	r30, 0xA3	; 163
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	80 81       	ld	r24, Z
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	09 f0       	breq	.+2      	; 0xf3a <main+0x3f4>
     f38:	e4 c0       	rjmp	.+456    	; 0x1102 <main+0x5bc>
    	{
    		/* UART receives the password from mictocontroller1 to check it */
    		for (int i = 0; i < MAX_PASSWORD; i++)
     f3a:	fe 01       	movw	r30, r28
     f3c:	eb 5a       	subi	r30, 0xAB	; 171
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	11 82       	std	Z+1, r1	; 0x01
     f42:	10 82       	st	Z, r1
     f44:	1b c0       	rjmp	.+54     	; 0xf7c <main+0x436>
    		{
    			password [i] = UART_recieveByte();
     f46:	fe 01       	movw	r30, r28
     f48:	eb 5a       	subi	r30, 0xAB	; 171
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	00 81       	ld	r16, Z
     f4e:	11 81       	ldd	r17, Z+1	; 0x01
     f50:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
     f54:	28 2f       	mov	r18, r24
     f56:	ce 01       	movw	r24, r28
     f58:	82 5a       	subi	r24, 0xA2	; 162
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	fc 01       	movw	r30, r24
     f5e:	e0 0f       	add	r30, r16
     f60:	f1 1f       	adc	r31, r17
     f62:	20 83       	st	Z, r18

    	/* If action is to validate then will receive password and compare t with saved password in EE2PROM */
    	if(action == VALIDATE)
    	{
    		/* UART receives the password from mictocontroller1 to check it */
    		for (int i = 0; i < MAX_PASSWORD; i++)
     f64:	de 01       	movw	r26, r28
     f66:	ab 5a       	subi	r26, 0xAB	; 171
     f68:	bf 4f       	sbci	r27, 0xFF	; 255
     f6a:	fe 01       	movw	r30, r28
     f6c:	eb 5a       	subi	r30, 0xAB	; 171
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	11 96       	adiw	r26, 0x01	; 1
     f78:	9c 93       	st	X, r25
     f7a:	8e 93       	st	-X, r24
     f7c:	fe 01       	movw	r30, r28
     f7e:	eb 5a       	subi	r30, 0xAB	; 171
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	85 30       	cpi	r24, 0x05	; 5
     f88:	91 05       	cpc	r25, r1
     f8a:	ec f2       	brlt	.-70     	; 0xf46 <main+0x400>
    		{
    			password [i] = UART_recieveByte();
    		}

    		/* Read the saved password from EE2PROM to compare it with received password */
    		for(int i = 0; i < MAX_PASSWORD; i++)
     f8c:	fe 01       	movw	r30, r28
     f8e:	ed 5a       	subi	r30, 0xAD	; 173
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	11 82       	std	Z+1, r1	; 0x01
     f94:	10 82       	st	Z, r1
     f96:	94 c0       	rjmp	.+296    	; 0x10c0 <main+0x57a>
    		{
    			EEPROM_readByte(START_ADDRESS + i, &old_password[i]);
     f98:	fe 01       	movw	r30, r28
     f9a:	ed 5a       	subi	r30, 0xAD	; 173
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	8f 5e       	subi	r24, 0xEF	; 239
     fa4:	9c 4f       	sbci	r25, 0xFC	; 252
     fa6:	ac 01       	movw	r20, r24
     fa8:	fe 01       	movw	r30, r28
     faa:	ed 5a       	subi	r30, 0xAD	; 173
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	9e 01       	movw	r18, r28
     fb4:	28 59       	subi	r18, 0x98	; 152
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	28 0f       	add	r18, r24
     fba:	39 1f       	adc	r19, r25
     fbc:	ca 01       	movw	r24, r20
     fbe:	b9 01       	movw	r22, r18
     fc0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <EEPROM_readByte>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a0 e2       	ldi	r26, 0x20	; 32
     fca:	b1 e4       	ldi	r27, 0x41	; 65
     fcc:	8d ab       	std	Y+53, r24	; 0x35
     fce:	9e ab       	std	Y+54, r25	; 0x36
     fd0:	af ab       	std	Y+55, r26	; 0x37
     fd2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	6d a9       	ldd	r22, Y+53	; 0x35
     fd6:	7e a9       	ldd	r23, Y+54	; 0x36
     fd8:	8f a9       	ldd	r24, Y+55	; 0x37
     fda:	98 ad       	ldd	r25, Y+56	; 0x38
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a ef       	ldi	r20, 0xFA	; 250
     fe2:	54 e4       	ldi	r21, 0x44	; 68
     fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	89 ab       	std	Y+49, r24	; 0x31
     fee:	9a ab       	std	Y+50, r25	; 0x32
     ff0:	ab ab       	std	Y+51, r26	; 0x33
     ff2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ff4:	69 a9       	ldd	r22, Y+49	; 0x31
     ff6:	7a a9       	ldd	r23, Y+50	; 0x32
     ff8:	8b a9       	ldd	r24, Y+51	; 0x33
     ffa:	9c a9       	ldd	r25, Y+52	; 0x34
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e8       	ldi	r20, 0x80	; 128
    1002:	5f e3       	ldi	r21, 0x3F	; 63
    1004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1008:	88 23       	and	r24, r24
    100a:	2c f4       	brge	.+10     	; 0x1016 <main+0x4d0>
		__ticks = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	98 ab       	std	Y+48, r25	; 0x30
    1012:	8f a7       	std	Y+47, r24	; 0x2f
    1014:	3f c0       	rjmp	.+126    	; 0x1094 <main+0x54e>
	else if (__tmp > 65535)
    1016:	69 a9       	ldd	r22, Y+49	; 0x31
    1018:	7a a9       	ldd	r23, Y+50	; 0x32
    101a:	8b a9       	ldd	r24, Y+51	; 0x33
    101c:	9c a9       	ldd	r25, Y+52	; 0x34
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	3f ef       	ldi	r19, 0xFF	; 255
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	57 e4       	ldi	r21, 0x47	; 71
    1026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102a:	18 16       	cp	r1, r24
    102c:	4c f5       	brge	.+82     	; 0x1080 <main+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102e:	6d a9       	ldd	r22, Y+53	; 0x35
    1030:	7e a9       	ldd	r23, Y+54	; 0x36
    1032:	8f a9       	ldd	r24, Y+55	; 0x37
    1034:	98 ad       	ldd	r25, Y+56	; 0x38
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e2       	ldi	r20, 0x20	; 32
    103c:	51 e4       	ldi	r21, 0x41	; 65
    103e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	98 ab       	std	Y+48, r25	; 0x30
    1054:	8f a7       	std	Y+47, r24	; 0x2f
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <main+0x530>
    1058:	88 ec       	ldi	r24, 0xC8	; 200
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9e a7       	std	Y+46, r25	; 0x2e
    105e:	8d a7       	std	Y+45, r24	; 0x2d
    1060:	8d a5       	ldd	r24, Y+45	; 0x2d
    1062:	9e a5       	ldd	r25, Y+46	; 0x2e
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <main+0x51e>
    1068:	9e a7       	std	Y+46, r25	; 0x2e
    106a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106c:	8f a5       	ldd	r24, Y+47	; 0x2f
    106e:	98 a9       	ldd	r25, Y+48	; 0x30
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	98 ab       	std	Y+48, r25	; 0x30
    1074:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1076:	8f a5       	ldd	r24, Y+47	; 0x2f
    1078:	98 a9       	ldd	r25, Y+48	; 0x30
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	69 f7       	brne	.-38     	; 0x1058 <main+0x512>
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <main+0x562>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1080:	69 a9       	ldd	r22, Y+49	; 0x31
    1082:	7a a9       	ldd	r23, Y+50	; 0x32
    1084:	8b a9       	ldd	r24, Y+51	; 0x33
    1086:	9c a9       	ldd	r25, Y+52	; 0x34
    1088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	98 ab       	std	Y+48, r25	; 0x30
    1092:	8f a7       	std	Y+47, r24	; 0x2f
    1094:	8f a5       	ldd	r24, Y+47	; 0x2f
    1096:	98 a9       	ldd	r25, Y+48	; 0x30
    1098:	9c a7       	std	Y+44, r25	; 0x2c
    109a:	8b a7       	std	Y+43, r24	; 0x2b
    109c:	8b a5       	ldd	r24, Y+43	; 0x2b
    109e:	9c a5       	ldd	r25, Y+44	; 0x2c
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <main+0x55a>
    10a4:	9c a7       	std	Y+44, r25	; 0x2c
    10a6:	8b a7       	std	Y+43, r24	; 0x2b
    		{
    			password [i] = UART_recieveByte();
    		}

    		/* Read the saved password from EE2PROM to compare it with received password */
    		for(int i = 0; i < MAX_PASSWORD; i++)
    10a8:	de 01       	movw	r26, r28
    10aa:	ad 5a       	subi	r26, 0xAD	; 173
    10ac:	bf 4f       	sbci	r27, 0xFF	; 255
    10ae:	fe 01       	movw	r30, r28
    10b0:	ed 5a       	subi	r30, 0xAD	; 173
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	11 96       	adiw	r26, 0x01	; 1
    10bc:	9c 93       	st	X, r25
    10be:	8e 93       	st	-X, r24
    10c0:	fe 01       	movw	r30, r28
    10c2:	ed 5a       	subi	r30, 0xAD	; 173
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	85 30       	cpi	r24, 0x05	; 5
    10cc:	91 05       	cpc	r25, r1
    10ce:	0c f4       	brge	.+2      	; 0x10d2 <main+0x58c>
    10d0:	63 cf       	rjmp	.-314    	; 0xf98 <main+0x452>
    			EEPROM_readByte(START_ADDRESS + i, &old_password[i]);
    			_delay_ms(10);
    		}

    		/* Checks if 2 passwords are matched and return the result if matched or not */
    		match = validate_password(password, old_password);
    10d2:	ce 01       	movw	r24, r28
    10d4:	82 5a       	subi	r24, 0xA2	; 162
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	9e 01       	movw	r18, r28
    10da:	28 59       	subi	r18, 0x98	; 152
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	b9 01       	movw	r22, r18
    10e0:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <validate_password>
    10e4:	fe 01       	movw	r30, r28
    10e6:	e3 59       	subi	r30, 0x93	; 147
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	80 83       	st	Z, r24

    		/* Wait until microcontroller1 is ready and then send to it the result of validation */
    		while(UART_recieveByte() != M1_READY);
    10ec:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
    10f0:	80 32       	cpi	r24, 0x20	; 32
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <main+0x5a6>
    		UART_sendByte(match);
    10f4:	fe 01       	movw	r30, r28
    10f6:	e3 59       	subi	r30, 0x93	; 147
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	80 81       	ld	r24, Z
    10fc:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>
    1100:	0c cf       	rjmp	.-488    	; 0xf1a <main+0x3d4>
    	}
    	/* If the action is to change password then it will receives 2 passwords and validates them if they
    	 * are matched then will save the new password in EE2PROM */
    	else if(action == CHANGE_PASS)  // change password
    1102:	fe 01       	movw	r30, r28
    1104:	e3 5a       	subi	r30, 0xA3	; 163
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 81       	ld	r24, Z
    110a:	88 23       	and	r24, r24
    110c:	09 f0       	breq	.+2      	; 0x1110 <main+0x5ca>
    110e:	16 c1       	rjmp	.+556    	; 0x133c <main+0x7f6>
		{
    		/* UART receives password and saves it */
    		for (int i = 0; i < MAX_PASSWORD; i++)
    1110:	fe 01       	movw	r30, r28
    1112:	ef 5a       	subi	r30, 0xAF	; 175
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	11 82       	std	Z+1, r1	; 0x01
    1118:	10 82       	st	Z, r1
    111a:	1b c0       	rjmp	.+54     	; 0x1152 <main+0x60c>
			{
				password [i] = UART_recieveByte();
    111c:	fe 01       	movw	r30, r28
    111e:	ef 5a       	subi	r30, 0xAF	; 175
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	00 81       	ld	r16, Z
    1124:	11 81       	ldd	r17, Z+1	; 0x01
    1126:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
    112a:	28 2f       	mov	r18, r24
    112c:	ce 01       	movw	r24, r28
    112e:	82 5a       	subi	r24, 0xA2	; 162
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	fc 01       	movw	r30, r24
    1134:	e0 0f       	add	r30, r16
    1136:	f1 1f       	adc	r31, r17
    1138:	20 83       	st	Z, r18
    	/* If the action is to change password then it will receives 2 passwords and validates them if they
    	 * are matched then will save the new password in EE2PROM */
    	else if(action == CHANGE_PASS)  // change password
		{
    		/* UART receives password and saves it */
    		for (int i = 0; i < MAX_PASSWORD; i++)
    113a:	de 01       	movw	r26, r28
    113c:	af 5a       	subi	r26, 0xAF	; 175
    113e:	bf 4f       	sbci	r27, 0xFF	; 255
    1140:	fe 01       	movw	r30, r28
    1142:	ef 5a       	subi	r30, 0xAF	; 175
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	9c 93       	st	X, r25
    1150:	8e 93       	st	-X, r24
    1152:	fe 01       	movw	r30, r28
    1154:	ef 5a       	subi	r30, 0xAF	; 175
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	80 81       	ld	r24, Z
    115a:	91 81       	ldd	r25, Z+1	; 0x01
    115c:	85 30       	cpi	r24, 0x05	; 5
    115e:	91 05       	cpc	r25, r1
    1160:	ec f2       	brlt	.-70     	; 0x111c <main+0x5d6>
				password [i] = UART_recieveByte();
//				LCD_intgerToString(password[i]);
			}

    		/* UART receive repeated password and saves it */
    		for (int i = 0; i < MAX_PASSWORD; i++)
    1162:	fe 01       	movw	r30, r28
    1164:	e1 5b       	subi	r30, 0xB1	; 177
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	11 82       	std	Z+1, r1	; 0x01
    116a:	10 82       	st	Z, r1
    116c:	1b c0       	rjmp	.+54     	; 0x11a4 <main+0x65e>
			{
				re_password [i] = UART_recieveByte();
    116e:	fe 01       	movw	r30, r28
    1170:	e1 5b       	subi	r30, 0xB1	; 177
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	00 81       	ld	r16, Z
    1176:	11 81       	ldd	r17, Z+1	; 0x01
    1178:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
    117c:	28 2f       	mov	r18, r24
    117e:	ce 01       	movw	r24, r28
    1180:	8d 59       	subi	r24, 0x9D	; 157
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	fc 01       	movw	r30, r24
    1186:	e0 0f       	add	r30, r16
    1188:	f1 1f       	adc	r31, r17
    118a:	20 83       	st	Z, r18
				password [i] = UART_recieveByte();
//				LCD_intgerToString(password[i]);
			}

    		/* UART receive repeated password and saves it */
    		for (int i = 0; i < MAX_PASSWORD; i++)
    118c:	de 01       	movw	r26, r28
    118e:	a1 5b       	subi	r26, 0xB1	; 177
    1190:	bf 4f       	sbci	r27, 0xFF	; 255
    1192:	fe 01       	movw	r30, r28
    1194:	e1 5b       	subi	r30, 0xB1	; 177
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	11 96       	adiw	r26, 0x01	; 1
    11a0:	9c 93       	st	X, r25
    11a2:	8e 93       	st	-X, r24
    11a4:	fe 01       	movw	r30, r28
    11a6:	e1 5b       	subi	r30, 0xB1	; 177
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	85 30       	cpi	r24, 0x05	; 5
    11b0:	91 05       	cpc	r25, r1
    11b2:	ec f2       	brlt	.-70     	; 0x116e <main+0x628>
				re_password [i] = UART_recieveByte();
//				LCD_intgerToString(re_password[i]);
			}

    		/* Checks if 2 passwords are matched and return the result if matched or not */
    		match = validate_password(password, re_password);
    11b4:	ce 01       	movw	r24, r28
    11b6:	82 5a       	subi	r24, 0xA2	; 162
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ba:	9e 01       	movw	r18, r28
    11bc:	2d 59       	subi	r18, 0x9D	; 157
    11be:	3f 4f       	sbci	r19, 0xFF	; 255
    11c0:	b9 01       	movw	r22, r18
    11c2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <validate_password>
    11c6:	fe 01       	movw	r30, r28
    11c8:	e3 59       	subi	r30, 0x93	; 147
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 83       	st	Z, r24

    		/* If passwords are matched then will saves password in EE2PROM */
    		if(match == TRUE)
    11ce:	fe 01       	movw	r30, r28
    11d0:	e3 59       	subi	r30, 0x93	; 147
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	80 81       	ld	r24, Z
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	09 f0       	breq	.+2      	; 0x11dc <main+0x696>
    11da:	a5 c0       	rjmp	.+330    	; 0x1326 <main+0x7e0>
    		{
    			for(int i = 0; i < MAX_PASSWORD; i++)
    11dc:	fe 01       	movw	r30, r28
    11de:	e3 5b       	subi	r30, 0xB3	; 179
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	11 82       	std	Z+1, r1	; 0x01
    11e4:	10 82       	st	Z, r1
    11e6:	96 c0       	rjmp	.+300    	; 0x1314 <main+0x7ce>
    			{
    				EEPROM_writeByte(START_ADDRESS + i, password[i]);
    11e8:	fe 01       	movw	r30, r28
    11ea:	e3 5b       	subi	r30, 0xB3	; 179
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	8f 5e       	subi	r24, 0xEF	; 239
    11f4:	9c 4f       	sbci	r25, 0xFC	; 252
    11f6:	ac 01       	movw	r20, r24
    11f8:	fe 01       	movw	r30, r28
    11fa:	e3 5b       	subi	r30, 0xB3	; 179
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	20 81       	ld	r18, Z
    1200:	31 81       	ldd	r19, Z+1	; 0x01
    1202:	ce 01       	movw	r24, r28
    1204:	82 5a       	subi	r24, 0xA2	; 162
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	fc 01       	movw	r30, r24
    120a:	e2 0f       	add	r30, r18
    120c:	f3 1f       	adc	r31, r19
    120e:	20 81       	ld	r18, Z
    1210:	ca 01       	movw	r24, r20
    1212:	62 2f       	mov	r22, r18
    1214:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_writeByte>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a0 e2       	ldi	r26, 0x20	; 32
    121e:	b1 e4       	ldi	r27, 0x41	; 65
    1220:	8f a3       	std	Y+39, r24	; 0x27
    1222:	98 a7       	std	Y+40, r25	; 0x28
    1224:	a9 a7       	std	Y+41, r26	; 0x29
    1226:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1228:	6f a1       	ldd	r22, Y+39	; 0x27
    122a:	78 a5       	ldd	r23, Y+40	; 0x28
    122c:	89 a5       	ldd	r24, Y+41	; 0x29
    122e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	4a ef       	ldi	r20, 0xFA	; 250
    1236:	54 e4       	ldi	r21, 0x44	; 68
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8b a3       	std	Y+35, r24	; 0x23
    1242:	9c a3       	std	Y+36, r25	; 0x24
    1244:	ad a3       	std	Y+37, r26	; 0x25
    1246:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1248:	6b a1       	ldd	r22, Y+35	; 0x23
    124a:	7c a1       	ldd	r23, Y+36	; 0x24
    124c:	8d a1       	ldd	r24, Y+37	; 0x25
    124e:	9e a1       	ldd	r25, Y+38	; 0x26
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e8       	ldi	r20, 0x80	; 128
    1256:	5f e3       	ldi	r21, 0x3F	; 63
    1258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125c:	88 23       	and	r24, r24
    125e:	2c f4       	brge	.+10     	; 0x126a <main+0x724>
		__ticks = 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	9a a3       	std	Y+34, r25	; 0x22
    1266:	89 a3       	std	Y+33, r24	; 0x21
    1268:	3f c0       	rjmp	.+126    	; 0x12e8 <main+0x7a2>
	else if (__tmp > 65535)
    126a:	6b a1       	ldd	r22, Y+35	; 0x23
    126c:	7c a1       	ldd	r23, Y+36	; 0x24
    126e:	8d a1       	ldd	r24, Y+37	; 0x25
    1270:	9e a1       	ldd	r25, Y+38	; 0x26
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	3f ef       	ldi	r19, 0xFF	; 255
    1276:	4f e7       	ldi	r20, 0x7F	; 127
    1278:	57 e4       	ldi	r21, 0x47	; 71
    127a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    127e:	18 16       	cp	r1, r24
    1280:	4c f5       	brge	.+82     	; 0x12d4 <main+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1282:	6f a1       	ldd	r22, Y+39	; 0x27
    1284:	78 a5       	ldd	r23, Y+40	; 0x28
    1286:	89 a5       	ldd	r24, Y+41	; 0x29
    1288:	9a a5       	ldd	r25, Y+42	; 0x2a
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	51 e4       	ldi	r21, 0x41	; 65
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9a a3       	std	Y+34, r25	; 0x22
    12a8:	89 a3       	std	Y+33, r24	; 0x21
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <main+0x784>
    12ac:	88 ec       	ldi	r24, 0xC8	; 200
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	98 a3       	std	Y+32, r25	; 0x20
    12b2:	8f 8f       	std	Y+31, r24	; 0x1f
    12b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12b6:	98 a1       	ldd	r25, Y+32	; 0x20
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <main+0x772>
    12bc:	98 a3       	std	Y+32, r25	; 0x20
    12be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c0:	89 a1       	ldd	r24, Y+33	; 0x21
    12c2:	9a a1       	ldd	r25, Y+34	; 0x22
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	9a a3       	std	Y+34, r25	; 0x22
    12c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ca:	89 a1       	ldd	r24, Y+33	; 0x21
    12cc:	9a a1       	ldd	r25, Y+34	; 0x22
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f7       	brne	.-38     	; 0x12ac <main+0x766>
    12d2:	14 c0       	rjmp	.+40     	; 0x12fc <main+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d4:	6b a1       	ldd	r22, Y+35	; 0x23
    12d6:	7c a1       	ldd	r23, Y+36	; 0x24
    12d8:	8d a1       	ldd	r24, Y+37	; 0x25
    12da:	9e a1       	ldd	r25, Y+38	; 0x26
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9a a3       	std	Y+34, r25	; 0x22
    12e6:	89 a3       	std	Y+33, r24	; 0x21
    12e8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ea:	9a a1       	ldd	r25, Y+34	; 0x22
    12ec:	9e 8f       	std	Y+30, r25	; 0x1e
    12ee:	8d 8f       	std	Y+29, r24	; 0x1d
    12f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <main+0x7ae>
    12f8:	9e 8f       	std	Y+30, r25	; 0x1e
    12fa:	8d 8f       	std	Y+29, r24	; 0x1d
    		match = validate_password(password, re_password);

    		/* If passwords are matched then will saves password in EE2PROM */
    		if(match == TRUE)
    		{
    			for(int i = 0; i < MAX_PASSWORD; i++)
    12fc:	de 01       	movw	r26, r28
    12fe:	a3 5b       	subi	r26, 0xB3	; 179
    1300:	bf 4f       	sbci	r27, 0xFF	; 255
    1302:	fe 01       	movw	r30, r28
    1304:	e3 5b       	subi	r30, 0xB3	; 179
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	11 96       	adiw	r26, 0x01	; 1
    1310:	9c 93       	st	X, r25
    1312:	8e 93       	st	-X, r24
    1314:	fe 01       	movw	r30, r28
    1316:	e3 5b       	subi	r30, 0xB3	; 179
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	85 30       	cpi	r24, 0x05	; 5
    1320:	91 05       	cpc	r25, r1
    1322:	0c f4       	brge	.+2      	; 0x1326 <main+0x7e0>
    1324:	61 cf       	rjmp	.-318    	; 0x11e8 <main+0x6a2>
    				_delay_ms(10);
    			}
    		}

    		/* Wait until microcontroller1 is ready and then send to it the result of validation */
    		while(UART_recieveByte() != M1_READY);
    1326:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
    132a:	80 32       	cpi	r24, 0x20	; 32
    132c:	e1 f7       	brne	.-8      	; 0x1326 <main+0x7e0>
    		UART_sendByte(match);
    132e:	fe 01       	movw	r30, r28
    1330:	e3 59       	subi	r30, 0x93	; 147
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	80 81       	ld	r24, Z
    1336:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>
    133a:	ef cd       	rjmp	.-1058   	; 0xf1a <main+0x3d4>
		}
    	/* If action is to open door then microcontroller2 will receives the current password from
    	 * microcontroller1 and compare it with saved password n EE2PROM if matched will open door */
    	else if(action == OPEN_DOOR)
    133c:	fe 01       	movw	r30, r28
    133e:	e3 5a       	subi	r30, 0xA3	; 163
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	80 81       	ld	r24, Z
    1344:	80 31       	cpi	r24, 0x10	; 16
    1346:	09 f0       	breq	.+2      	; 0x134a <main+0x804>
    1348:	22 c1       	rjmp	.+580    	; 0x158e <main+0xa48>
    	{
    		/* UART receives the password from mictocontroller1 to check it */
    		for (int i = 0; i < MAX_PASSWORD; i++)
    134a:	fe 01       	movw	r30, r28
    134c:	e5 5b       	subi	r30, 0xB5	; 181
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	11 82       	std	Z+1, r1	; 0x01
    1352:	10 82       	st	Z, r1
    1354:	1b c0       	rjmp	.+54     	; 0x138c <main+0x846>
			{
				password [i] = UART_recieveByte();
    1356:	fe 01       	movw	r30, r28
    1358:	e5 5b       	subi	r30, 0xB5	; 181
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	00 81       	ld	r16, Z
    135e:	11 81       	ldd	r17, Z+1	; 0x01
    1360:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
    1364:	28 2f       	mov	r18, r24
    1366:	ce 01       	movw	r24, r28
    1368:	82 5a       	subi	r24, 0xA2	; 162
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	fc 01       	movw	r30, r24
    136e:	e0 0f       	add	r30, r16
    1370:	f1 1f       	adc	r31, r17
    1372:	20 83       	st	Z, r18
    	/* If action is to open door then microcontroller2 will receives the current password from
    	 * microcontroller1 and compare it with saved password n EE2PROM if matched will open door */
    	else if(action == OPEN_DOOR)
    	{
    		/* UART receives the password from mictocontroller1 to check it */
    		for (int i = 0; i < MAX_PASSWORD; i++)
    1374:	de 01       	movw	r26, r28
    1376:	a5 5b       	subi	r26, 0xB5	; 181
    1378:	bf 4f       	sbci	r27, 0xFF	; 255
    137a:	fe 01       	movw	r30, r28
    137c:	e5 5b       	subi	r30, 0xB5	; 181
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	11 96       	adiw	r26, 0x01	; 1
    1388:	9c 93       	st	X, r25
    138a:	8e 93       	st	-X, r24
    138c:	fe 01       	movw	r30, r28
    138e:	e5 5b       	subi	r30, 0xB5	; 181
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	85 30       	cpi	r24, 0x05	; 5
    1398:	91 05       	cpc	r25, r1
    139a:	ec f2       	brlt	.-70     	; 0x1356 <main+0x810>
			{
				password [i] = UART_recieveByte();
			}

    		/* Read the saved password from EE2PROM to compare it with received password */
    		for(int i = 0; i < MAX_PASSWORD; i++)
    139c:	fe 01       	movw	r30, r28
    139e:	e7 5b       	subi	r30, 0xB7	; 183
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	11 82       	std	Z+1, r1	; 0x01
    13a4:	10 82       	st	Z, r1
    13a6:	94 c0       	rjmp	.+296    	; 0x14d0 <main+0x98a>
    		{
    			EEPROM_readByte(START_ADDRESS + i, &old_password[i]);
    13a8:	fe 01       	movw	r30, r28
    13aa:	e7 5b       	subi	r30, 0xB7	; 183
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	8f 5e       	subi	r24, 0xEF	; 239
    13b4:	9c 4f       	sbci	r25, 0xFC	; 252
    13b6:	ac 01       	movw	r20, r24
    13b8:	fe 01       	movw	r30, r28
    13ba:	e7 5b       	subi	r30, 0xB7	; 183
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	9e 01       	movw	r18, r28
    13c4:	28 59       	subi	r18, 0x98	; 152
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	28 0f       	add	r18, r24
    13ca:	39 1f       	adc	r19, r25
    13cc:	ca 01       	movw	r24, r20
    13ce:	b9 01       	movw	r22, r18
    13d0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <EEPROM_readByte>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a0 e2       	ldi	r26, 0x20	; 32
    13da:	b1 e4       	ldi	r27, 0x41	; 65
    13dc:	89 8f       	std	Y+25, r24	; 0x19
    13de:	9a 8f       	std	Y+26, r25	; 0x1a
    13e0:	ab 8f       	std	Y+27, r26	; 0x1b
    13e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e4:	69 8d       	ldd	r22, Y+25	; 0x19
    13e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	4a ef       	ldi	r20, 0xFA	; 250
    13f2:	54 e4       	ldi	r21, 0x44	; 68
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	8d 8b       	std	Y+21, r24	; 0x15
    13fe:	9e 8b       	std	Y+22, r25	; 0x16
    1400:	af 8b       	std	Y+23, r26	; 0x17
    1402:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	8f 89       	ldd	r24, Y+23	; 0x17
    140a:	98 8d       	ldd	r25, Y+24	; 0x18
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e8       	ldi	r20, 0x80	; 128
    1412:	5f e3       	ldi	r21, 0x3F	; 63
    1414:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1418:	88 23       	and	r24, r24
    141a:	2c f4       	brge	.+10     	; 0x1426 <main+0x8e0>
		__ticks = 1;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	9c 8b       	std	Y+20, r25	; 0x14
    1422:	8b 8b       	std	Y+19, r24	; 0x13
    1424:	3f c0       	rjmp	.+126    	; 0x14a4 <main+0x95e>
	else if (__tmp > 65535)
    1426:	6d 89       	ldd	r22, Y+21	; 0x15
    1428:	7e 89       	ldd	r23, Y+22	; 0x16
    142a:	8f 89       	ldd	r24, Y+23	; 0x17
    142c:	98 8d       	ldd	r25, Y+24	; 0x18
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	3f ef       	ldi	r19, 0xFF	; 255
    1432:	4f e7       	ldi	r20, 0x7F	; 127
    1434:	57 e4       	ldi	r21, 0x47	; 71
    1436:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143a:	18 16       	cp	r1, r24
    143c:	4c f5       	brge	.+82     	; 0x1490 <main+0x94a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143e:	69 8d       	ldd	r22, Y+25	; 0x19
    1440:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1442:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1444:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e2       	ldi	r20, 0x20	; 32
    144c:	51 e4       	ldi	r21, 0x41	; 65
    144e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	9c 8b       	std	Y+20, r25	; 0x14
    1464:	8b 8b       	std	Y+19, r24	; 0x13
    1466:	0f c0       	rjmp	.+30     	; 0x1486 <main+0x940>
    1468:	88 ec       	ldi	r24, 0xC8	; 200
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	9a 8b       	std	Y+18, r25	; 0x12
    146e:	89 8b       	std	Y+17, r24	; 0x11
    1470:	89 89       	ldd	r24, Y+17	; 0x11
    1472:	9a 89       	ldd	r25, Y+18	; 0x12
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <main+0x92e>
    1478:	9a 8b       	std	Y+18, r25	; 0x12
    147a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147c:	8b 89       	ldd	r24, Y+19	; 0x13
    147e:	9c 89       	ldd	r25, Y+20	; 0x14
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	9c 8b       	std	Y+20, r25	; 0x14
    1484:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1486:	8b 89       	ldd	r24, Y+19	; 0x13
    1488:	9c 89       	ldd	r25, Y+20	; 0x14
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	69 f7       	brne	.-38     	; 0x1468 <main+0x922>
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <main+0x972>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1490:	6d 89       	ldd	r22, Y+21	; 0x15
    1492:	7e 89       	ldd	r23, Y+22	; 0x16
    1494:	8f 89       	ldd	r24, Y+23	; 0x17
    1496:	98 8d       	ldd	r25, Y+24	; 0x18
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9c 8b       	std	Y+20, r25	; 0x14
    14a2:	8b 8b       	std	Y+19, r24	; 0x13
    14a4:	8b 89       	ldd	r24, Y+19	; 0x13
    14a6:	9c 89       	ldd	r25, Y+20	; 0x14
    14a8:	98 8b       	std	Y+16, r25	; 0x10
    14aa:	8f 87       	std	Y+15, r24	; 0x0f
    14ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ae:	98 89       	ldd	r25, Y+16	; 0x10
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <main+0x96a>
    14b4:	98 8b       	std	Y+16, r25	; 0x10
    14b6:	8f 87       	std	Y+15, r24	; 0x0f
			{
				password [i] = UART_recieveByte();
			}

    		/* Read the saved password from EE2PROM to compare it with received password */
    		for(int i = 0; i < MAX_PASSWORD; i++)
    14b8:	de 01       	movw	r26, r28
    14ba:	a7 5b       	subi	r26, 0xB7	; 183
    14bc:	bf 4f       	sbci	r27, 0xFF	; 255
    14be:	fe 01       	movw	r30, r28
    14c0:	e7 5b       	subi	r30, 0xB7	; 183
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	9c 93       	st	X, r25
    14ce:	8e 93       	st	-X, r24
    14d0:	fe 01       	movw	r30, r28
    14d2:	e7 5b       	subi	r30, 0xB7	; 183
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	85 30       	cpi	r24, 0x05	; 5
    14dc:	91 05       	cpc	r25, r1
    14de:	0c f4       	brge	.+2      	; 0x14e2 <main+0x99c>
    14e0:	63 cf       	rjmp	.-314    	; 0x13a8 <main+0x862>
    			EEPROM_readByte(START_ADDRESS + i, &old_password[i]);
    			_delay_ms(10);
    		}

    		/* Checks if 2 passwords are matched and return the result if matched or not */
    		match = validate_password(password, old_password);
    14e2:	ce 01       	movw	r24, r28
    14e4:	82 5a       	subi	r24, 0xA2	; 162
    14e6:	9f 4f       	sbci	r25, 0xFF	; 255
    14e8:	9e 01       	movw	r18, r28
    14ea:	28 59       	subi	r18, 0x98	; 152
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	b9 01       	movw	r22, r18
    14f0:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <validate_password>
    14f4:	fe 01       	movw	r30, r28
    14f6:	e3 59       	subi	r30, 0x93	; 147
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 83       	st	Z, r24

    		/* If 2 passwords are matched, start the timer to count 15 seconds and rotate motor clockwise */
    		if(match == TRUE)
    14fc:	fe 01       	movw	r30, r28
    14fe:	e3 59       	subi	r30, 0x93	; 147
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 81       	ld	r24, Z
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	a1 f5       	brne	.+104    	; 0x1570 <main+0xa2a>
    		{
    			/* Adjust configuration of Timer */
    			Config_Ptr.mode = NORMAL;
    1508:	10 92 79 00 	sts	0x0079, r1
    			Config_Ptr.initial_value = 0;
    150c:	10 92 7b 00 	sts	0x007B, r1
    1510:	10 92 7a 00 	sts	0x007A, r1
    			Config_Ptr.compare_value = 0;
    1514:	10 92 7e 00 	sts	0x007E, r1
    1518:	10 92 7d 00 	sts	0x007D, r1

    			/* Use these to adjust Timer0 or Timer 2 to start counting */
    			Config_Ptr.timer_number = Timer2;
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	80 93 7f 00 	sts	0x007F, r24
    			Config_Ptr.clock = F_CPU_1024;
    1522:	86 e0       	ldi	r24, 0x06	; 6
    1524:	80 93 7c 00 	sts	0x007C, r24
    			 *  Config_Ptr.timer_number = Timer1;
    			 *  Config_Ptr.clock = F_CPU_8;
    			 */

    			/* Initialize timer */
    			Timer_init(&Config_Ptr);
    1528:	89 e7       	ldi	r24, 0x79	; 121
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 96 13 	call	0x272c	; 0x272c <Timer_init>

    			/* Rotate motor clock wise */
    			CLEAR_BIT(PORTB, PB6);
    1530:	a8 e3       	ldi	r26, 0x38	; 56
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e8 e3       	ldi	r30, 0x38	; 56
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8f 7b       	andi	r24, 0xBF	; 191
    153c:	8c 93       	st	X, r24
    			SET_BIT(PORTB, PB7);
    153e:	a8 e3       	ldi	r26, 0x38	; 56
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e8 e3       	ldi	r30, 0x38	; 56
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	80 68       	ori	r24, 0x80	; 128
    154a:	8c 93       	st	X, r24

    			/* Set the Call back function pointer in the Timer driver */
    			Timer_setCallBack(door);
    154c:	87 ea       	ldi	r24, 0xA7	; 167
    154e:	9b e0       	ldi	r25, 0x0B	; 11
    1550:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <Timer_setCallBack>

    			/* Wait until microcontroller1 is ready and then send to it the result of validation */
        		while(UART_recieveByte() != M1_READY);
    1554:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
    1558:	80 32       	cpi	r24, 0x20	; 32
    155a:	e1 f7       	brne	.-8      	; 0x1554 <main+0xa0e>
        		UART_sendByte(TRUE);
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>

        		/* Wait until door is open and then closed */
        		while(g_state != 3);
    1562:	80 91 72 00 	lds	r24, 0x0072
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	e1 f7       	brne	.-8      	; 0x1562 <main+0xa1c>

        		/* Return the state of door to ideal to be able to start this operation again */
        		g_state = 0;
    156a:	10 92 72 00 	sts	0x0072, r1
    156e:	d5 cc       	rjmp	.-1622   	; 0xf1a <main+0x3d4>
    		}
    		/* If passwords are not matched then return to microcontroller1 the result of match */
    		else if(match == FALSE)
    1570:	fe 01       	movw	r30, r28
    1572:	e3 59       	subi	r30, 0x93	; 147
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	88 23       	and	r24, r24
    157a:	09 f0       	breq	.+2      	; 0x157e <main+0xa38>
    157c:	ce cc       	rjmp	.-1636   	; 0xf1a <main+0x3d4>
    		{
    			/* Wait until microcontroller1 is ready and then send to it the result of validation */
        		while(UART_recieveByte() != M1_READY);
    157e:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
    1582:	80 32       	cpi	r24, 0x20	; 32
    1584:	e1 f7       	brne	.-8      	; 0x157e <main+0xa38>
        		UART_sendByte(FALSE);
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>
    158c:	c6 cc       	rjmp	.-1652   	; 0xf1a <main+0x3d4>
    		}
    	}
    	/* If action is emergency, led will be open for 1 minute */
    	else if(action == EMERGENCY)
    158e:	fe 01       	movw	r30, r28
    1590:	e3 5a       	subi	r30, 0xA3	; 163
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	80 81       	ld	r24, Z
    1596:	81 31       	cpi	r24, 0x11	; 17
    1598:	09 f0       	breq	.+2      	; 0x159c <main+0xa56>
    159a:	bf cc       	rjmp	.-1666   	; 0xf1a <main+0x3d4>
    	{
    		/* Led is on */
    		SET_BIT(PORTD, PD3);
    159c:	a2 e3       	ldi	r26, 0x32	; 50
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e2 e3       	ldi	r30, 0x32	; 50
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	88 60       	ori	r24, 0x08	; 8
    15a8:	8c 93       	st	X, r24

    		 /* Wait for 1 minute */
    		for(int i = 1; i <= 60; i++)
    15aa:	fe 01       	movw	r30, r28
    15ac:	e9 5b       	subi	r30, 0xB9	; 185
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	91 83       	std	Z+1, r25	; 0x01
    15b6:	80 83       	st	Z, r24
    15b8:	7e c0       	rjmp	.+252    	; 0x16b6 <main+0xb70>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	aa e7       	ldi	r26, 0x7A	; 122
    15c0:	b4 e4       	ldi	r27, 0x44	; 68
    15c2:	8b 87       	std	Y+11, r24	; 0x0b
    15c4:	9c 87       	std	Y+12, r25	; 0x0c
    15c6:	ad 87       	std	Y+13, r26	; 0x0d
    15c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    15cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	4a ef       	ldi	r20, 0xFA	; 250
    15d8:	54 e4       	ldi	r21, 0x44	; 68
    15da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	8f 83       	std	Y+7, r24	; 0x07
    15e4:	98 87       	std	Y+8, r25	; 0x08
    15e6:	a9 87       	std	Y+9, r26	; 0x09
    15e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ea:	6f 81       	ldd	r22, Y+7	; 0x07
    15ec:	78 85       	ldd	r23, Y+8	; 0x08
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15fe:	88 23       	and	r24, r24
    1600:	2c f4       	brge	.+10     	; 0x160c <main+0xac6>
		__ticks = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
    160a:	3f c0       	rjmp	.+126    	; 0x168a <main+0xb44>
	else if (__tmp > 65535)
    160c:	6f 81       	ldd	r22, Y+7	; 0x07
    160e:	78 85       	ldd	r23, Y+8	; 0x08
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	3f ef       	ldi	r19, 0xFF	; 255
    1618:	4f e7       	ldi	r20, 0x7F	; 127
    161a:	57 e4       	ldi	r21, 0x47	; 71
    161c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1620:	18 16       	cp	r1, r24
    1622:	4c f5       	brge	.+82     	; 0x1676 <main+0xb30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1624:	6b 85       	ldd	r22, Y+11	; 0x0b
    1626:	7c 85       	ldd	r23, Y+12	; 0x0c
    1628:	8d 85       	ldd	r24, Y+13	; 0x0d
    162a:	9e 85       	ldd	r25, Y+14	; 0x0e
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e2       	ldi	r20, 0x20	; 32
    1632:	51 e4       	ldi	r21, 0x41	; 65
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	0f c0       	rjmp	.+30     	; 0x166c <main+0xb26>
    164e:	88 ec       	ldi	r24, 0xC8	; 200
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9c 83       	std	Y+4, r25	; 0x04
    1654:	8b 83       	std	Y+3, r24	; 0x03
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <main+0xb14>
    165e:	9c 83       	std	Y+4, r25	; 0x04
    1660:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	9e 83       	std	Y+6, r25	; 0x06
    166a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	69 f7       	brne	.-38     	; 0x164e <main+0xb08>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <main+0xb58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1676:	6f 81       	ldd	r22, Y+7	; 0x07
    1678:	78 85       	ldd	r23, Y+8	; 0x08
    167a:	89 85       	ldd	r24, Y+9	; 0x09
    167c:	9a 85       	ldd	r25, Y+10	; 0x0a
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	9a 83       	std	Y+2, r25	; 0x02
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <main+0xb50>
    169a:	9a 83       	std	Y+2, r25	; 0x02
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	de 01       	movw	r26, r28
    16a0:	a9 5b       	subi	r26, 0xB9	; 185
    16a2:	bf 4f       	sbci	r27, 0xFF	; 255
    16a4:	fe 01       	movw	r30, r28
    16a6:	e9 5b       	subi	r30, 0xB9	; 185
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	11 96       	adiw	r26, 0x01	; 1
    16b2:	9c 93       	st	X, r25
    16b4:	8e 93       	st	-X, r24
    16b6:	fe 01       	movw	r30, r28
    16b8:	e9 5b       	subi	r30, 0xB9	; 185
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	8d 33       	cpi	r24, 0x3D	; 61
    16c2:	91 05       	cpc	r25, r1
    16c4:	0c f4       	brge	.+2      	; 0x16c8 <main+0xb82>
    16c6:	79 cf       	rjmp	.-270    	; 0x15ba <main+0xa74>
			{
				_delay_ms(1000);
			}

    		/* Led is off */
    		CLEAR_BIT(PORTD, PD3);
    16c8:	a2 e3       	ldi	r26, 0x32	; 50
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e2 e3       	ldi	r30, 0x32	; 50
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	87 7f       	andi	r24, 0xF7	; 247
    16d4:	8c 93       	st	X, r24
    16d6:	21 cc       	rjmp	.-1982   	; 0xf1a <main+0x3d4>

000016d8 <validate_password>:
 * 				 and if they are not matched will return FALSE
 * [in]: address of array password1, and address of array password2
 * [out]: The result of comparison
 */
uint8 validate_password(const uint8 * password, const uint8 * re_password)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	27 97       	sbiw	r28, 0x07	; 7
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	9c 83       	std	Y+4, r25	; 0x04
    16ee:	8b 83       	std	Y+3, r24	; 0x03
    16f0:	7e 83       	std	Y+6, r23	; 0x06
    16f2:	6d 83       	std	Y+5, r22	; 0x05
	for (int i = 0; i < MAX_PASSWORD; i++)
    16f4:	1a 82       	std	Y+2, r1	; 0x02
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	19 c0       	rjmp	.+50     	; 0x172c <validate_password+0x54>
	{
		if(password[i] != re_password[i])
    16fa:	29 81       	ldd	r18, Y+1	; 0x01
    16fc:	3a 81       	ldd	r19, Y+2	; 0x02
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	fc 01       	movw	r30, r24
    1704:	e2 0f       	add	r30, r18
    1706:	f3 1f       	adc	r31, r19
    1708:	40 81       	ld	r20, Z
    170a:	29 81       	ldd	r18, Y+1	; 0x01
    170c:	3a 81       	ldd	r19, Y+2	; 0x02
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	fc 01       	movw	r30, r24
    1714:	e2 0f       	add	r30, r18
    1716:	f3 1f       	adc	r31, r19
    1718:	80 81       	ld	r24, Z
    171a:	48 17       	cp	r20, r24
    171c:	11 f0       	breq	.+4      	; 0x1722 <validate_password+0x4a>
		{
			return ERROR;
    171e:	1f 82       	std	Y+7, r1	; 0x07
    1720:	0c c0       	rjmp	.+24     	; 0x173a <validate_password+0x62>
 * [in]: address of array password1, and address of array password2
 * [out]: The result of comparison
 */
uint8 validate_password(const uint8 * password, const uint8 * re_password)
{
	for (int i = 0; i < MAX_PASSWORD; i++)
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	9a 83       	std	Y+2, r25	; 0x02
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	85 30       	cpi	r24, 0x05	; 5
    1732:	91 05       	cpc	r25, r1
    1734:	14 f3       	brlt	.-60     	; 0x16fa <validate_password+0x22>
		if(password[i] != re_password[i])
		{
			return ERROR;
		}
	}
	return SUCCESS;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	8f 83       	std	Y+7, r24	; 0x07
    173a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    173c:	27 96       	adiw	r28, 0x07	; 7
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <door>:


void door()
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
	/* Increment g_tick every time this function will be called */
	g_tick++;
    1756:	80 91 70 00 	lds	r24, 0x0070
    175a:	90 91 71 00 	lds	r25, 0x0071
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	90 93 71 00 	sts	0x0071, r25
    1764:	80 93 70 00 	sts	0x0070, r24

	/* If timer counts 15 seconds stop the motor */
	if(g_tick == (NUMBER_OF_OVERFLOWS_PER_SECOND_Timer0_2 * 15) && g_state == 0)
    1768:	80 91 70 00 	lds	r24, 0x0070
    176c:	90 91 71 00 	lds	r25, 0x0071
    1770:	21 e0       	ldi	r18, 0x01	; 1
    1772:	80 3e       	cpi	r24, 0xE0	; 224
    1774:	92 07       	cpc	r25, r18
    1776:	d1 f4       	brne	.+52     	; 0x17ac <door+0x5e>
    1778:	80 91 72 00 	lds	r24, 0x0072
    177c:	88 23       	and	r24, r24
    177e:	b1 f4       	brne	.+44     	; 0x17ac <door+0x5e>
	{
		/* Stop motor */
		CLEAR_BIT(PORTB, PC6);
    1780:	a8 e3       	ldi	r26, 0x38	; 56
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e8 e3       	ldi	r30, 0x38	; 56
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8f 7b       	andi	r24, 0xBF	; 191
    178c:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB, PC7);
    178e:	a8 e3       	ldi	r26, 0x38	; 56
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e8 e3       	ldi	r30, 0x38	; 56
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8f 77       	andi	r24, 0x7F	; 127
    179a:	8c 93       	st	X, r24

		/* Return g_tick to zero to start counting 3 seconds and go to g_state = 1 */
		g_tick = 0;
    179c:	10 92 71 00 	sts	0x0071, r1
    17a0:	10 92 70 00 	sts	0x0070, r1
		g_state = 1;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	80 93 72 00 	sts	0x0072, r24
    17aa:	4b c0       	rjmp	.+150    	; 0x1842 <door+0xf4>

	}
	/* If timer counts 2 seconds , rotate motor anti-clock wise */
	else if(g_tick == (NUMBER_OF_OVERFLOWS_PER_SECOND_Timer0_2 * 3) && g_state == 1)
    17ac:	80 91 70 00 	lds	r24, 0x0070
    17b0:	90 91 71 00 	lds	r25, 0x0071
    17b4:	80 36       	cpi	r24, 0x60	; 96
    17b6:	91 05       	cpc	r25, r1
    17b8:	e9 f4       	brne	.+58     	; 0x17f4 <door+0xa6>
    17ba:	80 91 72 00 	lds	r24, 0x0072
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	c9 f4       	brne	.+50     	; 0x17f4 <door+0xa6>
	{
		/* UART sends byte to microcontroller1 to indicate that the door will start closing after 3 seconds */
		UART_sendByte(M2_READY);
    17c2:	80 e1       	ldi	r24, 0x10	; 16
    17c4:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>

		/* Rotate motor anti-clock wise */
		SET_BIT(PORTB, PB6);
    17c8:	a8 e3       	ldi	r26, 0x38	; 56
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e8 e3       	ldi	r30, 0x38	; 56
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	80 64       	ori	r24, 0x40	; 64
    17d4:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB, PB7);
    17d6:	a8 e3       	ldi	r26, 0x38	; 56
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e8 e3       	ldi	r30, 0x38	; 56
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8f 77       	andi	r24, 0x7F	; 127
    17e2:	8c 93       	st	X, r24

		/* Return g_tick to zero to start counting 3 seconds and go to g_state = 2 */
		g_tick = 0;
    17e4:	10 92 71 00 	sts	0x0071, r1
    17e8:	10 92 70 00 	sts	0x0070, r1
		g_state = 2;
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	80 93 72 00 	sts	0x0072, r24
    17f2:	27 c0       	rjmp	.+78     	; 0x1842 <door+0xf4>
	}
	/* If timer counts 15 seconds , stop motor */
	else if(g_tick == (NUMBER_OF_OVERFLOWS_PER_SECOND_Timer0_2 * 15) && g_state == 2)
    17f4:	80 91 70 00 	lds	r24, 0x0070
    17f8:	90 91 71 00 	lds	r25, 0x0071
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	80 3e       	cpi	r24, 0xE0	; 224
    1800:	92 07       	cpc	r25, r18
    1802:	f9 f4       	brne	.+62     	; 0x1842 <door+0xf4>
    1804:	80 91 72 00 	lds	r24, 0x0072
    1808:	82 30       	cpi	r24, 0x02	; 2
    180a:	d9 f4       	brne	.+54     	; 0x1842 <door+0xf4>
	{
		/* UART sends byte to microcontroller1 to indicate that the door is closed */
		UART_sendByte(M2_READY);
    180c:	80 e1       	ldi	r24, 0x10	; 16
    180e:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>

		/* Stop motor */
		CLEAR_BIT(PORTB, PB6);
    1812:	a8 e3       	ldi	r26, 0x38	; 56
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e8 e3       	ldi	r30, 0x38	; 56
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8f 7b       	andi	r24, 0xBF	; 191
    181e:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB, PB7);
    1820:	a8 e3       	ldi	r26, 0x38	; 56
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e8 e3       	ldi	r30, 0x38	; 56
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	8f 77       	andi	r24, 0x7F	; 127
    182c:	8c 93       	st	X, r24

		/* Return g_tick to zero and go to g_state = 3 */
		g_tick = 0;
    182e:	10 92 71 00 	sts	0x0071, r1
    1832:	10 92 70 00 	sts	0x0070, r1
		g_state = 3;
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	80 93 72 00 	sts	0x0072, r24

		/* Stop the timer */
		Timer_stop(Timer2);
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	0e 94 67 15 	call	0x2ace	; 0x2ace <Timer_stop>
	}

}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <EEPROM_init>:

#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <EEPROM_init+0x6>
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	I2C_ConfigType Config_Ptr = {FAST_MODE, 0x01};
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&Config_Ptr);
    185a:	ce 01       	movw	r24, r28
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <TWI_init>
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <EEPROM_writeByte+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <EEPROM_writeByte+0x8>
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    187e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <TWI_start>
    if (TWI_getStatus() != TW_START)
    1882:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    1886:	88 30       	cpi	r24, 0x08	; 8
    1888:	11 f0       	breq	.+4      	; 0x188e <EEPROM_writeByte+0x22>
        return ERROR;
    188a:	1c 82       	std	Y+4, r1	; 0x04
    188c:	28 c0       	rjmp	.+80     	; 0x18de <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	9a 81       	ldd	r25, Y+2	; 0x02
    1892:	80 70       	andi	r24, 0x00	; 0
    1894:	97 70       	andi	r25, 0x07	; 7
    1896:	88 0f       	add	r24, r24
    1898:	89 2f       	mov	r24, r25
    189a:	88 1f       	adc	r24, r24
    189c:	99 0b       	sbc	r25, r25
    189e:	91 95       	neg	r25
    18a0:	80 6a       	ori	r24, 0xA0	; 160
    18a2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    18a6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    18aa:	88 31       	cpi	r24, 0x18	; 24
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <EEPROM_writeByte+0x46>
        return ERROR; 
    18ae:	1c 82       	std	Y+4, r1	; 0x04
    18b0:	16 c0       	rjmp	.+44     	; 0x18de <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    18b8:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    18bc:	88 32       	cpi	r24, 0x28	; 40
    18be:	11 f0       	breq	.+4      	; 0x18c4 <EEPROM_writeByte+0x58>
        return ERROR;
    18c0:	1c 82       	std	Y+4, r1	; 0x04
    18c2:	0d c0       	rjmp	.+26     	; 0x18de <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    18ca:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    18ce:	88 32       	cpi	r24, 0x28	; 40
    18d0:	11 f0       	breq	.+4      	; 0x18d6 <EEPROM_writeByte+0x6a>
        return ERROR;
    18d2:	1c 82       	std	Y+4, r1	; 0x04
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    18d6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <TWI_stop>
	
    return SUCCESS;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	8c 83       	std	Y+4, r24	; 0x04
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <EEPROM_readByte+0x6>
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <EEPROM_readByte+0x8>
    18f6:	0f 92       	push	r0
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	9a 83       	std	Y+2, r25	; 0x02
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	7c 83       	std	Y+4, r23	; 0x04
    1902:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1904:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <TWI_start>
    if (TWI_getStatus() != TW_START)
    1908:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    190c:	88 30       	cpi	r24, 0x08	; 8
    190e:	11 f0       	breq	.+4      	; 0x1914 <EEPROM_readByte+0x26>
        return ERROR;
    1910:	1d 82       	std	Y+5, r1	; 0x05
    1912:	44 c0       	rjmp	.+136    	; 0x199c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	80 70       	andi	r24, 0x00	; 0
    191a:	97 70       	andi	r25, 0x07	; 7
    191c:	88 0f       	add	r24, r24
    191e:	89 2f       	mov	r24, r25
    1920:	88 1f       	adc	r24, r24
    1922:	99 0b       	sbc	r25, r25
    1924:	91 95       	neg	r25
    1926:	80 6a       	ori	r24, 0xA0	; 160
    1928:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    192c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    1930:	88 31       	cpi	r24, 0x18	; 24
    1932:	11 f0       	breq	.+4      	; 0x1938 <EEPROM_readByte+0x4a>
        return ERROR;
    1934:	1d 82       	std	Y+5, r1	; 0x05
    1936:	32 c0       	rjmp	.+100    	; 0x199c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    193e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    1942:	88 32       	cpi	r24, 0x28	; 40
    1944:	11 f0       	breq	.+4      	; 0x194a <EEPROM_readByte+0x5c>
        return ERROR;
    1946:	1d 82       	std	Y+5, r1	; 0x05
    1948:	29 c0       	rjmp	.+82     	; 0x199c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    194a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    194e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    1952:	80 31       	cpi	r24, 0x10	; 16
    1954:	11 f0       	breq	.+4      	; 0x195a <EEPROM_readByte+0x6c>
        return ERROR;
    1956:	1d 82       	std	Y+5, r1	; 0x05
    1958:	21 c0       	rjmp	.+66     	; 0x199c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	80 70       	andi	r24, 0x00	; 0
    1960:	97 70       	andi	r25, 0x07	; 7
    1962:	88 0f       	add	r24, r24
    1964:	89 2f       	mov	r24, r25
    1966:	88 1f       	adc	r24, r24
    1968:	99 0b       	sbc	r25, r25
    196a:	91 95       	neg	r25
    196c:	81 6a       	ori	r24, 0xA1	; 161
    196e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1972:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    1976:	80 34       	cpi	r24, 0x40	; 64
    1978:	11 f0       	breq	.+4      	; 0x197e <EEPROM_readByte+0x90>
        return ERROR;
    197a:	1d 82       	std	Y+5, r1	; 0x05
    197c:	0f c0       	rjmp	.+30     	; 0x199c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    197e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <TWI_readWithNACK>
    1982:	eb 81       	ldd	r30, Y+3	; 0x03
    1984:	fc 81       	ldd	r31, Y+4	; 0x04
    1986:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1988:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TWI_getStatus>
    198c:	88 35       	cpi	r24, 0x58	; 88
    198e:	11 f0       	breq	.+4      	; 0x1994 <EEPROM_readByte+0xa6>
        return ERROR;
    1990:	1d 82       	std	Y+5, r1	; 0x05
    1992:	04 c0       	rjmp	.+8      	; 0x199c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1994:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <TWI_stop>
    return SUCCESS;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	8d 83       	std	Y+5, r24	; 0x05
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <TWI_init>:
 * Description: Source file for the I2C(TWI) AVR driver
 ------------------------------------------------------------------------------------------------*/
#include "i2c.h"

void TWI_init(const I2C_ConfigType * Config_Ptr)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <TWI_init+0x6>
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: 100.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	if(Config_Ptr->bit_rate == NORMAL_MODE)
    19bc:	e9 81       	ldd	r30, Y+1	; 0x01
    19be:	fa 81       	ldd	r31, Y+2	; 0x02
    19c0:	80 81       	ld	r24, Z
    19c2:	88 23       	and	r24, r24
    19c4:	41 f4       	brne	.+16     	; 0x19d6 <TWI_init+0x28>
	{
	   TWBR = 0x20;
    19c6:	e0 e2       	ldi	r30, 0x20	; 32
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 e2       	ldi	r24, 0x20	; 32
    19cc:	80 83       	st	Z, r24
	   TWSR = 0x00;
    19ce:	e1 e2       	ldi	r30, 0x21	; 33
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	10 82       	st	Z, r1
    19d4:	0c c0       	rjmp	.+24     	; 0x19ee <TWI_init+0x40>
	}
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	else if(Config_Ptr->bit_rate == FAST_MODE)
    19d6:	e9 81       	ldd	r30, Y+1	; 0x01
    19d8:	fa 81       	ldd	r31, Y+2	; 0x02
    19da:	80 81       	ld	r24, Z
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	39 f4       	brne	.+14     	; 0x19ee <TWI_init+0x40>
	{
		TWBR = 0x02;
    19e0:	e0 e2       	ldi	r30, 0x20	; 32
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	80 83       	st	Z, r24
		TWSR = 0x00;
    19e8:	e1 e2       	ldi	r30, 0x21	; 33
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	10 82       	st	Z, r1
	}

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address ; // my address = 0x01  0b00000010 :)
    19ee:	a2 e2       	ldi	r26, 0x22	; 34
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e9 81       	ldd	r30, Y+1	; 0x01
    19f4:	fa 81       	ldd	r31, Y+2	; 0x02
    19f6:	81 81       	ldd	r24, Z+1	; 0x01
    19f8:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    19fa:	e6 e5       	ldi	r30, 0x56	; 86
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	84 e0       	ldi	r24, 0x04	; 4
    1a00:	80 83       	st	Z, r24
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <TWI_start>:

void TWI_start(void)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1a14:	e6 e5       	ldi	r30, 0x56	; 86
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	84 ea       	ldi	r24, 0xA4	; 164
    1a1a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a1c:	e6 e5       	ldi	r30, 0x56	; 86
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	88 23       	and	r24, r24
    1a24:	dc f7       	brge	.-10     	; 0x1a1c <TWI_start+0x10>
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <TWI_stop>:

void TWI_stop(void)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1a34:	e6 e5       	ldi	r30, 0x56	; 86
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	84 e9       	ldi	r24, 0x94	; 148
    1a3a:	80 83       	st	Z, r24
}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <TWI_write>:

void TWI_write(uint8 data)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	0f 92       	push	r0
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1a4e:	e3 e2       	ldi	r30, 0x23	; 35
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1a56:	e6 e5       	ldi	r30, 0x56	; 86
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	84 e8       	ldi	r24, 0x84	; 132
    1a5c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a5e:	e6 e5       	ldi	r30, 0x56	; 86
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	88 23       	and	r24, r24
    1a66:	dc f7       	brge	.-10     	; 0x1a5e <TWI_write+0x1c>
}
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1a78:	e6 e5       	ldi	r30, 0x56	; 86
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	84 ec       	ldi	r24, 0xC4	; 196
    1a7e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a80:	e6 e5       	ldi	r30, 0x56	; 86
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	88 23       	and	r24, r24
    1a88:	dc f7       	brge	.-10     	; 0x1a80 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1a8a:	e3 e2       	ldi	r30, 0x23	; 35
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1a9e:	e6 e5       	ldi	r30, 0x56	; 86
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	84 e8       	ldi	r24, 0x84	; 132
    1aa4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1aa6:	e6 e5       	ldi	r30, 0x56	; 86
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	88 23       	and	r24, r24
    1aae:	dc f7       	brge	.-10     	; 0x1aa6 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1ab0:	e3 e2       	ldi	r30, 0x23	; 35
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
}
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1ac6:	e1 e2       	ldi	r30, 0x21	; 33
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	88 7f       	andi	r24, 0xF8	; 248
    1ace:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1ae2:	a7 e3       	ldi	r26, 0x37	; 55
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e7 e3       	ldi	r30, 0x37	; 55
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8e 60       	ori	r24, 0x0E	; 14
    1aee:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1af0:	ea e3       	ldi	r30, 0x3A	; 58
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1af8:	88 e3       	ldi	r24, 0x38	; 56
    1afa:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1afe:	8c e0       	ldi	r24, 0x0C	; 12
    1b00:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_sendCommand>
}
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	e9 97       	sbiw	r28, 0x39	; 57
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1b26:	a8 e3       	ldi	r26, 0x38	; 56
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e8 e3       	ldi	r30, 0x38	; 56
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	8d 7f       	andi	r24, 0xFD	; 253
    1b32:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1b34:	a8 e3       	ldi	r26, 0x38	; 56
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e8 e3       	ldi	r30, 0x38	; 56
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8b 7f       	andi	r24, 0xFB	; 251
    1b40:	8c 93       	st	X, r24
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a0 e8       	ldi	r26, 0x80	; 128
    1b48:	bf e3       	ldi	r27, 0x3F	; 63
    1b4a:	8d ab       	std	Y+53, r24	; 0x35
    1b4c:	9e ab       	std	Y+54, r25	; 0x36
    1b4e:	af ab       	std	Y+55, r26	; 0x37
    1b50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	6d a9       	ldd	r22, Y+53	; 0x35
    1b54:	7e a9       	ldd	r23, Y+54	; 0x36
    1b56:	8f a9       	ldd	r24, Y+55	; 0x37
    1b58:	98 ad       	ldd	r25, Y+56	; 0x38
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a e7       	ldi	r20, 0x7A	; 122
    1b60:	53 e4       	ldi	r21, 0x43	; 67
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	89 ab       	std	Y+49, r24	; 0x31
    1b6c:	9a ab       	std	Y+50, r25	; 0x32
    1b6e:	ab ab       	std	Y+51, r26	; 0x33
    1b70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b72:	69 a9       	ldd	r22, Y+49	; 0x31
    1b74:	7a a9       	ldd	r23, Y+50	; 0x32
    1b76:	8b a9       	ldd	r24, Y+51	; 0x33
    1b78:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <LCD_sendCommand+0x84>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	98 ab       	std	Y+48, r25	; 0x30
    1b90:	8f a7       	std	Y+47, r24	; 0x2f
    1b92:	3f c0       	rjmp	.+126    	; 0x1c12 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1b94:	69 a9       	ldd	r22, Y+49	; 0x31
    1b96:	7a a9       	ldd	r23, Y+50	; 0x32
    1b98:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	57 e4       	ldi	r21, 0x47	; 71
    1ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	4c f5       	brge	.+82     	; 0x1bfe <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bac:	6d a9       	ldd	r22, Y+53	; 0x35
    1bae:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	98 ab       	std	Y+48, r25	; 0x30
    1bd2:	8f a7       	std	Y+47, r24	; 0x2f
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <LCD_sendCommand+0xe4>
    1bd6:	89 e1       	ldi	r24, 0x19	; 25
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9e a7       	std	Y+46, r25	; 0x2e
    1bdc:	8d a7       	std	Y+45, r24	; 0x2d
    1bde:	8d a5       	ldd	r24, Y+45	; 0x2d
    1be0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_sendCommand+0xd2>
    1be6:	9e a7       	std	Y+46, r25	; 0x2e
    1be8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bec:	98 a9       	ldd	r25, Y+48	; 0x30
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	98 ab       	std	Y+48, r25	; 0x30
    1bf2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <LCD_sendCommand+0xc6>
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1c00:	7a a9       	ldd	r23, Y+50	; 0x32
    1c02:	8b a9       	ldd	r24, Y+51	; 0x33
    1c04:	9c a9       	ldd	r25, Y+52	; 0x34
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	98 ab       	std	Y+48, r25	; 0x30
    1c10:	8f a7       	std	Y+47, r24	; 0x2f
    1c12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c14:	98 a9       	ldd	r25, Y+48	; 0x30
    1c16:	9c a7       	std	Y+44, r25	; 0x2c
    1c18:	8b a7       	std	Y+43, r24	; 0x2b
    1c1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_sendCommand+0x10e>
    1c22:	9c a7       	std	Y+44, r25	; 0x2c
    1c24:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1c26:	a8 e3       	ldi	r26, 0x38	; 56
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e8 e3       	ldi	r30, 0x38	; 56
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 60       	ori	r24, 0x08	; 8
    1c32:	8c 93       	st	X, r24
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 e8       	ldi	r26, 0x80	; 128
    1c3a:	bf e3       	ldi	r27, 0x3F	; 63
    1c3c:	8f a3       	std	Y+39, r24	; 0x27
    1c3e:	98 a7       	std	Y+40, r25	; 0x28
    1c40:	a9 a7       	std	Y+41, r26	; 0x29
    1c42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c44:	6f a1       	ldd	r22, Y+39	; 0x27
    1c46:	78 a5       	ldd	r23, Y+40	; 0x28
    1c48:	89 a5       	ldd	r24, Y+41	; 0x29
    1c4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4a e7       	ldi	r20, 0x7A	; 122
    1c52:	53 e4       	ldi	r21, 0x43	; 67
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	8b a3       	std	Y+35, r24	; 0x23
    1c5e:	9c a3       	std	Y+36, r25	; 0x24
    1c60:	ad a3       	std	Y+37, r26	; 0x25
    1c62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c64:	6b a1       	ldd	r22, Y+35	; 0x23
    1c66:	7c a1       	ldd	r23, Y+36	; 0x24
    1c68:	8d a1       	ldd	r24, Y+37	; 0x25
    1c6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	2c f4       	brge	.+10     	; 0x1c86 <LCD_sendCommand+0x176>
		__ticks = 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9a a3       	std	Y+34, r25	; 0x22
    1c82:	89 a3       	std	Y+33, r24	; 0x21
    1c84:	3f c0       	rjmp	.+126    	; 0x1d04 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1c86:	6b a1       	ldd	r22, Y+35	; 0x23
    1c88:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	3f ef       	ldi	r19, 0xFF	; 255
    1c92:	4f e7       	ldi	r20, 0x7F	; 127
    1c94:	57 e4       	ldi	r21, 0x47	; 71
    1c96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9a:	18 16       	cp	r1, r24
    1c9c:	4c f5       	brge	.+82     	; 0x1cf0 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9a a3       	std	Y+34, r25	; 0x22
    1cc4:	89 a3       	std	Y+33, r24	; 0x21
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <LCD_sendCommand+0x1d6>
    1cc8:	89 e1       	ldi	r24, 0x19	; 25
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	98 a3       	std	Y+32, r25	; 0x20
    1cce:	8f 8f       	std	Y+31, r24	; 0x1f
    1cd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd2:	98 a1       	ldd	r25, Y+32	; 0x20
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <LCD_sendCommand+0x1c4>
    1cd8:	98 a3       	std	Y+32, r25	; 0x20
    1cda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cdc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cde:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	9a a3       	std	Y+34, r25	; 0x22
    1ce4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	69 f7       	brne	.-38     	; 0x1cc8 <LCD_sendCommand+0x1b8>
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	9a a3       	std	Y+34, r25	; 0x22
    1d02:	89 a3       	std	Y+33, r24	; 0x21
    1d04:	89 a1       	ldd	r24, Y+33	; 0x21
    1d06:	9a a1       	ldd	r25, Y+34	; 0x22
    1d08:	9e 8f       	std	Y+30, r25	; 0x1e
    1d0a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_sendCommand+0x200>
    1d14:	9e 8f       	std	Y+30, r25	; 0x1e
    1d16:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1d18:	eb e3       	ldi	r30, 0x3B	; 59
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d1e:	80 83       	st	Z, r24
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e8       	ldi	r26, 0x80	; 128
    1d26:	bf e3       	ldi	r27, 0x3F	; 63
    1d28:	89 8f       	std	Y+25, r24	; 0x19
    1d2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	69 8d       	ldd	r22, Y+25	; 0x19
    1d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a e7       	ldi	r20, 0x7A	; 122
    1d3e:	53 e4       	ldi	r21, 0x43	; 67
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8d 8b       	std	Y+21, r24	; 0x15
    1d4a:	9e 8b       	std	Y+22, r25	; 0x16
    1d4c:	af 8b       	std	Y+23, r26	; 0x17
    1d4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d50:	6d 89       	ldd	r22, Y+21	; 0x15
    1d52:	7e 89       	ldd	r23, Y+22	; 0x16
    1d54:	8f 89       	ldd	r24, Y+23	; 0x17
    1d56:	98 8d       	ldd	r25, Y+24	; 0x18
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <LCD_sendCommand+0x262>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9c 8b       	std	Y+20, r25	; 0x14
    1d6e:	8b 8b       	std	Y+19, r24	; 0x13
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	4c f5       	brge	.+82     	; 0x1ddc <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <LCD_sendCommand+0x2c2>
    1db4:	89 e1       	ldi	r24, 0x19	; 25
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9a 8b       	std	Y+18, r25	; 0x12
    1dba:	89 8b       	std	Y+17, r24	; 0x11
    1dbc:	89 89       	ldd	r24, Y+17	; 0x11
    1dbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_sendCommand+0x2b0>
    1dc4:	9a 8b       	std	Y+18, r25	; 0x12
    1dc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dca:	9c 89       	ldd	r25, Y+20	; 0x14
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <LCD_sendCommand+0x2a4>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dde:	7e 89       	ldd	r23, Y+22	; 0x16
    1de0:	8f 89       	ldd	r24, Y+23	; 0x17
    1de2:	98 8d       	ldd	r25, Y+24	; 0x18
    1de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9c 8b       	std	Y+20, r25	; 0x14
    1dee:	8b 8b       	std	Y+19, r24	; 0x13
    1df0:	8b 89       	ldd	r24, Y+19	; 0x13
    1df2:	9c 89       	ldd	r25, Y+20	; 0x14
    1df4:	98 8b       	std	Y+16, r25	; 0x10
    1df6:	8f 87       	std	Y+15, r24	; 0x0f
    1df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfa:	98 89       	ldd	r25, Y+16	; 0x10
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_sendCommand+0x2ec>
    1e00:	98 8b       	std	Y+16, r25	; 0x10
    1e02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e04:	a8 e3       	ldi	r26, 0x38	; 56
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e8 e3       	ldi	r30, 0x38	; 56
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	87 7f       	andi	r24, 0xF7	; 247
    1e10:	8c 93       	st	X, r24
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a0 e8       	ldi	r26, 0x80	; 128
    1e18:	bf e3       	ldi	r27, 0x3F	; 63
    1e1a:	8b 87       	std	Y+11, r24	; 0x0b
    1e1c:	9c 87       	std	Y+12, r25	; 0x0c
    1e1e:	ad 87       	std	Y+13, r26	; 0x0d
    1e20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	4a e7       	ldi	r20, 0x7A	; 122
    1e30:	53 e4       	ldi	r21, 0x43	; 67
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	8f 83       	std	Y+7, r24	; 0x07
    1e3c:	98 87       	std	Y+8, r25	; 0x08
    1e3e:	a9 87       	std	Y+9, r26	; 0x09
    1e40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e8       	ldi	r20, 0x80	; 128
    1e50:	5f e3       	ldi	r21, 0x3F	; 63
    1e52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e56:	88 23       	and	r24, r24
    1e58:	2c f4       	brge	.+10     	; 0x1e64 <LCD_sendCommand+0x354>
		__ticks = 1;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
    1e62:	3f c0       	rjmp	.+126    	; 0x1ee2 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1e64:	6f 81       	ldd	r22, Y+7	; 0x07
    1e66:	78 85       	ldd	r23, Y+8	; 0x08
    1e68:	89 85       	ldd	r24, Y+9	; 0x09
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	3f ef       	ldi	r19, 0xFF	; 255
    1e70:	4f e7       	ldi	r20, 0x7F	; 127
    1e72:	57 e4       	ldi	r21, 0x47	; 71
    1e74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e78:	18 16       	cp	r1, r24
    1e7a:	4c f5       	brge	.+82     	; 0x1ece <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e2       	ldi	r20, 0x20	; 32
    1e8a:	51 e4       	ldi	r21, 0x41	; 65
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <LCD_sendCommand+0x3b4>
    1ea6:	89 e1       	ldi	r24, 0x19	; 25
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9c 83       	std	Y+4, r25	; 0x04
    1eac:	8b 83       	std	Y+3, r24	; 0x03
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <LCD_sendCommand+0x3a2>
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eba:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	69 f7       	brne	.-38     	; 0x1ea6 <LCD_sendCommand+0x396>
    1ecc:	14 c0       	rjmp	.+40     	; 0x1ef6 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_sendCommand+0x3de>
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ef6:	e9 96       	adiw	r28, 0x39	; 57
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	e9 97       	sbiw	r28, 0x39	; 57
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1f1e:	a8 e3       	ldi	r26, 0x38	; 56
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e8 e3       	ldi	r30, 0x38	; 56
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	82 60       	ori	r24, 0x02	; 2
    1f2a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1f2c:	a8 e3       	ldi	r26, 0x38	; 56
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e8 e3       	ldi	r30, 0x38	; 56
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	8b 7f       	andi	r24, 0xFB	; 251
    1f38:	8c 93       	st	X, r24
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 e8       	ldi	r26, 0x80	; 128
    1f40:	bf e3       	ldi	r27, 0x3F	; 63
    1f42:	8d ab       	std	Y+53, r24	; 0x35
    1f44:	9e ab       	std	Y+54, r25	; 0x36
    1f46:	af ab       	std	Y+55, r26	; 0x37
    1f48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f50:	98 ad       	ldd	r25, Y+56	; 0x38
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a e7       	ldi	r20, 0x7A	; 122
    1f58:	53 e4       	ldi	r21, 0x43	; 67
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	89 ab       	std	Y+49, r24	; 0x31
    1f64:	9a ab       	std	Y+50, r25	; 0x32
    1f66:	ab ab       	std	Y+51, r26	; 0x33
    1f68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f70:	9c a9       	ldd	r25, Y+52	; 0x34
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <LCD_displayCharacter+0x84>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	98 ab       	std	Y+48, r25	; 0x30
    1f88:	8f a7       	std	Y+47, r24	; 0x2f
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f90:	8b a9       	ldd	r24, Y+51	; 0x33
    1f92:	9c a9       	ldd	r25, Y+52	; 0x34
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fa8:	8f a9       	ldd	r24, Y+55	; 0x37
    1faa:	98 ad       	ldd	r25, Y+56	; 0x38
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	98 ab       	std	Y+48, r25	; 0x30
    1fca:	8f a7       	std	Y+47, r24	; 0x2f
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_displayCharacter+0xe4>
    1fce:	89 e1       	ldi	r24, 0x19	; 25
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9e a7       	std	Y+46, r25	; 0x2e
    1fd4:	8d a7       	std	Y+45, r24	; 0x2d
    1fd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_displayCharacter+0xd2>
    1fde:	9e a7       	std	Y+46, r25	; 0x2e
    1fe0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	98 ab       	std	Y+48, r25	; 0x30
    1fea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fee:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <LCD_displayCharacter+0xc6>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff8:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffa:	8b a9       	ldd	r24, Y+51	; 0x33
    1ffc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	98 ab       	std	Y+48, r25	; 0x30
    2008:	8f a7       	std	Y+47, r24	; 0x2f
    200a:	8f a5       	ldd	r24, Y+47	; 0x2f
    200c:	98 a9       	ldd	r25, Y+48	; 0x30
    200e:	9c a7       	std	Y+44, r25	; 0x2c
    2010:	8b a7       	std	Y+43, r24	; 0x2b
    2012:	8b a5       	ldd	r24, Y+43	; 0x2b
    2014:	9c a5       	ldd	r25, Y+44	; 0x2c
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <LCD_displayCharacter+0x10e>
    201a:	9c a7       	std	Y+44, r25	; 0x2c
    201c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    201e:	a8 e3       	ldi	r26, 0x38	; 56
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e8 e3       	ldi	r30, 0x38	; 56
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	88 60       	ori	r24, 0x08	; 8
    202a:	8c 93       	st	X, r24
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e8       	ldi	r26, 0x80	; 128
    2032:	bf e3       	ldi	r27, 0x3F	; 63
    2034:	8f a3       	std	Y+39, r24	; 0x27
    2036:	98 a7       	std	Y+40, r25	; 0x28
    2038:	a9 a7       	std	Y+41, r26	; 0x29
    203a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203c:	6f a1       	ldd	r22, Y+39	; 0x27
    203e:	78 a5       	ldd	r23, Y+40	; 0x28
    2040:	89 a5       	ldd	r24, Y+41	; 0x29
    2042:	9a a5       	ldd	r25, Y+42	; 0x2a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	4a e7       	ldi	r20, 0x7A	; 122
    204a:	53 e4       	ldi	r21, 0x43	; 67
    204c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	8b a3       	std	Y+35, r24	; 0x23
    2056:	9c a3       	std	Y+36, r25	; 0x24
    2058:	ad a3       	std	Y+37, r26	; 0x25
    205a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    205c:	6b a1       	ldd	r22, Y+35	; 0x23
    205e:	7c a1       	ldd	r23, Y+36	; 0x24
    2060:	8d a1       	ldd	r24, Y+37	; 0x25
    2062:	9e a1       	ldd	r25, Y+38	; 0x26
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2070:	88 23       	and	r24, r24
    2072:	2c f4       	brge	.+10     	; 0x207e <LCD_displayCharacter+0x176>
		__ticks = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9a a3       	std	Y+34, r25	; 0x22
    207a:	89 a3       	std	Y+33, r24	; 0x21
    207c:	3f c0       	rjmp	.+126    	; 0x20fc <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    207e:	6b a1       	ldd	r22, Y+35	; 0x23
    2080:	7c a1       	ldd	r23, Y+36	; 0x24
    2082:	8d a1       	ldd	r24, Y+37	; 0x25
    2084:	9e a1       	ldd	r25, Y+38	; 0x26
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2092:	18 16       	cp	r1, r24
    2094:	4c f5       	brge	.+82     	; 0x20e8 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2096:	6f a1       	ldd	r22, Y+39	; 0x27
    2098:	78 a5       	ldd	r23, Y+40	; 0x28
    209a:	89 a5       	ldd	r24, Y+41	; 0x29
    209c:	9a a5       	ldd	r25, Y+42	; 0x2a
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	51 e4       	ldi	r21, 0x41	; 65
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9a a3       	std	Y+34, r25	; 0x22
    20bc:	89 a3       	std	Y+33, r24	; 0x21
    20be:	0f c0       	rjmp	.+30     	; 0x20de <LCD_displayCharacter+0x1d6>
    20c0:	89 e1       	ldi	r24, 0x19	; 25
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	98 a3       	std	Y+32, r25	; 0x20
    20c6:	8f 8f       	std	Y+31, r24	; 0x1f
    20c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ca:	98 a1       	ldd	r25, Y+32	; 0x20
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_displayCharacter+0x1c4>
    20d0:	98 a3       	std	Y+32, r25	; 0x20
    20d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d4:	89 a1       	ldd	r24, Y+33	; 0x21
    20d6:	9a a1       	ldd	r25, Y+34	; 0x22
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	9a a3       	std	Y+34, r25	; 0x22
    20dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20de:	89 a1       	ldd	r24, Y+33	; 0x21
    20e0:	9a a1       	ldd	r25, Y+34	; 0x22
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	69 f7       	brne	.-38     	; 0x20c0 <LCD_displayCharacter+0x1b8>
    20e6:	14 c0       	rjmp	.+40     	; 0x2110 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e8:	6b a1       	ldd	r22, Y+35	; 0x23
    20ea:	7c a1       	ldd	r23, Y+36	; 0x24
    20ec:	8d a1       	ldd	r24, Y+37	; 0x25
    20ee:	9e a1       	ldd	r25, Y+38	; 0x26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9a a3       	std	Y+34, r25	; 0x22
    20fa:	89 a3       	std	Y+33, r24	; 0x21
    20fc:	89 a1       	ldd	r24, Y+33	; 0x21
    20fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2100:	9e 8f       	std	Y+30, r25	; 0x1e
    2102:	8d 8f       	std	Y+29, r24	; 0x1d
    2104:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2106:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_displayCharacter+0x200>
    210c:	9e 8f       	std	Y+30, r25	; 0x1e
    210e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    2110:	eb e3       	ldi	r30, 0x3B	; 59
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	89 ad       	ldd	r24, Y+57	; 0x39
    2116:	80 83       	st	Z, r24
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e8       	ldi	r26, 0x80	; 128
    211e:	bf e3       	ldi	r27, 0x3F	; 63
    2120:	89 8f       	std	Y+25, r24	; 0x19
    2122:	9a 8f       	std	Y+26, r25	; 0x1a
    2124:	ab 8f       	std	Y+27, r26	; 0x1b
    2126:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	69 8d       	ldd	r22, Y+25	; 0x19
    212a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a e7       	ldi	r20, 0x7A	; 122
    2136:	53 e4       	ldi	r21, 0x43	; 67
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8d 8b       	std	Y+21, r24	; 0x15
    2142:	9e 8b       	std	Y+22, r25	; 0x16
    2144:	af 8b       	std	Y+23, r26	; 0x17
    2146:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2148:	6d 89       	ldd	r22, Y+21	; 0x15
    214a:	7e 89       	ldd	r23, Y+22	; 0x16
    214c:	8f 89       	ldd	r24, Y+23	; 0x17
    214e:	98 8d       	ldd	r25, Y+24	; 0x18
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <LCD_displayCharacter+0x262>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 8b       	std	Y+20, r25	; 0x14
    2166:	8b 8b       	std	Y+19, r24	; 0x13
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	69 8d       	ldd	r22, Y+25	; 0x19
    2184:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <LCD_displayCharacter+0x2c2>
    21ac:	89 e1       	ldi	r24, 0x19	; 25
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9a 8b       	std	Y+18, r25	; 0x12
    21b2:	89 8b       	std	Y+17, r24	; 0x11
    21b4:	89 89       	ldd	r24, Y+17	; 0x11
    21b6:	9a 89       	ldd	r25, Y+18	; 0x12
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_displayCharacter+0x2b0>
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8b 89       	ldd	r24, Y+19	; 0x13
    21c2:	9c 89       	ldd	r25, Y+20	; 0x14
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <LCD_displayCharacter+0x2a4>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9c 8b       	std	Y+20, r25	; 0x14
    21e6:	8b 8b       	std	Y+19, r24	; 0x13
    21e8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ea:	9c 89       	ldd	r25, Y+20	; 0x14
    21ec:	98 8b       	std	Y+16, r25	; 0x10
    21ee:	8f 87       	std	Y+15, r24	; 0x0f
    21f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f2:	98 89       	ldd	r25, Y+16	; 0x10
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_displayCharacter+0x2ec>
    21f8:	98 8b       	std	Y+16, r25	; 0x10
    21fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    21fc:	a8 e3       	ldi	r26, 0x38	; 56
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e8 e3       	ldi	r30, 0x38	; 56
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	87 7f       	andi	r24, 0xF7	; 247
    2208:	8c 93       	st	X, r24
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a0 e8       	ldi	r26, 0x80	; 128
    2210:	bf e3       	ldi	r27, 0x3F	; 63
    2212:	8b 87       	std	Y+11, r24	; 0x0b
    2214:	9c 87       	std	Y+12, r25	; 0x0c
    2216:	ad 87       	std	Y+13, r26	; 0x0d
    2218:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221a:	6b 85       	ldd	r22, Y+11	; 0x0b
    221c:	7c 85       	ldd	r23, Y+12	; 0x0c
    221e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2220:	9e 85       	ldd	r25, Y+14	; 0x0e
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a e7       	ldi	r20, 0x7A	; 122
    2228:	53 e4       	ldi	r21, 0x43	; 67
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	8f 83       	std	Y+7, r24	; 0x07
    2234:	98 87       	std	Y+8, r25	; 0x08
    2236:	a9 87       	std	Y+9, r26	; 0x09
    2238:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224e:	88 23       	and	r24, r24
    2250:	2c f4       	brge	.+10     	; 0x225c <LCD_displayCharacter+0x354>
		__ticks = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9e 83       	std	Y+6, r25	; 0x06
    2258:	8d 83       	std	Y+5, r24	; 0x05
    225a:	3f c0       	rjmp	.+126    	; 0x22da <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    225c:	6f 81       	ldd	r22, Y+7	; 0x07
    225e:	78 85       	ldd	r23, Y+8	; 0x08
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	4c f5       	brge	.+82     	; 0x22c6 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2274:	6b 85       	ldd	r22, Y+11	; 0x0b
    2276:	7c 85       	ldd	r23, Y+12	; 0x0c
    2278:	8d 85       	ldd	r24, Y+13	; 0x0d
    227a:	9e 85       	ldd	r25, Y+14	; 0x0e
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e2       	ldi	r20, 0x20	; 32
    2282:	51 e4       	ldi	r21, 0x41	; 65
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <LCD_displayCharacter+0x3b4>
    229e:	89 e1       	ldi	r24, 0x19	; 25
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_displayCharacter+0x3a2>
    22ae:	9c 83       	std	Y+4, r25	; 0x04
    22b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	69 f7       	brne	.-38     	; 0x229e <LCD_displayCharacter+0x396>
    22c4:	14 c0       	rjmp	.+40     	; 0x22ee <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	9e 81       	ldd	r25, Y+6	; 0x06
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	9a 81       	ldd	r25, Y+2	; 0x02
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <LCD_displayCharacter+0x3de>
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    22ee:	e9 96       	adiw	r28, 0x39	; 57
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <LCD_displayString+0x6>
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	9b 83       	std	Y+3, r25	; 0x03
    230e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2310:	19 82       	std	Y+1, r1	; 0x01
    2312:	0e c0       	rjmp	.+28     	; 0x2330 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	fc 01       	movw	r30, r24
    2320:	e2 0f       	add	r30, r18
    2322:	f3 1f       	adc	r31, r19
    2324:	80 81       	ld	r24, Z
    2326:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <LCD_displayCharacter>
		i++;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	8f 5f       	subi	r24, 0xFF	; 255
    232e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	fc 01       	movw	r30, r24
    233c:	e2 0f       	add	r30, r18
    233e:	f3 1f       	adc	r31, r19
    2340:	80 81       	ld	r24, Z
    2342:	88 23       	and	r24, r24
    2344:	39 f7       	brne	.-50     	; 0x2314 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	00 d0       	rcall	.+0      	; 0x2358 <LCD_goToRowColumn+0x6>
    2358:	00 d0       	rcall	.+0      	; 0x235a <LCD_goToRowColumn+0x8>
    235a:	0f 92       	push	r0
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	8a 83       	std	Y+2, r24	; 0x02
    2362:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	3d 83       	std	Y+5, r19	; 0x05
    236c:	2c 83       	std	Y+4, r18	; 0x04
    236e:	8c 81       	ldd	r24, Y+4	; 0x04
    2370:	9d 81       	ldd	r25, Y+5	; 0x05
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	91 05       	cpc	r25, r1
    2376:	c1 f0       	breq	.+48     	; 0x23a8 <LCD_goToRowColumn+0x56>
    2378:	2c 81       	ldd	r18, Y+4	; 0x04
    237a:	3d 81       	ldd	r19, Y+5	; 0x05
    237c:	22 30       	cpi	r18, 0x02	; 2
    237e:	31 05       	cpc	r19, r1
    2380:	2c f4       	brge	.+10     	; 0x238c <LCD_goToRowColumn+0x3a>
    2382:	8c 81       	ldd	r24, Y+4	; 0x04
    2384:	9d 81       	ldd	r25, Y+5	; 0x05
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	61 f0       	breq	.+24     	; 0x23a2 <LCD_goToRowColumn+0x50>
    238a:	19 c0       	rjmp	.+50     	; 0x23be <LCD_goToRowColumn+0x6c>
    238c:	2c 81       	ldd	r18, Y+4	; 0x04
    238e:	3d 81       	ldd	r19, Y+5	; 0x05
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	31 05       	cpc	r19, r1
    2394:	69 f0       	breq	.+26     	; 0x23b0 <LCD_goToRowColumn+0x5e>
    2396:	8c 81       	ldd	r24, Y+4	; 0x04
    2398:	9d 81       	ldd	r25, Y+5	; 0x05
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	91 05       	cpc	r25, r1
    239e:	61 f0       	breq	.+24     	; 0x23b8 <LCD_goToRowColumn+0x66>
    23a0:	0e c0       	rjmp	.+28     	; 0x23be <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	0b c0       	rjmp	.+22     	; 0x23be <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	80 5c       	subi	r24, 0xC0	; 192
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	07 c0       	rjmp	.+14     	; 0x23be <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	80 5f       	subi	r24, 0xF0	; 240
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	03 c0       	rjmp	.+6      	; 0x23be <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	80 5b       	subi	r24, 0xB0	; 176
    23bc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	80 68       	ori	r24, 0x80	; 128
    23c2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_sendCommand>
}
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	00 d0       	rcall	.+0      	; 0x23dc <LCD_displayStringRowColumn+0x6>
    23dc:	00 d0       	rcall	.+0      	; 0x23de <LCD_displayStringRowColumn+0x8>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	6a 83       	std	Y+2, r22	; 0x02
    23e6:	5c 83       	std	Y+4, r21	; 0x04
    23e8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	6a 81       	ldd	r22, Y+2	; 0x02
    23ee:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	0e 94 80 11 	call	0x2300	; 0x2300 <LCD_displayString>
}
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	62 97       	sbiw	r28, 0x12	; 18
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	9a 8b       	std	Y+18, r25	; 0x12
    241e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2420:	89 89       	ldd	r24, Y+17	; 0x11
    2422:	9a 89       	ldd	r25, Y+18	; 0x12
    2424:	9e 01       	movw	r18, r28
    2426:	2f 5f       	subi	r18, 0xFF	; 255
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	b9 01       	movw	r22, r18
    242c:	4a e0       	ldi	r20, 0x0A	; 10
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <itoa>
   LCD_displayString(buff);
    2434:	ce 01       	movw	r24, r28
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	0e 94 80 11 	call	0x2300	; 0x2300 <LCD_displayString>
}
    243c:	62 96       	adiw	r28, 0x12	; 18
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_sendCommand>
}
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	08 95       	ret

00002462 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2462:	1f 92       	push	r1
    2464:	0f 92       	push	r0
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	0f 92       	push	r0
    246a:	11 24       	eor	r1, r1
    246c:	2f 93       	push	r18
    246e:	3f 93       	push	r19
    2470:	4f 93       	push	r20
    2472:	5f 93       	push	r21
    2474:	6f 93       	push	r22
    2476:	7f 93       	push	r23
    2478:	8f 93       	push	r24
    247a:	9f 93       	push	r25
    247c:	af 93       	push	r26
    247e:	bf 93       	push	r27
    2480:	ef 93       	push	r30
    2482:	ff 93       	push	r31
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0callBackPtr != NULL_PTR)
    248c:	80 91 73 00 	lds	r24, 0x0073
    2490:	90 91 74 00 	lds	r25, 0x0074
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	29 f0       	breq	.+10     	; 0x24a2 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_Timer0callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2498:	e0 91 73 00 	lds	r30, 0x0073
    249c:	f0 91 74 00 	lds	r31, 0x0074
    24a0:	09 95       	icall
	}
}
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	ff 91       	pop	r31
    24a8:	ef 91       	pop	r30
    24aa:	bf 91       	pop	r27
    24ac:	af 91       	pop	r26
    24ae:	9f 91       	pop	r25
    24b0:	8f 91       	pop	r24
    24b2:	7f 91       	pop	r23
    24b4:	6f 91       	pop	r22
    24b6:	5f 91       	pop	r21
    24b8:	4f 91       	pop	r20
    24ba:	3f 91       	pop	r19
    24bc:	2f 91       	pop	r18
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	0f 90       	pop	r0
    24c4:	1f 90       	pop	r1
    24c6:	18 95       	reti

000024c8 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    24c8:	1f 92       	push	r1
    24ca:	0f 92       	push	r0
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	0f 92       	push	r0
    24d0:	11 24       	eor	r1, r1
    24d2:	2f 93       	push	r18
    24d4:	3f 93       	push	r19
    24d6:	4f 93       	push	r20
    24d8:	5f 93       	push	r21
    24da:	6f 93       	push	r22
    24dc:	7f 93       	push	r23
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0callBackPtr != NULL_PTR)
    24f2:	80 91 73 00 	lds	r24, 0x0073
    24f6:	90 91 74 00 	lds	r25, 0x0074
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	29 f0       	breq	.+10     	; 0x2508 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer0callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    24fe:	e0 91 73 00 	lds	r30, 0x0073
    2502:	f0 91 74 00 	lds	r31, 0x0074
    2506:	09 95       	icall
	}
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	ff 91       	pop	r31
    250e:	ef 91       	pop	r30
    2510:	bf 91       	pop	r27
    2512:	af 91       	pop	r26
    2514:	9f 91       	pop	r25
    2516:	8f 91       	pop	r24
    2518:	7f 91       	pop	r23
    251a:	6f 91       	pop	r22
    251c:	5f 91       	pop	r21
    251e:	4f 91       	pop	r20
    2520:	3f 91       	pop	r19
    2522:	2f 91       	pop	r18
    2524:	0f 90       	pop	r0
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	0f 90       	pop	r0
    252a:	1f 90       	pop	r1
    252c:	18 95       	reti

0000252e <__vector_8>:


ISR(TIMER1_OVF_vect)
{
    252e:	1f 92       	push	r1
    2530:	0f 92       	push	r0
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	0f 92       	push	r0
    2536:	11 24       	eor	r1, r1
    2538:	2f 93       	push	r18
    253a:	3f 93       	push	r19
    253c:	4f 93       	push	r20
    253e:	5f 93       	push	r21
    2540:	6f 93       	push	r22
    2542:	7f 93       	push	r23
    2544:	8f 93       	push	r24
    2546:	9f 93       	push	r25
    2548:	af 93       	push	r26
    254a:	bf 93       	push	r27
    254c:	ef 93       	push	r30
    254e:	ff 93       	push	r31
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer1callBackPtr != NULL_PTR)
    2558:	80 91 75 00 	lds	r24, 0x0075
    255c:	90 91 76 00 	lds	r25, 0x0076
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	29 f0       	breq	.+10     	; 0x256e <__vector_8+0x40>
	{

		/* Call the Call Back function in the application after the overflow is detected */
		(*g_Timer1callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2564:	e0 91 75 00 	lds	r30, 0x0075
    2568:	f0 91 76 00 	lds	r31, 0x0076
    256c:	09 95       	icall
	}
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	ff 91       	pop	r31
    2574:	ef 91       	pop	r30
    2576:	bf 91       	pop	r27
    2578:	af 91       	pop	r26
    257a:	9f 91       	pop	r25
    257c:	8f 91       	pop	r24
    257e:	7f 91       	pop	r23
    2580:	6f 91       	pop	r22
    2582:	5f 91       	pop	r21
    2584:	4f 91       	pop	r20
    2586:	3f 91       	pop	r19
    2588:	2f 91       	pop	r18
    258a:	0f 90       	pop	r0
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	0f 90       	pop	r0
    2590:	1f 90       	pop	r1
    2592:	18 95       	reti

00002594 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    2594:	1f 92       	push	r1
    2596:	0f 92       	push	r0
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	0f 92       	push	r0
    259c:	11 24       	eor	r1, r1
    259e:	2f 93       	push	r18
    25a0:	3f 93       	push	r19
    25a2:	4f 93       	push	r20
    25a4:	5f 93       	push	r21
    25a6:	6f 93       	push	r22
    25a8:	7f 93       	push	r23
    25aa:	8f 93       	push	r24
    25ac:	9f 93       	push	r25
    25ae:	af 93       	push	r26
    25b0:	bf 93       	push	r27
    25b2:	ef 93       	push	r30
    25b4:	ff 93       	push	r31
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1callBackPtr != NULL_PTR)
    25be:	80 91 75 00 	lds	r24, 0x0075
    25c2:	90 91 76 00 	lds	r25, 0x0076
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	29 f0       	breq	.+10     	; 0x25d4 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer1callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25ca:	e0 91 75 00 	lds	r30, 0x0075
    25ce:	f0 91 76 00 	lds	r31, 0x0076
    25d2:	09 95       	icall
	}
}
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	ff 91       	pop	r31
    25da:	ef 91       	pop	r30
    25dc:	bf 91       	pop	r27
    25de:	af 91       	pop	r26
    25e0:	9f 91       	pop	r25
    25e2:	8f 91       	pop	r24
    25e4:	7f 91       	pop	r23
    25e6:	6f 91       	pop	r22
    25e8:	5f 91       	pop	r21
    25ea:	4f 91       	pop	r20
    25ec:	3f 91       	pop	r19
    25ee:	2f 91       	pop	r18
    25f0:	0f 90       	pop	r0
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	0f 90       	pop	r0
    25f6:	1f 90       	pop	r1
    25f8:	18 95       	reti

000025fa <__vector_7>:


ISR(TIMER1_COMPB_vect)
{
    25fa:	1f 92       	push	r1
    25fc:	0f 92       	push	r0
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	0f 92       	push	r0
    2602:	11 24       	eor	r1, r1
    2604:	2f 93       	push	r18
    2606:	3f 93       	push	r19
    2608:	4f 93       	push	r20
    260a:	5f 93       	push	r21
    260c:	6f 93       	push	r22
    260e:	7f 93       	push	r23
    2610:	8f 93       	push	r24
    2612:	9f 93       	push	r25
    2614:	af 93       	push	r26
    2616:	bf 93       	push	r27
    2618:	ef 93       	push	r30
    261a:	ff 93       	push	r31
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1callBackPtr != NULL_PTR)
    2624:	80 91 75 00 	lds	r24, 0x0075
    2628:	90 91 76 00 	lds	r25, 0x0076
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	29 f0       	breq	.+10     	; 0x263a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer1callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2630:	e0 91 75 00 	lds	r30, 0x0075
    2634:	f0 91 76 00 	lds	r31, 0x0076
    2638:	09 95       	icall
	}
}
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	ff 91       	pop	r31
    2640:	ef 91       	pop	r30
    2642:	bf 91       	pop	r27
    2644:	af 91       	pop	r26
    2646:	9f 91       	pop	r25
    2648:	8f 91       	pop	r24
    264a:	7f 91       	pop	r23
    264c:	6f 91       	pop	r22
    264e:	5f 91       	pop	r21
    2650:	4f 91       	pop	r20
    2652:	3f 91       	pop	r19
    2654:	2f 91       	pop	r18
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	0f 90       	pop	r0
    265c:	1f 90       	pop	r1
    265e:	18 95       	reti

00002660 <__vector_4>:


ISR(TIMER2_OVF_vect)
{
    2660:	1f 92       	push	r1
    2662:	0f 92       	push	r0
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	0f 92       	push	r0
    2668:	11 24       	eor	r1, r1
    266a:	2f 93       	push	r18
    266c:	3f 93       	push	r19
    266e:	4f 93       	push	r20
    2670:	5f 93       	push	r21
    2672:	6f 93       	push	r22
    2674:	7f 93       	push	r23
    2676:	8f 93       	push	r24
    2678:	9f 93       	push	r25
    267a:	af 93       	push	r26
    267c:	bf 93       	push	r27
    267e:	ef 93       	push	r30
    2680:	ff 93       	push	r31
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2callBackPtr != NULL_PTR)
    268a:	80 91 77 00 	lds	r24, 0x0077
    268e:	90 91 78 00 	lds	r25, 0x0078
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	29 f0       	breq	.+10     	; 0x26a0 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_Timer2callBackPtr)(); /* another method to call the function using pointer to function g_Timer2callBackPtr(); */
    2696:	e0 91 77 00 	lds	r30, 0x0077
    269a:	f0 91 78 00 	lds	r31, 0x0078
    269e:	09 95       	icall
	}
}
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	ff 91       	pop	r31
    26a6:	ef 91       	pop	r30
    26a8:	bf 91       	pop	r27
    26aa:	af 91       	pop	r26
    26ac:	9f 91       	pop	r25
    26ae:	8f 91       	pop	r24
    26b0:	7f 91       	pop	r23
    26b2:	6f 91       	pop	r22
    26b4:	5f 91       	pop	r21
    26b6:	4f 91       	pop	r20
    26b8:	3f 91       	pop	r19
    26ba:	2f 91       	pop	r18
    26bc:	0f 90       	pop	r0
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	0f 90       	pop	r0
    26c2:	1f 90       	pop	r1
    26c4:	18 95       	reti

000026c6 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    26c6:	1f 92       	push	r1
    26c8:	0f 92       	push	r0
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	0f 92       	push	r0
    26ce:	11 24       	eor	r1, r1
    26d0:	2f 93       	push	r18
    26d2:	3f 93       	push	r19
    26d4:	4f 93       	push	r20
    26d6:	5f 93       	push	r21
    26d8:	6f 93       	push	r22
    26da:	7f 93       	push	r23
    26dc:	8f 93       	push	r24
    26de:	9f 93       	push	r25
    26e0:	af 93       	push	r26
    26e2:	bf 93       	push	r27
    26e4:	ef 93       	push	r30
    26e6:	ff 93       	push	r31
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2callBackPtr != NULL_PTR)
    26f0:	80 91 77 00 	lds	r24, 0x0077
    26f4:	90 91 78 00 	lds	r25, 0x0078
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	29 f0       	breq	.+10     	; 0x2706 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer2callBackPtr)(); /* another method to call the function using pointer to function g_Timer2callBackPtr(); */
    26fc:	e0 91 77 00 	lds	r30, 0x0077
    2700:	f0 91 78 00 	lds	r31, 0x0078
    2704:	09 95       	icall
	}
}
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	ff 91       	pop	r31
    270c:	ef 91       	pop	r30
    270e:	bf 91       	pop	r27
    2710:	af 91       	pop	r26
    2712:	9f 91       	pop	r25
    2714:	8f 91       	pop	r24
    2716:	7f 91       	pop	r23
    2718:	6f 91       	pop	r22
    271a:	5f 91       	pop	r21
    271c:	4f 91       	pop	r20
    271e:	3f 91       	pop	r19
    2720:	2f 91       	pop	r18
    2722:	0f 90       	pop	r0
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	0f 90       	pop	r0
    2728:	1f 90       	pop	r1
    272a:	18 95       	reti

0000272c <Timer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	00 d0       	rcall	.+0      	; 0x2732 <Timer_init+0x6>
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	9a 83       	std	Y+2, r25	; 0x02
    2738:	89 83       	std	Y+1, r24	; 0x01
	/* Saves timer_number in global variable */
	g_timer_number = Config_Ptr->timer_number;
    273a:	e9 81       	ldd	r30, Y+1	; 0x01
    273c:	fa 81       	ldd	r31, Y+2	; 0x02
    273e:	86 81       	ldd	r24, Z+6	; 0x06
    2740:	80 93 80 00 	sts	0x0080, r24

	/* Adjust bits of timer0 */
	if(g_timer_number == Timer0)
    2744:	80 91 80 00 	lds	r24, 0x0080
    2748:	88 23       	and	r24, r24
    274a:	09 f0       	breq	.+2      	; 0x274e <Timer_init+0x22>
    274c:	74 c0       	rjmp	.+232    	; 0x2836 <Timer_init+0x10a>
	{
		/* Non PWM Mode */
		TCCR0 = (1<<FOC0);
    274e:	e3 e5       	ldi	r30, 0x53	; 83
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 e8       	ldi	r24, 0x80	; 128
    2754:	80 83       	st	Z, r24

		/* Set Timer initial value */
		TCNT0 = Config_Ptr->initial_value;
    2756:	a2 e5       	ldi	r26, 0x52	; 82
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e9 81       	ldd	r30, Y+1	; 0x01
    275c:	fa 81       	ldd	r31, Y+2	; 0x02
    275e:	81 81       	ldd	r24, Z+1	; 0x01
    2760:	92 81       	ldd	r25, Z+2	; 0x02
    2762:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL)
    2764:	e9 81       	ldd	r30, Y+1	; 0x01
    2766:	fa 81       	ldd	r31, Y+2	; 0x02
    2768:	80 81       	ld	r24, Z
    276a:	88 23       	and	r24, r24
    276c:	41 f4       	brne	.+16     	; 0x277e <Timer_init+0x52>
		{
			/* Enable Timer0 Overflow Interrupt */
			TIMSK |= (1<<TOIE0);
    276e:	a9 e5       	ldi	r26, 0x59	; 89
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e9 e5       	ldi	r30, 0x59	; 89
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	81 60       	ori	r24, 0x01	; 1
    277a:	8c 93       	st	X, r24
    277c:	1a c0       	rjmp	.+52     	; 0x27b2 <Timer_init+0x86>
		}
		else if(Config_Ptr->mode == COMPARE)
    277e:	e9 81       	ldd	r30, Y+1	; 0x01
    2780:	fa 81       	ldd	r31, Y+2	; 0x02
    2782:	80 81       	ld	r24, Z
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	a9 f4       	brne	.+42     	; 0x27b2 <Timer_init+0x86>
		{
			/* CTC Mode WGM01=1 & WGM00=0 */
			TCCR0 |= (1<<WGM01);
    2788:	a3 e5       	ldi	r26, 0x53	; 83
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e3 e5       	ldi	r30, 0x53	; 83
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	88 60       	ori	r24, 0x08	; 8
    2794:	8c 93       	st	X, r24

			/* Set Compare Value */
			OCR0 = Config_Ptr->compare_value;
    2796:	ac e5       	ldi	r26, 0x5C	; 92
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e9 81       	ldd	r30, Y+1	; 0x01
    279c:	fa 81       	ldd	r31, Y+2	; 0x02
    279e:	84 81       	ldd	r24, Z+4	; 0x04
    27a0:	95 81       	ldd	r25, Z+5	; 0x05
    27a2:	8c 93       	st	X, r24

			/* Enable Timer0 Compare Interrupt */
			TIMSK |= (1<<OCIE0);
    27a4:	a9 e5       	ldi	r26, 0x59	; 89
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e9 e5       	ldi	r30, 0x59	; 89
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	82 60       	ori	r24, 0x02	; 2
    27b0:	8c 93       	st	X, r24
		}

		/* adjust clock mode */
		if(Config_Ptr->clock == F_CPU_CLOCK)
    27b2:	e9 81       	ldd	r30, Y+1	; 0x01
    27b4:	fa 81       	ldd	r31, Y+2	; 0x02
    27b6:	83 81       	ldd	r24, Z+3	; 0x03
    27b8:	81 30       	cpi	r24, 0x01	; 1
    27ba:	41 f4       	brne	.+16     	; 0x27cc <Timer_init+0xa0>
		{
			TCCR0 |= (1<<CS00);
    27bc:	a3 e5       	ldi	r26, 0x53	; 83
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e3 e5       	ldi	r30, 0x53	; 83
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	81 60       	ori	r24, 0x01	; 1
    27c8:	8c 93       	st	X, r24
    27ca:	50 c1       	rjmp	.+672    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_8)
    27cc:	e9 81       	ldd	r30, Y+1	; 0x01
    27ce:	fa 81       	ldd	r31, Y+2	; 0x02
    27d0:	83 81       	ldd	r24, Z+3	; 0x03
    27d2:	82 30       	cpi	r24, 0x02	; 2
    27d4:	41 f4       	brne	.+16     	; 0x27e6 <Timer_init+0xba>
		{
			TCCR0 |= (1<<CS01);
    27d6:	a3 e5       	ldi	r26, 0x53	; 83
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e3 e5       	ldi	r30, 0x53	; 83
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	82 60       	ori	r24, 0x02	; 2
    27e2:	8c 93       	st	X, r24
    27e4:	43 c1       	rjmp	.+646    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_64)
    27e6:	e9 81       	ldd	r30, Y+1	; 0x01
    27e8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ea:	83 81       	ldd	r24, Z+3	; 0x03
    27ec:	84 30       	cpi	r24, 0x04	; 4
    27ee:	41 f4       	brne	.+16     	; 0x2800 <Timer_init+0xd4>
		{
			TCCR0 |= (1<<CS00) | (1<<CS01);
    27f0:	a3 e5       	ldi	r26, 0x53	; 83
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e3 e5       	ldi	r30, 0x53	; 83
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	83 60       	ori	r24, 0x03	; 3
    27fc:	8c 93       	st	X, r24
    27fe:	36 c1       	rjmp	.+620    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_256)
    2800:	e9 81       	ldd	r30, Y+1	; 0x01
    2802:	fa 81       	ldd	r31, Y+2	; 0x02
    2804:	83 81       	ldd	r24, Z+3	; 0x03
    2806:	85 30       	cpi	r24, 0x05	; 5
    2808:	41 f4       	brne	.+16     	; 0x281a <Timer_init+0xee>
		{
			TCCR0 |= (1<<CS02);
    280a:	a3 e5       	ldi	r26, 0x53	; 83
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	e3 e5       	ldi	r30, 0x53	; 83
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	84 60       	ori	r24, 0x04	; 4
    2816:	8c 93       	st	X, r24
    2818:	29 c1       	rjmp	.+594    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_1024)
    281a:	e9 81       	ldd	r30, Y+1	; 0x01
    281c:	fa 81       	ldd	r31, Y+2	; 0x02
    281e:	83 81       	ldd	r24, Z+3	; 0x03
    2820:	86 30       	cpi	r24, 0x06	; 6
    2822:	09 f0       	breq	.+2      	; 0x2826 <Timer_init+0xfa>
    2824:	23 c1       	rjmp	.+582    	; 0x2a6c <Timer_init+0x340>
		{
			TCCR0 |= (1<<CS00) | (1<<CS02);
    2826:	a3 e5       	ldi	r26, 0x53	; 83
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	e3 e5       	ldi	r30, 0x53	; 83
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	85 60       	ori	r24, 0x05	; 5
    2832:	8c 93       	st	X, r24
    2834:	1b c1       	rjmp	.+566    	; 0x2a6c <Timer_init+0x340>
		}
	}
	else if(g_timer_number == Timer1)
    2836:	80 91 80 00 	lds	r24, 0x0080
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	09 f0       	breq	.+2      	; 0x2840 <Timer_init+0x114>
    283e:	92 c0       	rjmp	.+292    	; 0x2964 <Timer_init+0x238>
	{
		/* Non PWM Mode */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2840:	ef e4       	ldi	r30, 0x4F	; 79
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	8c e0       	ldi	r24, 0x0C	; 12
    2846:	80 83       	st	Z, r24

		/* Set Timer initial value */
		TCNT1 = Config_Ptr->initial_value;
    2848:	ac e4       	ldi	r26, 0x4C	; 76
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e9 81       	ldd	r30, Y+1	; 0x01
    284e:	fa 81       	ldd	r31, Y+2	; 0x02
    2850:	81 81       	ldd	r24, Z+1	; 0x01
    2852:	92 81       	ldd	r25, Z+2	; 0x02
    2854:	11 96       	adiw	r26, 0x01	; 1
    2856:	9c 93       	st	X, r25
    2858:	8e 93       	st	-X, r24

		if(Config_Ptr->mode == NORMAL)
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	80 81       	ld	r24, Z
    2860:	88 23       	and	r24, r24
    2862:	59 f4       	brne	.+22     	; 0x287a <Timer_init+0x14e>
		{
			TCCR1B = 0;
    2864:	ee e4       	ldi	r30, 0x4E	; 78
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	10 82       	st	Z, r1

			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1<<TOIE1);
    286a:	a9 e5       	ldi	r26, 0x59	; 89
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e9 e5       	ldi	r30, 0x59	; 89
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	84 60       	ori	r24, 0x04	; 4
    2876:	8c 93       	st	X, r24
    2878:	33 c0       	rjmp	.+102    	; 0x28e0 <Timer_init+0x1b4>
		}
		else if(Config_Ptr->mode == COMPAREA)
    287a:	e9 81       	ldd	r30, Y+1	; 0x01
    287c:	fa 81       	ldd	r31, Y+2	; 0x02
    287e:	80 81       	ld	r24, Z
    2880:	82 30       	cpi	r24, 0x02	; 2
    2882:	a9 f4       	brne	.+42     	; 0x28ae <Timer_init+0x182>
		{
			/*  CTC Mode WGM12=1 WGM13=0 (Mode Number 4) */
			TCCR1B = (1<<WGM12);
    2884:	ee e4       	ldi	r30, 0x4E	; 78
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	88 e0       	ldi	r24, 0x08	; 8
    288a:	80 83       	st	Z, r24

			/* Set Compare Value */
			OCR1A = Config_Ptr->compare_value;
    288c:	aa e4       	ldi	r26, 0x4A	; 74
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	e9 81       	ldd	r30, Y+1	; 0x01
    2892:	fa 81       	ldd	r31, Y+2	; 0x02
    2894:	84 81       	ldd	r24, Z+4	; 0x04
    2896:	95 81       	ldd	r25, Z+5	; 0x05
    2898:	11 96       	adiw	r26, 0x01	; 1
    289a:	9c 93       	st	X, r25
    289c:	8e 93       	st	-X, r24

			/* Enable Timer1 Compare A Interrupt */
			TIMSK |= (1<<OCIE1A);
    289e:	a9 e5       	ldi	r26, 0x59	; 89
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e9 e5       	ldi	r30, 0x59	; 89
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	80 61       	ori	r24, 0x10	; 16
    28aa:	8c 93       	st	X, r24
    28ac:	19 c0       	rjmp	.+50     	; 0x28e0 <Timer_init+0x1b4>
		}
		else if(Config_Ptr->mode == COMPAREB)
    28ae:	e9 81       	ldd	r30, Y+1	; 0x01
    28b0:	fa 81       	ldd	r31, Y+2	; 0x02
    28b2:	80 81       	ld	r24, Z
    28b4:	83 30       	cpi	r24, 0x03	; 3
    28b6:	a1 f4       	brne	.+40     	; 0x28e0 <Timer_init+0x1b4>
		{
			/*  CTC Mode WGM12=1 WGM13=1 (Mode Number 12) */
			TCCR1B = (1<<WGM12) | (1<<WGM13);
    28b8:	ee e4       	ldi	r30, 0x4E	; 78
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	88 e1       	ldi	r24, 0x18	; 24
    28be:	80 83       	st	Z, r24

			/* Set Compare Value */
			OCR1B = Config_Ptr->compare_value;
    28c0:	a8 e4       	ldi	r26, 0x48	; 72
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	84 81       	ldd	r24, Z+4	; 0x04
    28ca:	95 81       	ldd	r25, Z+5	; 0x05
    28cc:	11 96       	adiw	r26, 0x01	; 1
    28ce:	9c 93       	st	X, r25
    28d0:	8e 93       	st	-X, r24

			/* Enable Timer1 Compare B Interrupt */
			TIMSK |= (1<<OCIE1B);
    28d2:	a9 e5       	ldi	r26, 0x59	; 89
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	e9 e5       	ldi	r30, 0x59	; 89
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	88 60       	ori	r24, 0x08	; 8
    28de:	8c 93       	st	X, r24
		}

		/* adjust clock mode */
		if(Config_Ptr->clock == F_CPU_CLOCK)
    28e0:	e9 81       	ldd	r30, Y+1	; 0x01
    28e2:	fa 81       	ldd	r31, Y+2	; 0x02
    28e4:	83 81       	ldd	r24, Z+3	; 0x03
    28e6:	81 30       	cpi	r24, 0x01	; 1
    28e8:	41 f4       	brne	.+16     	; 0x28fa <Timer_init+0x1ce>
		{
			TCCR1B |= (1<<CS10);
    28ea:	ae e4       	ldi	r26, 0x4E	; 78
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	ee e4       	ldi	r30, 0x4E	; 78
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	81 60       	ori	r24, 0x01	; 1
    28f6:	8c 93       	st	X, r24
    28f8:	b9 c0       	rjmp	.+370    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_8)
    28fa:	e9 81       	ldd	r30, Y+1	; 0x01
    28fc:	fa 81       	ldd	r31, Y+2	; 0x02
    28fe:	83 81       	ldd	r24, Z+3	; 0x03
    2900:	82 30       	cpi	r24, 0x02	; 2
    2902:	41 f4       	brne	.+16     	; 0x2914 <Timer_init+0x1e8>
		{
			TCCR1B |= (1<<CS11);
    2904:	ae e4       	ldi	r26, 0x4E	; 78
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	ee e4       	ldi	r30, 0x4E	; 78
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	82 60       	ori	r24, 0x02	; 2
    2910:	8c 93       	st	X, r24
    2912:	ac c0       	rjmp	.+344    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_64)
    2914:	e9 81       	ldd	r30, Y+1	; 0x01
    2916:	fa 81       	ldd	r31, Y+2	; 0x02
    2918:	83 81       	ldd	r24, Z+3	; 0x03
    291a:	84 30       	cpi	r24, 0x04	; 4
    291c:	41 f4       	brne	.+16     	; 0x292e <Timer_init+0x202>
		{
			TCCR1B |= (1<<CS10) | (1<<CS11);
    291e:	ae e4       	ldi	r26, 0x4E	; 78
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	ee e4       	ldi	r30, 0x4E	; 78
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	83 60       	ori	r24, 0x03	; 3
    292a:	8c 93       	st	X, r24
    292c:	9f c0       	rjmp	.+318    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_256)
    292e:	e9 81       	ldd	r30, Y+1	; 0x01
    2930:	fa 81       	ldd	r31, Y+2	; 0x02
    2932:	83 81       	ldd	r24, Z+3	; 0x03
    2934:	85 30       	cpi	r24, 0x05	; 5
    2936:	41 f4       	brne	.+16     	; 0x2948 <Timer_init+0x21c>
		{
			TCCR1B |= (1<<CS12);
    2938:	ae e4       	ldi	r26, 0x4E	; 78
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	ee e4       	ldi	r30, 0x4E	; 78
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	84 60       	ori	r24, 0x04	; 4
    2944:	8c 93       	st	X, r24
    2946:	92 c0       	rjmp	.+292    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_1024)
    2948:	e9 81       	ldd	r30, Y+1	; 0x01
    294a:	fa 81       	ldd	r31, Y+2	; 0x02
    294c:	83 81       	ldd	r24, Z+3	; 0x03
    294e:	86 30       	cpi	r24, 0x06	; 6
    2950:	09 f0       	breq	.+2      	; 0x2954 <Timer_init+0x228>
    2952:	8c c0       	rjmp	.+280    	; 0x2a6c <Timer_init+0x340>
		{
			TCCR1B |= (1<<CS10) | (1<<CS12);
    2954:	ae e4       	ldi	r26, 0x4E	; 78
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	ee e4       	ldi	r30, 0x4E	; 78
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	85 60       	ori	r24, 0x05	; 5
    2960:	8c 93       	st	X, r24
    2962:	84 c0       	rjmp	.+264    	; 0x2a6c <Timer_init+0x340>
		}

	}
	else if(g_timer_number == Timer2)
    2964:	80 91 80 00 	lds	r24, 0x0080
    2968:	82 30       	cpi	r24, 0x02	; 2
    296a:	09 f0       	breq	.+2      	; 0x296e <Timer_init+0x242>
    296c:	7f c0       	rjmp	.+254    	; 0x2a6c <Timer_init+0x340>
	{
		/* Non PWM Mode */
		TCCR2 = (1<<FOC2);
    296e:	e5 e4       	ldi	r30, 0x45	; 69
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 e8       	ldi	r24, 0x80	; 128
    2974:	80 83       	st	Z, r24

		/* Set Timer initial value */
		TCNT2 = Config_Ptr->initial_value;
    2976:	a4 e4       	ldi	r26, 0x44	; 68
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e9 81       	ldd	r30, Y+1	; 0x01
    297c:	fa 81       	ldd	r31, Y+2	; 0x02
    297e:	81 81       	ldd	r24, Z+1	; 0x01
    2980:	92 81       	ldd	r25, Z+2	; 0x02
    2982:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL)
    2984:	e9 81       	ldd	r30, Y+1	; 0x01
    2986:	fa 81       	ldd	r31, Y+2	; 0x02
    2988:	80 81       	ld	r24, Z
    298a:	88 23       	and	r24, r24
    298c:	41 f4       	brne	.+16     	; 0x299e <Timer_init+0x272>
		{
			/* Enable Timer2 Overflow Interrupt */
			TIMSK |= (1<<TOIE2);
    298e:	a9 e5       	ldi	r26, 0x59	; 89
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e9 e5       	ldi	r30, 0x59	; 89
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	80 64       	ori	r24, 0x40	; 64
    299a:	8c 93       	st	X, r24
    299c:	1a c0       	rjmp	.+52     	; 0x29d2 <Timer_init+0x2a6>
		}
		else if(Config_Ptr->mode == COMPARE)
    299e:	e9 81       	ldd	r30, Y+1	; 0x01
    29a0:	fa 81       	ldd	r31, Y+2	; 0x02
    29a2:	80 81       	ld	r24, Z
    29a4:	81 30       	cpi	r24, 0x01	; 1
    29a6:	a9 f4       	brne	.+42     	; 0x29d2 <Timer_init+0x2a6>
		{
			/* CTC Mode WGM21=1 & WGM20=0 */
			TCCR2 |= (1<<WGM21);
    29a8:	a5 e4       	ldi	r26, 0x45	; 69
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e5 e4       	ldi	r30, 0x45	; 69
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	88 60       	ori	r24, 0x08	; 8
    29b4:	8c 93       	st	X, r24

			/* Set Timer compare value */
			OCR2 = Config_Ptr->compare_value;
    29b6:	a3 e4       	ldi	r26, 0x43	; 67
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e9 81       	ldd	r30, Y+1	; 0x01
    29bc:	fa 81       	ldd	r31, Y+2	; 0x02
    29be:	84 81       	ldd	r24, Z+4	; 0x04
    29c0:	95 81       	ldd	r25, Z+5	; 0x05
    29c2:	8c 93       	st	X, r24

			/* Enable Timer0 COMPARE Interrupt */
			TIMSK |= (1<<OCIE2);
    29c4:	a9 e5       	ldi	r26, 0x59	; 89
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e9 e5       	ldi	r30, 0x59	; 89
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	80 68       	ori	r24, 0x80	; 128
    29d0:	8c 93       	st	X, r24
		}

		/* adjust clock mode */
		if(Config_Ptr->clock == F_CPU_CLOCK)
    29d2:	e9 81       	ldd	r30, Y+1	; 0x01
    29d4:	fa 81       	ldd	r31, Y+2	; 0x02
    29d6:	83 81       	ldd	r24, Z+3	; 0x03
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	41 f4       	brne	.+16     	; 0x29ec <Timer_init+0x2c0>
		{
			TCCR2 |= (1<<CS20);
    29dc:	a5 e4       	ldi	r26, 0x45	; 69
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e5 e4       	ldi	r30, 0x45	; 69
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	81 60       	ori	r24, 0x01	; 1
    29e8:	8c 93       	st	X, r24
    29ea:	40 c0       	rjmp	.+128    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_8)
    29ec:	e9 81       	ldd	r30, Y+1	; 0x01
    29ee:	fa 81       	ldd	r31, Y+2	; 0x02
    29f0:	83 81       	ldd	r24, Z+3	; 0x03
    29f2:	82 30       	cpi	r24, 0x02	; 2
    29f4:	41 f4       	brne	.+16     	; 0x2a06 <Timer_init+0x2da>
		{
			TCCR2 |= (1<<CS21);
    29f6:	a5 e4       	ldi	r26, 0x45	; 69
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e5 e4       	ldi	r30, 0x45	; 69
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	82 60       	ori	r24, 0x02	; 2
    2a02:	8c 93       	st	X, r24
    2a04:	33 c0       	rjmp	.+102    	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_32)
    2a06:	e9 81       	ldd	r30, Y+1	; 0x01
    2a08:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0a:	83 81       	ldd	r24, Z+3	; 0x03
    2a0c:	83 30       	cpi	r24, 0x03	; 3
    2a0e:	41 f4       	brne	.+16     	; 0x2a20 <Timer_init+0x2f4>
		{
			TCCR2 |= (1<<CS20) | (1<<CS21);
    2a10:	a5 e4       	ldi	r26, 0x45	; 69
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	e5 e4       	ldi	r30, 0x45	; 69
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	83 60       	ori	r24, 0x03	; 3
    2a1c:	8c 93       	st	X, r24
    2a1e:	26 c0       	rjmp	.+76     	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_64)
    2a20:	e9 81       	ldd	r30, Y+1	; 0x01
    2a22:	fa 81       	ldd	r31, Y+2	; 0x02
    2a24:	83 81       	ldd	r24, Z+3	; 0x03
    2a26:	84 30       	cpi	r24, 0x04	; 4
    2a28:	41 f4       	brne	.+16     	; 0x2a3a <Timer_init+0x30e>
		{
			TCCR2 |= (1<<CS22);
    2a2a:	a5 e4       	ldi	r26, 0x45	; 69
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e5 e4       	ldi	r30, 0x45	; 69
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	84 60       	ori	r24, 0x04	; 4
    2a36:	8c 93       	st	X, r24
    2a38:	19 c0       	rjmp	.+50     	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_256)
    2a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3e:	83 81       	ldd	r24, Z+3	; 0x03
    2a40:	85 30       	cpi	r24, 0x05	; 5
    2a42:	41 f4       	brne	.+16     	; 0x2a54 <Timer_init+0x328>
		{
			TCCR2 |= (1<<CS21) | (1<<CS22);
    2a44:	a5 e4       	ldi	r26, 0x45	; 69
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e5 e4       	ldi	r30, 0x45	; 69
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	86 60       	ori	r24, 0x06	; 6
    2a50:	8c 93       	st	X, r24
    2a52:	0c c0       	rjmp	.+24     	; 0x2a6c <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_1024)
    2a54:	e9 81       	ldd	r30, Y+1	; 0x01
    2a56:	fa 81       	ldd	r31, Y+2	; 0x02
    2a58:	83 81       	ldd	r24, Z+3	; 0x03
    2a5a:	86 30       	cpi	r24, 0x06	; 6
    2a5c:	39 f4       	brne	.+14     	; 0x2a6c <Timer_init+0x340>
		{
			TCCR2 |= (1<<CS20) | (1<<CS21) | (1<<CS22);
    2a5e:	a5 e4       	ldi	r26, 0x45	; 69
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e5 e4       	ldi	r30, 0x45	; 69
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	87 60       	ori	r24, 0x07	; 7
    2a6a:	8c 93       	st	X, r24
		}

	}


}
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void))
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <Timer_setCallBack+0x6>
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	if(g_timer_number == Timer0)
    2a84:	80 91 80 00 	lds	r24, 0x0080
    2a88:	88 23       	and	r24, r24
    2a8a:	39 f4       	brne	.+14     	; 0x2a9a <Timer_setCallBack+0x24>
	{
		g_Timer0callBackPtr = a_ptr;
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	90 93 74 00 	sts	0x0074, r25
    2a94:	80 93 73 00 	sts	0x0073, r24
    2a98:	15 c0       	rjmp	.+42     	; 0x2ac4 <Timer_setCallBack+0x4e>
	}
	else if(g_timer_number == Timer1)
    2a9a:	80 91 80 00 	lds	r24, 0x0080
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	39 f4       	brne	.+14     	; 0x2ab0 <Timer_setCallBack+0x3a>
	{
		g_Timer1callBackPtr = a_ptr;
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	90 93 76 00 	sts	0x0076, r25
    2aaa:	80 93 75 00 	sts	0x0075, r24
    2aae:	0a c0       	rjmp	.+20     	; 0x2ac4 <Timer_setCallBack+0x4e>
	}
	else if(g_timer_number == Timer2)
    2ab0:	80 91 80 00 	lds	r24, 0x0080
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	31 f4       	brne	.+12     	; 0x2ac4 <Timer_setCallBack+0x4e>
	{
		g_Timer2callBackPtr = a_ptr;
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	90 93 78 00 	sts	0x0078, r25
    2ac0:	80 93 77 00 	sts	0x0077, r24
	}

}
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <Timer_stop>:
/*
 * Description: Function to stop the timer.
 */

void Timer_stop(uint8 a_timer_number)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	89 83       	std	Y+1, r24	; 0x01
	if(a_timer_number == Timer0)
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	88 23       	and	r24, r24
    2ade:	21 f4       	brne	.+8      	; 0x2ae8 <Timer_stop+0x1a>
	{
		TCCR0 = 0;
    2ae0:	e3 e5       	ldi	r30, 0x53	; 83
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	10 82       	st	Z, r1
    2ae6:	0d c0       	rjmp	.+26     	; 0x2b02 <Timer_stop+0x34>
	}
	else if(a_timer_number == Timer1)
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	81 30       	cpi	r24, 0x01	; 1
    2aec:	21 f4       	brne	.+8      	; 0x2af6 <Timer_stop+0x28>
	{
		TCCR1B = 0;
    2aee:	ee e4       	ldi	r30, 0x4E	; 78
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	10 82       	st	Z, r1
    2af4:	06 c0       	rjmp	.+12     	; 0x2b02 <Timer_stop+0x34>
	}
	else if(a_timer_number == Timer2)
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	82 30       	cpi	r24, 0x02	; 2
    2afa:	19 f4       	brne	.+6      	; 0x2b02 <Timer_stop+0x34>
	{
		TCCR2 = 0;
    2afc:	e5 e4       	ldi	r30, 0x45	; 69
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	10 82       	st	Z, r1
	}

}
    2b02:	0f 90       	pop	r0
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <UART_init+0xa>
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b1c:	eb e2       	ldi	r30, 0x2B	; 43
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2b24:	ea e2       	ldi	r30, 0x2A	; 42
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	88 e1       	ldi	r24, 0x18	; 24
    2b2a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2b2c:	e0 e4       	ldi	r30, 0x40	; 64
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 e8       	ldi	r24, 0x80	; 128
    2b32:	80 83       	st	Z, r24

	if(Config_Ptr->parity == EVEN_PARITY)
    2b34:	e9 81       	ldd	r30, Y+1	; 0x01
    2b36:	fa 81       	ldd	r31, Y+2	; 0x02
    2b38:	81 81       	ldd	r24, Z+1	; 0x01
    2b3a:	82 30       	cpi	r24, 0x02	; 2
    2b3c:	41 f4       	brne	.+16     	; 0x2b4e <UART_init+0x44>
	{
		SET_BIT(UCSRC, UPM1);
    2b3e:	a0 e4       	ldi	r26, 0x40	; 64
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e0 e4       	ldi	r30, 0x40	; 64
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	80 62       	ori	r24, 0x20	; 32
    2b4a:	8c 93       	st	X, r24
    2b4c:	13 c0       	rjmp	.+38     	; 0x2b74 <UART_init+0x6a>
	}
	else if(Config_Ptr->parity == ODD_PARITY)
    2b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b50:	fa 81       	ldd	r31, Y+2	; 0x02
    2b52:	81 81       	ldd	r24, Z+1	; 0x01
    2b54:	83 30       	cpi	r24, 0x03	; 3
    2b56:	71 f4       	brne	.+28     	; 0x2b74 <UART_init+0x6a>
	{
		SET_BIT(UCSRC, UPM0);
    2b58:	a0 e4       	ldi	r26, 0x40	; 64
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e0 e4       	ldi	r30, 0x40	; 64
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	80 61       	ori	r24, 0x10	; 16
    2b64:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
    2b66:	a0 e4       	ldi	r26, 0x40	; 64
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e0 e4       	ldi	r30, 0x40	; 64
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	80 62       	ori	r24, 0x20	; 32
    2b72:	8c 93       	st	X, r24
	}


	if(Config_Ptr->stop == TWO_STOP_BIT)
    2b74:	e9 81       	ldd	r30, Y+1	; 0x01
    2b76:	fa 81       	ldd	r31, Y+2	; 0x02
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	81 30       	cpi	r24, 0x01	; 1
    2b7c:	39 f4       	brne	.+14     	; 0x2b8c <UART_init+0x82>
	{
		SET_BIT(UCSRC, USBS);
    2b7e:	a0 e4       	ldi	r26, 0x40	; 64
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e0 e4       	ldi	r30, 0x40	; 64
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	88 60       	ori	r24, 0x08	; 8
    2b8a:	8c 93       	st	X, r24
	}


	if (Config_Ptr->bit_data == SIXTH_BITS)
    2b8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b90:	80 81       	ld	r24, Z
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	41 f4       	brne	.+16     	; 0x2ba6 <UART_init+0x9c>
	{
		UCSRC |= (1<<UCSZ0);
    2b96:	a0 e4       	ldi	r26, 0x40	; 64
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e0 e4       	ldi	r30, 0x40	; 64
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	82 60       	ori	r24, 0x02	; 2
    2ba2:	8c 93       	st	X, r24
    2ba4:	19 c0       	rjmp	.+50     	; 0x2bd8 <UART_init+0xce>
	}
	else if(Config_Ptr->bit_data == SEVEN_BITS)
    2ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    2baa:	80 81       	ld	r24, Z
    2bac:	82 30       	cpi	r24, 0x02	; 2
    2bae:	41 f4       	brne	.+16     	; 0x2bc0 <UART_init+0xb6>
	{
		UCSRC |= (1<<UCSZ1);
    2bb0:	a0 e4       	ldi	r26, 0x40	; 64
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e0 e4       	ldi	r30, 0x40	; 64
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	84 60       	ori	r24, 0x04	; 4
    2bbc:	8c 93       	st	X, r24
    2bbe:	0c c0       	rjmp	.+24     	; 0x2bd8 <UART_init+0xce>
	}
	else if (Config_Ptr->bit_data == EIGHT_BITS)
    2bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc4:	80 81       	ld	r24, Z
    2bc6:	83 30       	cpi	r24, 0x03	; 3
    2bc8:	39 f4       	brne	.+14     	; 0x2bd8 <UART_init+0xce>
	{
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    2bca:	a0 e4       	ldi	r26, 0x40	; 64
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e0 e4       	ldi	r30, 0x40	; 64
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	86 60       	ori	r24, 0x06	; 6
    2bd6:	8c 93       	st	X, r24
	}
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

	UBRRH = (((F_CPU / (Config_Ptr->baudrate * 8UL))) - 1)>>8;
    2bd8:	00 e4       	ldi	r16, 0x40	; 64
    2bda:	10 e0       	ldi	r17, 0x00	; 0
    2bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bde:	fa 81       	ldd	r31, Y+2	; 0x02
    2be0:	83 81       	ldd	r24, Z+3	; 0x03
    2be2:	94 81       	ldd	r25, Z+4	; 0x04
    2be4:	a5 81       	ldd	r26, Z+5	; 0x05
    2be6:	b6 81       	ldd	r27, Z+6	; 0x06
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	aa 1f       	adc	r26, r26
    2bee:	bb 1f       	adc	r27, r27
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	aa 1f       	adc	r26, r26
    2bf6:	bb 1f       	adc	r27, r27
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	aa 1f       	adc	r26, r26
    2bfe:	bb 1f       	adc	r27, r27
    2c00:	9c 01       	movw	r18, r24
    2c02:	ad 01       	movw	r20, r26
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	92 e1       	ldi	r25, 0x12	; 18
    2c08:	aa e7       	ldi	r26, 0x7A	; 122
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	cd 01       	movw	r24, r26
    2c10:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__udivmodsi4>
    2c14:	da 01       	movw	r26, r20
    2c16:	c9 01       	movw	r24, r18
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	a1 09       	sbc	r26, r1
    2c1c:	b1 09       	sbc	r27, r1
    2c1e:	89 2f       	mov	r24, r25
    2c20:	9a 2f       	mov	r25, r26
    2c22:	ab 2f       	mov	r26, r27
    2c24:	bb 27       	eor	r27, r27
    2c26:	f8 01       	movw	r30, r16
    2c28:	80 83       	st	Z, r24
	UBRRL = (((F_CPU / (Config_Ptr->baudrate * 8UL))) - 1);
    2c2a:	09 e2       	ldi	r16, 0x29	; 41
    2c2c:	10 e0       	ldi	r17, 0x00	; 0
    2c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c30:	fa 81       	ldd	r31, Y+2	; 0x02
    2c32:	83 81       	ldd	r24, Z+3	; 0x03
    2c34:	94 81       	ldd	r25, Z+4	; 0x04
    2c36:	a5 81       	ldd	r26, Z+5	; 0x05
    2c38:	b6 81       	ldd	r27, Z+6	; 0x06
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	aa 1f       	adc	r26, r26
    2c40:	bb 1f       	adc	r27, r27
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	aa 1f       	adc	r26, r26
    2c48:	bb 1f       	adc	r27, r27
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	aa 1f       	adc	r26, r26
    2c50:	bb 1f       	adc	r27, r27
    2c52:	9c 01       	movw	r18, r24
    2c54:	ad 01       	movw	r20, r26
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	92 e1       	ldi	r25, 0x12	; 18
    2c5a:	aa e7       	ldi	r26, 0x7A	; 122
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__udivmodsi4>
    2c66:	da 01       	movw	r26, r20
    2c68:	c9 01       	movw	r24, r18
    2c6a:	81 50       	subi	r24, 0x01	; 1
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	80 83       	st	Z, r24
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	0f 92       	push	r0
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c8a:	eb e2       	ldi	r30, 0x2B	; 43
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 2f       	mov	r24, r24
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	80 72       	andi	r24, 0x20	; 32
    2c96:	90 70       	andi	r25, 0x00	; 0
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	b9 f3       	breq	.-18     	; 0x2c8a <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2c9c:	ec e2       	ldi	r30, 0x2C	; 44
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cb4:	eb e2       	ldi	r30, 0x2B	; 43
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	88 23       	and	r24, r24
    2cbc:	dc f7       	brge	.-10     	; 0x2cb4 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    2cbe:	ec e2       	ldi	r30, 0x2C	; 44
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
}
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <UART_sendString+0x6>
    2cd0:	0f 92       	push	r0
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	9b 83       	std	Y+3, r25	; 0x03
    2cd8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cda:	19 82       	std	Y+1, r1	; 0x01
    2cdc:	0e c0       	rjmp	.+28     	; 0x2cfa <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce8:	fc 01       	movw	r30, r24
    2cea:	e2 0f       	add	r30, r18
    2cec:	f3 1f       	adc	r31, r19
    2cee:	80 81       	ld	r24, Z
    2cf0:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <UART_sendByte>
		i++;
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	8f 5f       	subi	r24, 0xFF	; 255
    2cf8:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	9b 81       	ldd	r25, Y+3	; 0x03
    2d04:	fc 01       	movw	r30, r24
    2d06:	e2 0f       	add	r30, r18
    2d08:	f3 1f       	adc	r31, r19
    2d0a:	80 81       	ld	r24, Z
    2d0c:	88 23       	and	r24, r24
    2d0e:	39 f7       	brne	.-50     	; 0x2cde <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <UART_receiveString+0xa>
    2d26:	0f 92       	push	r0
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	9b 83       	std	Y+3, r25	; 0x03
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d30:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3c:	8c 01       	movw	r16, r24
    2d3e:	02 0f       	add	r16, r18
    2d40:	13 1f       	adc	r17, r19
    2d42:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
    2d46:	f8 01       	movw	r30, r16
    2d48:	80 83       	st	Z, r24
    2d4a:	0f c0       	rjmp	.+30     	; 0x2d6a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5c:	8c 01       	movw	r16, r24
    2d5e:	02 0f       	add	r16, r18
    2d60:	13 1f       	adc	r17, r19
    2d62:	0e 94 56 16 	call	0x2cac	; 0x2cac <UART_recieveByte>
    2d66:	f8 01       	movw	r30, r16
    2d68:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	9b 81       	ldd	r25, Y+3	; 0x03
    2d74:	fc 01       	movw	r30, r24
    2d76:	e2 0f       	add	r30, r18
    2d78:	f3 1f       	adc	r31, r19
    2d7a:	80 81       	ld	r24, Z
    2d7c:	83 32       	cpi	r24, 0x23	; 35
    2d7e:	31 f7       	brne	.-52     	; 0x2d4c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	e2 0f       	add	r30, r18
    2d8e:	f3 1f       	adc	r31, r19
    2d90:	10 82       	st	Z, r1
}
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	1f 91       	pop	r17
    2d9e:	0f 91       	pop	r16
    2da0:	08 95       	ret

00002da2 <__udivmodsi4>:
    2da2:	a1 e2       	ldi	r26, 0x21	; 33
    2da4:	1a 2e       	mov	r1, r26
    2da6:	aa 1b       	sub	r26, r26
    2da8:	bb 1b       	sub	r27, r27
    2daa:	fd 01       	movw	r30, r26
    2dac:	0d c0       	rjmp	.+26     	; 0x2dc8 <__udivmodsi4_ep>

00002dae <__udivmodsi4_loop>:
    2dae:	aa 1f       	adc	r26, r26
    2db0:	bb 1f       	adc	r27, r27
    2db2:	ee 1f       	adc	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	a2 17       	cp	r26, r18
    2db8:	b3 07       	cpc	r27, r19
    2dba:	e4 07       	cpc	r30, r20
    2dbc:	f5 07       	cpc	r31, r21
    2dbe:	20 f0       	brcs	.+8      	; 0x2dc8 <__udivmodsi4_ep>
    2dc0:	a2 1b       	sub	r26, r18
    2dc2:	b3 0b       	sbc	r27, r19
    2dc4:	e4 0b       	sbc	r30, r20
    2dc6:	f5 0b       	sbc	r31, r21

00002dc8 <__udivmodsi4_ep>:
    2dc8:	66 1f       	adc	r22, r22
    2dca:	77 1f       	adc	r23, r23
    2dcc:	88 1f       	adc	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	1a 94       	dec	r1
    2dd2:	69 f7       	brne	.-38     	; 0x2dae <__udivmodsi4_loop>
    2dd4:	60 95       	com	r22
    2dd6:	70 95       	com	r23
    2dd8:	80 95       	com	r24
    2dda:	90 95       	com	r25
    2ddc:	9b 01       	movw	r18, r22
    2dde:	ac 01       	movw	r20, r24
    2de0:	bd 01       	movw	r22, r26
    2de2:	cf 01       	movw	r24, r30
    2de4:	08 95       	ret

00002de6 <__prologue_saves__>:
    2de6:	2f 92       	push	r2
    2de8:	3f 92       	push	r3
    2dea:	4f 92       	push	r4
    2dec:	5f 92       	push	r5
    2dee:	6f 92       	push	r6
    2df0:	7f 92       	push	r7
    2df2:	8f 92       	push	r8
    2df4:	9f 92       	push	r9
    2df6:	af 92       	push	r10
    2df8:	bf 92       	push	r11
    2dfa:	cf 92       	push	r12
    2dfc:	df 92       	push	r13
    2dfe:	ef 92       	push	r14
    2e00:	ff 92       	push	r15
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	ca 1b       	sub	r28, r26
    2e10:	db 0b       	sbc	r29, r27
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	09 94       	ijmp

00002e1e <__epilogue_restores__>:
    2e1e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e20:	39 88       	ldd	r3, Y+17	; 0x11
    2e22:	48 88       	ldd	r4, Y+16	; 0x10
    2e24:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e26:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e28:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e30:	b9 84       	ldd	r11, Y+9	; 0x09
    2e32:	c8 84       	ldd	r12, Y+8	; 0x08
    2e34:	df 80       	ldd	r13, Y+7	; 0x07
    2e36:	ee 80       	ldd	r14, Y+6	; 0x06
    2e38:	fd 80       	ldd	r15, Y+5	; 0x05
    2e3a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e3c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e3e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e40:	b9 81       	ldd	r27, Y+1	; 0x01
    2e42:	ce 0f       	add	r28, r30
    2e44:	d1 1d       	adc	r29, r1
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	ed 01       	movw	r28, r26
    2e52:	08 95       	ret

00002e54 <itoa>:
    2e54:	fb 01       	movw	r30, r22
    2e56:	9f 01       	movw	r18, r30
    2e58:	e8 94       	clt
    2e5a:	42 30       	cpi	r20, 0x02	; 2
    2e5c:	c4 f0       	brlt	.+48     	; 0x2e8e <itoa+0x3a>
    2e5e:	45 32       	cpi	r20, 0x25	; 37
    2e60:	b4 f4       	brge	.+44     	; 0x2e8e <itoa+0x3a>
    2e62:	4a 30       	cpi	r20, 0x0A	; 10
    2e64:	29 f4       	brne	.+10     	; 0x2e70 <itoa+0x1c>
    2e66:	97 fb       	bst	r25, 7
    2e68:	1e f4       	brtc	.+6      	; 0x2e70 <itoa+0x1c>
    2e6a:	90 95       	com	r25
    2e6c:	81 95       	neg	r24
    2e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e70:	64 2f       	mov	r22, r20
    2e72:	77 27       	eor	r23, r23
    2e74:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <__udivmodhi4>
    2e78:	80 5d       	subi	r24, 0xD0	; 208
    2e7a:	8a 33       	cpi	r24, 0x3A	; 58
    2e7c:	0c f0       	brlt	.+2      	; 0x2e80 <itoa+0x2c>
    2e7e:	89 5d       	subi	r24, 0xD9	; 217
    2e80:	81 93       	st	Z+, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	a1 f7       	brne	.-24     	; 0x2e70 <itoa+0x1c>
    2e88:	16 f4       	brtc	.+4      	; 0x2e8e <itoa+0x3a>
    2e8a:	5d e2       	ldi	r21, 0x2D	; 45
    2e8c:	51 93       	st	Z+, r21
    2e8e:	10 82       	st	Z, r1
    2e90:	c9 01       	movw	r24, r18
    2e92:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <strrev>

00002e96 <strrev>:
    2e96:	dc 01       	movw	r26, r24
    2e98:	fc 01       	movw	r30, r24
    2e9a:	67 2f       	mov	r22, r23
    2e9c:	71 91       	ld	r23, Z+
    2e9e:	77 23       	and	r23, r23
    2ea0:	e1 f7       	brne	.-8      	; 0x2e9a <strrev+0x4>
    2ea2:	32 97       	sbiw	r30, 0x02	; 2
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <strrev+0x18>
    2ea6:	7c 91       	ld	r23, X
    2ea8:	6d 93       	st	X+, r22
    2eaa:	70 83       	st	Z, r23
    2eac:	62 91       	ld	r22, -Z
    2eae:	ae 17       	cp	r26, r30
    2eb0:	bf 07       	cpc	r27, r31
    2eb2:	c8 f3       	brcs	.-14     	; 0x2ea6 <strrev+0x10>
    2eb4:	08 95       	ret

00002eb6 <__udivmodhi4>:
    2eb6:	aa 1b       	sub	r26, r26
    2eb8:	bb 1b       	sub	r27, r27
    2eba:	51 e1       	ldi	r21, 0x11	; 17
    2ebc:	07 c0       	rjmp	.+14     	; 0x2ecc <__udivmodhi4_ep>

00002ebe <__udivmodhi4_loop>:
    2ebe:	aa 1f       	adc	r26, r26
    2ec0:	bb 1f       	adc	r27, r27
    2ec2:	a6 17       	cp	r26, r22
    2ec4:	b7 07       	cpc	r27, r23
    2ec6:	10 f0       	brcs	.+4      	; 0x2ecc <__udivmodhi4_ep>
    2ec8:	a6 1b       	sub	r26, r22
    2eca:	b7 0b       	sbc	r27, r23

00002ecc <__udivmodhi4_ep>:
    2ecc:	88 1f       	adc	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	5a 95       	dec	r21
    2ed2:	a9 f7       	brne	.-22     	; 0x2ebe <__udivmodhi4_loop>
    2ed4:	80 95       	com	r24
    2ed6:	90 95       	com	r25
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	08 95       	ret

00002ede <_exit>:
    2ede:	f8 94       	cli

00002ee0 <__stop_program>:
    2ee0:	ff cf       	rjmp	.-2      	; 0x2ee0 <__stop_program>
