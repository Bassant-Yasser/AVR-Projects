
#define F_CPU 8000000UL

#include "lcd.h"
#include "uart.h"
#include "keypad.h"

#define M1_READY 0x20
#define M2_READY 0x10
#define max_password 5
#define VALIDATE TRUE
#define CHANGE_PASS FALSE
#define OPEN_DOOR 0x10
#define EMERGENCY 0x11

void get_password(uint8 password[max_password], char *Str);
void get_2passwords(uint8 password[max_password], uint8 re_password[max_password]);
uint8 sequence_1(uint8 action);

uint8 password[max_password];
uint8 re_password[max_password];
uint8 match = FALSE;
uint8 counter = 0;

int main(void)
{
	LCD_init();
	UART_ConfigType uart_config_ptr = {EIGHT_BITS, DISABLED, ONE_STOP_BIT, 9600};
	UART_init(&uart_config_ptr); // initialize UART driver

	sequence_1(VALIDATE);

	uint8 key;

    while(1)
    {
    	LCD_clearScreen();
    	LCD_displayString("+: Change pass");
    	LCD_goToRowColumn(1, 0);
    	LCD_displayString("-: Open door");

    	do
    	{
    		key = KeyPad_getPressedKey();
    		_delay_ms(300);
    	}
    	while(key != '+' && key != '-');

    	if(key == '+')
    	{
    		counter = 0;
    		match = FALSE;
    		while(match != TRUE && counter != 3)
    		{
    			counter++;
    	  		get_password(password, "Please enter old");
				do
				{
					key = KeyPad_getPressedKey();
					_delay_ms(300);
				}
				while(key != '=');

				while(UART_recieveByte() != M2_READY);
				UART_sendByte(VALIDATE);
				for (int i = 0; i < max_password; i++)
				{
					UART_sendByte(password[i]);
					_delay_ms(50);
				}


				UART_sendByte(M1_READY);
				match = UART_recieveByte();
    		}

    		if(match == TRUE)
    		{
    			match = sequence_1(CHANGE_PASS);
    			if(match == TRUE)
    			{
    				LCD_clearScreen();
					LCD_displayString("Password is changed");
					_delay_ms(1000);
    			}
    		}
    		if(match == FALSE)
    		{
    			LCD_clearScreen();
	    		while(UART_recieveByte() != M2_READY);
	    		UART_sendByte(EMERGENCY);
    			LCD_displayString("ERROR");
    			for(int i = 1; i <= 60; i++)
    			{
    				_delay_ms(1000);
    			}
    		}


    	}
    	else if (key == '-')
    	{
    		match = FALSE;
    		counter = 0;
    		while(match != TRUE && counter != 3)
    		{
    			counter++;
        		get_password(password, "Please enter pass");
        		while(UART_recieveByte() != M2_READY);
        		do
        		{
        			key = KeyPad_getPressedKey();
        			_delay_ms(300);
        		}
        		while(key != '=');
        		UART_sendByte(OPEN_DOOR);

        		for (int i = 0; i < max_password; i++)
        		{
        			UART_sendByte(password[i]);
        			_delay_ms(50);
        		}

        		UART_sendByte(M1_READY);
        		match = UART_recieveByte();

        		if(match == TRUE)
        		{
        			LCD_clearScreen();
        			LCD_displayString("Door is unlocking");
        			while(UART_recieveByte() != M1_READY);
					LCD_clearScreen();
					LCD_displayString("Door is locking");
					while(UART_recieveByte() != M1_READY);
        		}
        		else if(match == FALSE && counter != 3)
        		{
        			LCD_clearScreen();
        			LCD_displayString("Not matched");
        			LCD_goToRowColumn(1, 0);
        			LCD_displayString("Try again");
        			_delay_ms(1500);
        		}

//        		LCD_intgerToString(counter);
//        		_delay_ms(1000);
    		}
    		if(counter == 3 && match == FALSE)
    		{
        		while(UART_recieveByte() != M2_READY);
        		UART_sendByte(EMERGENCY);
        		LCD_clearScreen();
        		LCD_displayString("ERROR");
				for(int i = 1; i <= 60; i++)
				{
					_delay_ms(1000);
				}
    		}

    	}

    }
}

uint8 sequence_1(uint8 action)
{
	counter = 0;
	match = FALSE;
	while(match != TRUE && counter != 3)
	{
		counter++;
		get_2passwords(password, re_password);

//		LCD_clearScreen();
//		for(int i = 0; i < max_password; i++)
//			LCD_intgerToString(password[i]);
//		LCD_goToRowColumn(1, 0);
//		for(int i = 0; i < max_password; i++)
//			LCD_intgerToString(re_password[i]);


		while(UART_recieveByte() != M2_READY){} // wait until MC2 is ready
		UART_sendByte(action);

		for (int i = 0; i < max_password; i++)
		{
			UART_sendByte(password[i]);
			_delay_ms(50);
		}

//		while(UART_recieveByte() != M2_READY){} // wait until MC2 is ready
		for (int i = 0; i < max_password; i++)
		{
			UART_sendByte(re_password[i]);
			_delay_ms(50);
		}

		UART_sendByte(M1_READY);

		match = UART_recieveByte();

	}
	return match;
//	if(match == FALSE)
//	{
//		LCD_clearScreen();
//		LCD_displayString("FAILED");
//		_delay_ms(1000);
//	}
//	else
//	{
//		LCD_clearScreen();
//		LCD_displayString("SUCCESS");
//		_delay_ms(1000);
//	}
//	_delay_ms(2000);
}

void get_2passwords(uint8 password[max_password], uint8 re_password[max_password])
{
//	uint8 data;
	get_password(password, "Please enter pass:");
//	do
//	{
//		data = KeyPad_getPressedKey();
//		_delay_ms(300);
//	}
//	while(data != '=');
	while(KeyPad_getPressedKey() != '=');
	get_password(re_password, "Please re_enter pass:");
	while(KeyPad_getPressedKey() != '=');

	LCD_clearScreen();
	LCD_displayString("WAIT...");
//	_delay_ms(500);
}

void get_password(uint8 password[max_password], char *Str)
{
	LCD_clearScreen();
	LCD_goToRowColumn(0, 0);
	LCD_displayString(Str);
	LCD_goToRowColumn(1, 0);
	LCD_displayString("*****");
	LCD_goToRowColumn(1, 0);
	for(int i = 0; i < max_password; i++)
	{
		password[i] = KeyPad_getPressedKey();
		if(password[i] >= 0 && password[i] <= 9)
		{
			LCD_intgerToString(password[i]);
		}
		else
		{
			i--;
		}
		_delay_ms(500);

	}
}

