
#include "common_macros.h"
#include "micro_config.h"
#include "std_types.h"
#include "lcd.h"

#define RISING 0
#define FALLING 1

uint8 g_edgeCount = 0;
uint16 g_timeHigh = 0;
uint16 g_timePeriod = 0;
uint16 g_timePeriodPlusHigh = 0;

uint16 Timer1_getValue()
{
	return TCNT1;
}


void Timer1_Overflow_init(void)
{
	TCNT1 = 0;		/* Set timer1 initial count to zero */

	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=1
	 * 3. Normal Mode WGM10=0 WGM11=0  (Mode Number 1)
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=0 WGM13=0 (Mode Number 1)
	 * 2. Prescaler = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */
	TCCR1B = (1<<CS10) | (1<<CS12);
}

void Timer1_clearTimerValue()
{
	TCNT1 = 0;
}

/* External INT0 enable and configuration function */
void INT0_Init(void)
{
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
}

void INT0_deinit()
{
	GICR  &= ~(1<<INT0);
}

void Int0_setEdgeDetectionType(uint8 edge)
{
	if(edge == RISING)
	{
		MCUCR |= (1<<ISC11);
		MCUCR &= ~(1<<ISC10);
	}
	else if(edge == FALLING)
	{
		MCUCR |= (1<<ISC10);
		MCUCR |= (1<<ISC11);
	}
}


ISR(INT0_vect)
{
	g_edgeCount++;
	if(g_edgeCount == 1)
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Timer1_clearTimerValue();
		/* Detect falling edge */
		Int0_setEdgeDetectionType(FALLING);
	}
	else if(g_edgeCount == 2)
	{
		/* Store the High time value */
		g_timeHigh = Timer1_getValue();
		LCD_intgerToString(g_timeHigh);
		LCD_displayCharacter('-');
		/* Detect rising edge */
		Int0_setEdgeDetectionType(RISING);
	}
	else if(g_edgeCount == 3)
	{
		/* Store the Period time value */
		g_timePeriod = Timer1_getValue();
		LCD_intgerToString(g_timePeriod);
		LCD_displayCharacter('-');
		/* Detect falling edge */
		Int0_setEdgeDetectionType(FALLING);
	}
	else if(g_edgeCount == 4)
	{
		/* Store the Period time value + High time value */
		g_timePeriodPlusHigh = TCNT1
		LCD_intgerToString(g_timePeriodPlusHigh);
		/* Clear the timer counter register to start measurements again */
		Timer1_clearTimerValue();
		/* Detect rising edge */
		Int0_setEdgeDetectionType(RISING);
	}
}

int main()
{
	uint32 dutyCycle = 0;

	/* Initialize both the LCD driver */
	LCD_init();

	Timer1_Overflow_init();

	INT0_Init();

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);



	while(1)
	{
		if(g_edgeCount == 4)
		{
			INT0_deinit(); /* Disable ICU Driver */
			g_edgeCount = 0;
			LCD_displayString("Duty = ");
			/* calculate the dutyCycle */
			dutyCycle = ((float)(g_timePeriodPlusHigh-g_timePeriod) / (g_timePeriodPlusHigh - g_timeHigh)) * 100;
			/* display the dutyCycle on LCD screen */
			LCD_intgerToString(dutyCycle);
			LCD_displayCharacter('%');
		}
	}
}
