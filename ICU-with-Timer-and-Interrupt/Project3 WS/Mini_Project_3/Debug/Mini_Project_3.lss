
Mini_Project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002248  000022dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800178  00800178  000023f4  2**0
                  ALLOC
  3 .stab         000018b4  00000000  00000000  000023f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dd7  00000000  00000000  00003ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00004a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00004c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00004e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000721c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000085a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009778  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00009938  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00009c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a59c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__vector_3>
      10:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_6>
      1c:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__vector_7>
      20:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__vector_8>
      24:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <main>
      8a:	0c 94 22 11 	jmp	0x2244	; 0x2244 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e6       	ldi	r22, 0x68	; 104
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 59       	subi	r30, 0x90	; 144
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer1_getValue>:
uint16 g_timeHigh = 0;
uint16 g_timePeriod = 0;
uint16 g_timePeriodPlusHigh = 0;

uint16 Timer1_getValue()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     e36:	ec e4       	ldi	r30, 0x4C	; 76
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <Timer1_clearTimerValue>:


void Timer1_clearTimerValue()
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     e4c:	ec e4       	ldi	r30, 0x4C	; 76
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	11 82       	std	Z+1, r1	; 0x01
     e52:	10 82       	st	Z, r1
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <INT0_Init>:

/* External INT0 enable and configuration function */
void INT0_Init(void)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	/* Disable interrupts by clearing I-bit */
	SREG  &= ~(1<<7);
     e62:	af e5       	ldi	r26, 0x5F	; 95
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ef e5       	ldi	r30, 0x5F	; 95
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 77       	andi	r24, 0x7F	; 127
     e6e:	8c 93       	st	X, r24

	/* Configure INT0/PD2 as input pin */
	DDRD  &= (~(1<<PD2));
     e70:	a1 e3       	ldi	r26, 0x31	; 49
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e1 e3       	ldi	r30, 0x31	; 49
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8b 7f       	andi	r24, 0xFB	; 251
     e7c:	8c 93       	st	X, r24

	/* Enable external interrupt pin INT0 */
	GICR  |= (1<<INT0);
     e7e:	ab e5       	ldi	r26, 0x5B	; 91
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e5       	ldi	r30, 0x5B	; 91
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 64       	ori	r24, 0x40	; 64
     e8a:	8c 93       	st	X, r24

	/* Trigger INT0 with the raising edge */
	MCUCR |= (1<<ISC00) | (1<<ISC01);
     e8c:	a5 e5       	ldi	r26, 0x55	; 85
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e5       	ldi	r30, 0x55	; 85
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	83 60       	ori	r24, 0x03	; 3
     e98:	8c 93       	st	X, r24

	/* Enable interrupts by setting I-bit */
	SREG  |= (1<<7);
     e9a:	af e5       	ldi	r26, 0x5F	; 95
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ef e5       	ldi	r30, 0x5F	; 95
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 68       	ori	r24, 0x80	; 128
     ea6:	8c 93       	st	X, r24
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <INT0_deinit>:

void INT0_deinit()
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
	/* Disable external interrupt pin INT0 */
	GICR  &= ~(1<<INT0);
     eb6:	ab e5       	ldi	r26, 0x5B	; 91
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	eb e5       	ldi	r30, 0x5B	; 91
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 7b       	andi	r24, 0xBF	; 191
     ec2:	8c 93       	st	X, r24
}
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <Int0_setEdgeDetectionType>:

void Int0_setEdgeDetectionType(uint8 edge)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	0f 92       	push	r0
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	89 83       	std	Y+1, r24	; 0x01
	if(edge == FALLING)
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	79 f4       	brne	.+30     	; 0xefa <Int0_setEdgeDetectionType+0x30>
	{
		MCUCR |= (1<<ISC01);
     edc:	a5 e5       	ldi	r26, 0x55	; 85
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e5       	ldi	r30, 0x55	; 85
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	82 60       	ori	r24, 0x02	; 2
     ee8:	8c 93       	st	X, r24
		MCUCR &= ~(1<<ISC00);
     eea:	a5 e5       	ldi	r26, 0x55	; 85
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e5       	ldi	r30, 0x55	; 85
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8e 7f       	andi	r24, 0xFE	; 254
     ef6:	8c 93       	st	X, r24
     ef8:	11 c0       	rjmp	.+34     	; 0xf1c <Int0_setEdgeDetectionType+0x52>
	}
	else if(edge == RISING)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	88 23       	and	r24, r24
     efe:	71 f4       	brne	.+28     	; 0xf1c <Int0_setEdgeDetectionType+0x52>
	{
		MCUCR |= (1<<ISC01);
     f00:	a5 e5       	ldi	r26, 0x55	; 85
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e5       	ldi	r30, 0x55	; 85
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	82 60       	ori	r24, 0x02	; 2
     f0c:	8c 93       	st	X, r24
		MCUCR |= (1<<ISC00);
     f0e:	a5 e5       	ldi	r26, 0x55	; 85
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e5 e5       	ldi	r30, 0x55	; 85
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	81 60       	ori	r24, 0x01	; 1
     f1a:	8c 93       	st	X, r24
	}
}
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <__vector_1>:


ISR(INT0_vect)
{
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
     f4e:	80 91 78 01 	lds	r24, 0x0178
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 78 01 	sts	0x0178, r24
	if(g_edgeCount == 1)
     f58:	80 91 78 01 	lds	r24, 0x0178
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	31 f4       	brne	.+12     	; 0xf6c <__vector_1+0x48>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Timer1_clearTimerValue();
     f60:	0e 94 22 07 	call	0xe44	; 0xe44 <Timer1_clearTimerValue>
		/* Detect falling edge */
		Int0_setEdgeDetectionType(FALLING);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	0e 94 65 07 	call	0xeca	; 0xeca <Int0_setEdgeDetectionType>
     f6a:	29 c0       	rjmp	.+82     	; 0xfbe <__vector_1+0x9a>
	}
	else if(g_edgeCount == 2)
     f6c:	80 91 78 01 	lds	r24, 0x0178
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	51 f4       	brne	.+20     	; 0xf88 <__vector_1+0x64>
	{
		/* Store the High time value */
		g_timeHigh = Timer1_getValue();
     f74:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer1_getValue>
     f78:	90 93 7a 01 	sts	0x017A, r25
     f7c:	80 93 79 01 	sts	0x0179, r24

		/* Detect rising edge */
		Int0_setEdgeDetectionType(RISING);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 65 07 	call	0xeca	; 0xeca <Int0_setEdgeDetectionType>
     f86:	1b c0       	rjmp	.+54     	; 0xfbe <__vector_1+0x9a>
	}
	else if(g_edgeCount == 3)
     f88:	80 91 78 01 	lds	r24, 0x0178
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	51 f4       	brne	.+20     	; 0xfa4 <__vector_1+0x80>
	{
		/* Store the Period time value */
		g_timePeriod = Timer1_getValue();
     f90:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer1_getValue>
     f94:	90 93 7c 01 	sts	0x017C, r25
     f98:	80 93 7b 01 	sts	0x017B, r24

		/* Detect falling edge */
		Int0_setEdgeDetectionType(FALLING);
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	0e 94 65 07 	call	0xeca	; 0xeca <Int0_setEdgeDetectionType>
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <__vector_1+0x9a>
	}
	else if(g_edgeCount == 4)
     fa4:	80 91 78 01 	lds	r24, 0x0178
     fa8:	84 30       	cpi	r24, 0x04	; 4
     faa:	49 f4       	brne	.+18     	; 0xfbe <__vector_1+0x9a>
	{
		/* Store the Period time value + High time value */
		g_timePeriodPlusHigh = Timer1_getValue();
     fac:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer1_getValue>
     fb0:	90 93 7e 01 	sts	0x017E, r25
     fb4:	80 93 7d 01 	sts	0x017D, r24

		/* Clear the timer counter register to start measurements again */

		/* Detect rising edge */
		Int0_setEdgeDetectionType(RISING);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	0e 94 65 07 	call	0xeca	; 0xeca <Int0_setEdgeDetectionType>
	}
}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	ff 91       	pop	r31
     fc4:	ef 91       	pop	r30
     fc6:	bf 91       	pop	r27
     fc8:	af 91       	pop	r26
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	7f 91       	pop	r23
     fd0:	6f 91       	pop	r22
     fd2:	5f 91       	pop	r21
     fd4:	4f 91       	pop	r20
     fd6:	3f 91       	pop	r19
     fd8:	2f 91       	pop	r18
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f 90       	pop	r0
     fe0:	1f 90       	pop	r1
     fe2:	18 95       	reti

00000fe4 <main>:

int main()
{
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	60 97       	sbiw	r28, 0x10	; 16
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
	uint32 dutyCycle = 0;
    1000:	19 82       	std	Y+1, r1	; 0x01
    1002:	1a 82       	std	Y+2, r1	; 0x02
    1004:	1b 82       	std	Y+3, r1	; 0x03
    1006:	1c 82       	std	Y+4, r1	; 0x04

	/* Initialize both the LCD driver */
	LCD_init();
    1008:	0e 94 8e 08 	call	0x111c	; 0x111c <LCD_init>

	/* Create configuration structure for Timer driver */
	Timer_ConfigType Config_Ptr = {NORMAL, 0, F_CPU_CLOCK, 0, Timer1};
    100c:	ae 01       	movw	r20, r28
    100e:	4b 5f       	subi	r20, 0xFB	; 251
    1010:	5f 4f       	sbci	r21, 0xFF	; 255
    1012:	5d 87       	std	Y+13, r21	; 0x0d
    1014:	4c 87       	std	Y+12, r20	; 0x0c
    1016:	80 e7       	ldi	r24, 0x70	; 112
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	9f 87       	std	Y+15, r25	; 0x0f
    101c:	8e 87       	std	Y+14, r24	; 0x0e
    101e:	97 e0       	ldi	r25, 0x07	; 7
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	ee 85       	ldd	r30, Y+14	; 0x0e
    1024:	ff 85       	ldd	r31, Y+15	; 0x0f
    1026:	00 80       	ld	r0, Z
    1028:	4e 85       	ldd	r20, Y+14	; 0x0e
    102a:	5f 85       	ldd	r21, Y+15	; 0x0f
    102c:	4f 5f       	subi	r20, 0xFF	; 255
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	5f 87       	std	Y+15, r21	; 0x0f
    1032:	4e 87       	std	Y+14, r20	; 0x0e
    1034:	ec 85       	ldd	r30, Y+12	; 0x0c
    1036:	fd 85       	ldd	r31, Y+13	; 0x0d
    1038:	00 82       	st	Z, r0
    103a:	4c 85       	ldd	r20, Y+12	; 0x0c
    103c:	5d 85       	ldd	r21, Y+13	; 0x0d
    103e:	4f 5f       	subi	r20, 0xFF	; 255
    1040:	5f 4f       	sbci	r21, 0xFF	; 255
    1042:	5d 87       	std	Y+13, r21	; 0x0d
    1044:	4c 87       	std	Y+12, r20	; 0x0c
    1046:	58 89       	ldd	r21, Y+16	; 0x10
    1048:	51 50       	subi	r21, 0x01	; 1
    104a:	58 8b       	std	Y+16, r21	; 0x10
    104c:	88 89       	ldd	r24, Y+16	; 0x10
    104e:	88 23       	and	r24, r24
    1050:	41 f7       	brne	.-48     	; 0x1022 <main+0x3e>

	/* Initialize timer */
	Timer_init(&Config_Ptr);
    1052:	ce 01       	movw	r24, r28
    1054:	05 96       	adiw	r24, 0x05	; 5
    1056:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <Timer_init>

	/* Initialize INT0 */
	INT0_Init();
    105a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <INT0_Init>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    105e:	af e5       	ldi	r26, 0x5F	; 95
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ef e5       	ldi	r30, 0x5F	; 95
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 68       	ori	r24, 0x80	; 128
    106a:	8c 93       	st	X, r24



	while(1)
	{
		if(g_edgeCount == 4)
    106c:	80 91 78 01 	lds	r24, 0x0178
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	e1 f7       	brne	.-8      	; 0x106c <main+0x88>
		{
			/* Disable INT0 */
			INT0_deinit();
    1074:	0e 94 57 07 	call	0xeae	; 0xeae <INT0_deinit>

			g_edgeCount = 0;
    1078:	10 92 78 01 	sts	0x0178, r1
			LCD_displayString("Duty = ");
    107c:	80 e6       	ldi	r24, 0x60	; 96
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_displayString>

			/* calculate the dutyCycle */
			dutyCycle = ((float)(g_timePeriodPlusHigh-g_timePeriod) / (g_timePeriodPlusHigh - g_timeHigh)) * 100;
    1084:	20 91 7d 01 	lds	r18, 0x017D
    1088:	30 91 7e 01 	lds	r19, 0x017E
    108c:	80 91 7b 01 	lds	r24, 0x017B
    1090:	90 91 7c 01 	lds	r25, 0x017C
    1094:	f9 01       	movw	r30, r18
    1096:	e8 1b       	sub	r30, r24
    1098:	f9 0b       	sbc	r31, r25
    109a:	cf 01       	movw	r24, r30
    109c:	cc 01       	movw	r24, r24
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    10aa:	7b 01       	movw	r14, r22
    10ac:	8c 01       	movw	r16, r24
    10ae:	20 91 7d 01 	lds	r18, 0x017D
    10b2:	30 91 7e 01 	lds	r19, 0x017E
    10b6:	80 91 79 01 	lds	r24, 0x0179
    10ba:	90 91 7a 01 	lds	r25, 0x017A
    10be:	a9 01       	movw	r20, r18
    10c0:	48 1b       	sub	r20, r24
    10c2:	59 0b       	sbc	r21, r25
    10c4:	ca 01       	movw	r24, r20
    10c6:	cc 01       	movw	r24, r24
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    10d4:	9b 01       	movw	r18, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	c8 01       	movw	r24, r16
    10da:	b7 01       	movw	r22, r14
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	48 ec       	ldi	r20, 0xC8	; 200
    10ee:	52 e4       	ldi	r21, 0x42	; 66
    10f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	bc 01       	movw	r22, r24
    10fa:	cd 01       	movw	r24, r26
    10fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	ab 83       	std	Y+3, r26	; 0x03
    110a:	bc 83       	std	Y+4, r27	; 0x04

			/* display the dutyCycle on LCD screen */
			LCD_intgerToString(dutyCycle);
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_intgerToString>
			LCD_displayCharacter('%');
    1114:	85 e2       	ldi	r24, 0x25	; 37
    1116:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_displayCharacter>
    111a:	a8 cf       	rjmp	.-176    	; 0x106c <main+0x88>

0000111c <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1124:	a1 e3       	ldi	r26, 0x31	; 49
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e1 e3       	ldi	r30, 0x31	; 49
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 6b       	ori	r24, 0xB0	; 176
    1130:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1132:	e4 e3       	ldi	r30, 0x34	; 52
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    113a:	88 e3       	ldi	r24, 0x38	; 56
    113c:	0e 94 a9 08 	call	0x1152	; 0x1152 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1140:	8c e0       	ldi	r24, 0x0C	; 12
    1142:	0e 94 a9 08 	call	0x1152	; 0x1152 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	0e 94 a9 08 	call	0x1152	; 0x1152 <LCD_sendCommand>
}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	e9 97       	sbiw	r28, 0x39	; 57
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1168:	a2 e3       	ldi	r26, 0x32	; 50
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e2 e3       	ldi	r30, 0x32	; 50
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	8f 7e       	andi	r24, 0xEF	; 239
    1174:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1176:	a2 e3       	ldi	r26, 0x32	; 50
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e2 e3       	ldi	r30, 0x32	; 50
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8f 7d       	andi	r24, 0xDF	; 223
    1182:	8c 93       	st	X, r24
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e8       	ldi	r26, 0x80	; 128
    118a:	bf e3       	ldi	r27, 0x3F	; 63
    118c:	8d ab       	std	Y+53, r24	; 0x35
    118e:	9e ab       	std	Y+54, r25	; 0x36
    1190:	af ab       	std	Y+55, r26	; 0x37
    1192:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1194:	6d a9       	ldd	r22, Y+53	; 0x35
    1196:	7e a9       	ldd	r23, Y+54	; 0x36
    1198:	8f a9       	ldd	r24, Y+55	; 0x37
    119a:	98 ad       	ldd	r25, Y+56	; 0x38
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4a ef       	ldi	r20, 0xFA	; 250
    11a2:	54 e4       	ldi	r21, 0x44	; 68
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	89 ab       	std	Y+49, r24	; 0x31
    11ae:	9a ab       	std	Y+50, r25	; 0x32
    11b0:	ab ab       	std	Y+51, r26	; 0x33
    11b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11b4:	69 a9       	ldd	r22, Y+49	; 0x31
    11b6:	7a a9       	ldd	r23, Y+50	; 0x32
    11b8:	8b a9       	ldd	r24, Y+51	; 0x33
    11ba:	9c a9       	ldd	r25, Y+52	; 0x34
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <LCD_sendCommand+0x84>
		__ticks = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	98 ab       	std	Y+48, r25	; 0x30
    11d2:	8f a7       	std	Y+47, r24	; 0x2f
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    11d6:	69 a9       	ldd	r22, Y+49	; 0x31
    11d8:	7a a9       	ldd	r23, Y+50	; 0x32
    11da:	8b a9       	ldd	r24, Y+51	; 0x33
    11dc:	9c a9       	ldd	r25, Y+52	; 0x34
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	3f ef       	ldi	r19, 0xFF	; 255
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	57 e4       	ldi	r21, 0x47	; 71
    11e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	4c f5       	brge	.+82     	; 0x1240 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	6d a9       	ldd	r22, Y+53	; 0x35
    11f0:	7e a9       	ldd	r23, Y+54	; 0x36
    11f2:	8f a9       	ldd	r24, Y+55	; 0x37
    11f4:	98 ad       	ldd	r25, Y+56	; 0x38
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e2       	ldi	r20, 0x20	; 32
    11fc:	51 e4       	ldi	r21, 0x41	; 65
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	98 ab       	std	Y+48, r25	; 0x30
    1214:	8f a7       	std	Y+47, r24	; 0x2f
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <LCD_sendCommand+0xe4>
    1218:	88 ec       	ldi	r24, 0xC8	; 200
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9e a7       	std	Y+46, r25	; 0x2e
    121e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1220:	8d a5       	ldd	r24, Y+45	; 0x2d
    1222:	9e a5       	ldd	r25, Y+46	; 0x2e
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <LCD_sendCommand+0xd2>
    1228:	9e a7       	std	Y+46, r25	; 0x2e
    122a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	8f a5       	ldd	r24, Y+47	; 0x2f
    122e:	98 a9       	ldd	r25, Y+48	; 0x30
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	98 ab       	std	Y+48, r25	; 0x30
    1234:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1236:	8f a5       	ldd	r24, Y+47	; 0x2f
    1238:	98 a9       	ldd	r25, Y+48	; 0x30
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	69 f7       	brne	.-38     	; 0x1218 <LCD_sendCommand+0xc6>
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1240:	69 a9       	ldd	r22, Y+49	; 0x31
    1242:	7a a9       	ldd	r23, Y+50	; 0x32
    1244:	8b a9       	ldd	r24, Y+51	; 0x33
    1246:	9c a9       	ldd	r25, Y+52	; 0x34
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	98 ab       	std	Y+48, r25	; 0x30
    1252:	8f a7       	std	Y+47, r24	; 0x2f
    1254:	8f a5       	ldd	r24, Y+47	; 0x2f
    1256:	98 a9       	ldd	r25, Y+48	; 0x30
    1258:	9c a7       	std	Y+44, r25	; 0x2c
    125a:	8b a7       	std	Y+43, r24	; 0x2b
    125c:	8b a5       	ldd	r24, Y+43	; 0x2b
    125e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <LCD_sendCommand+0x10e>
    1264:	9c a7       	std	Y+44, r25	; 0x2c
    1266:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1268:	a2 e3       	ldi	r26, 0x32	; 50
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 68       	ori	r24, 0x80	; 128
    1274:	8c 93       	st	X, r24
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e8       	ldi	r26, 0x80	; 128
    127c:	bf e3       	ldi	r27, 0x3F	; 63
    127e:	8f a3       	std	Y+39, r24	; 0x27
    1280:	98 a7       	std	Y+40, r25	; 0x28
    1282:	a9 a7       	std	Y+41, r26	; 0x29
    1284:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1286:	6f a1       	ldd	r22, Y+39	; 0x27
    1288:	78 a5       	ldd	r23, Y+40	; 0x28
    128a:	89 a5       	ldd	r24, Y+41	; 0x29
    128c:	9a a5       	ldd	r25, Y+42	; 0x2a
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4a ef       	ldi	r20, 0xFA	; 250
    1294:	54 e4       	ldi	r21, 0x44	; 68
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	8b a3       	std	Y+35, r24	; 0x23
    12a0:	9c a3       	std	Y+36, r25	; 0x24
    12a2:	ad a3       	std	Y+37, r26	; 0x25
    12a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12a6:	6b a1       	ldd	r22, Y+35	; 0x23
    12a8:	7c a1       	ldd	r23, Y+36	; 0x24
    12aa:	8d a1       	ldd	r24, Y+37	; 0x25
    12ac:	9e a1       	ldd	r25, Y+38	; 0x26
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <LCD_sendCommand+0x176>
		__ticks = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9a a3       	std	Y+34, r25	; 0x22
    12c4:	89 a3       	std	Y+33, r24	; 0x21
    12c6:	3f c0       	rjmp	.+126    	; 0x1346 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    12c8:	6b a1       	ldd	r22, Y+35	; 0x23
    12ca:	7c a1       	ldd	r23, Y+36	; 0x24
    12cc:	8d a1       	ldd	r24, Y+37	; 0x25
    12ce:	9e a1       	ldd	r25, Y+38	; 0x26
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3f ef       	ldi	r19, 0xFF	; 255
    12d4:	4f e7       	ldi	r20, 0x7F	; 127
    12d6:	57 e4       	ldi	r21, 0x47	; 71
    12d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	4c f5       	brge	.+82     	; 0x1332 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e0:	6f a1       	ldd	r22, Y+39	; 0x27
    12e2:	78 a5       	ldd	r23, Y+40	; 0x28
    12e4:	89 a5       	ldd	r24, Y+41	; 0x29
    12e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9a a3       	std	Y+34, r25	; 0x22
    1306:	89 a3       	std	Y+33, r24	; 0x21
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <LCD_sendCommand+0x1d6>
    130a:	88 ec       	ldi	r24, 0xC8	; 200
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	98 a3       	std	Y+32, r25	; 0x20
    1310:	8f 8f       	std	Y+31, r24	; 0x1f
    1312:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1314:	98 a1       	ldd	r25, Y+32	; 0x20
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <LCD_sendCommand+0x1c4>
    131a:	98 a3       	std	Y+32, r25	; 0x20
    131c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131e:	89 a1       	ldd	r24, Y+33	; 0x21
    1320:	9a a1       	ldd	r25, Y+34	; 0x22
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	9a a3       	std	Y+34, r25	; 0x22
    1326:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1328:	89 a1       	ldd	r24, Y+33	; 0x21
    132a:	9a a1       	ldd	r25, Y+34	; 0x22
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	69 f7       	brne	.-38     	; 0x130a <LCD_sendCommand+0x1b8>
    1330:	14 c0       	rjmp	.+40     	; 0x135a <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1332:	6b a1       	ldd	r22, Y+35	; 0x23
    1334:	7c a1       	ldd	r23, Y+36	; 0x24
    1336:	8d a1       	ldd	r24, Y+37	; 0x25
    1338:	9e a1       	ldd	r25, Y+38	; 0x26
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	9e 8f       	std	Y+30, r25	; 0x1e
    134c:	8d 8f       	std	Y+29, r24	; 0x1d
    134e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1350:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <LCD_sendCommand+0x200>
    1356:	9e 8f       	std	Y+30, r25	; 0x1e
    1358:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    135a:	e5 e3       	ldi	r30, 0x35	; 53
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	89 ad       	ldd	r24, Y+57	; 0x39
    1360:	80 83       	st	Z, r24
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a0 e8       	ldi	r26, 0x80	; 128
    1368:	bf e3       	ldi	r27, 0x3F	; 63
    136a:	89 8f       	std	Y+25, r24	; 0x19
    136c:	9a 8f       	std	Y+26, r25	; 0x1a
    136e:	ab 8f       	std	Y+27, r26	; 0x1b
    1370:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1372:	69 8d       	ldd	r22, Y+25	; 0x19
    1374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	4a ef       	ldi	r20, 0xFA	; 250
    1380:	54 e4       	ldi	r21, 0x44	; 68
    1382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	8d 8b       	std	Y+21, r24	; 0x15
    138c:	9e 8b       	std	Y+22, r25	; 0x16
    138e:	af 8b       	std	Y+23, r26	; 0x17
    1390:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1392:	6d 89       	ldd	r22, Y+21	; 0x15
    1394:	7e 89       	ldd	r23, Y+22	; 0x16
    1396:	8f 89       	ldd	r24, Y+23	; 0x17
    1398:	98 8d       	ldd	r25, Y+24	; 0x18
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e8       	ldi	r20, 0x80	; 128
    13a0:	5f e3       	ldi	r21, 0x3F	; 63
    13a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13a6:	88 23       	and	r24, r24
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <LCD_sendCommand+0x262>
		__ticks = 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9c 8b       	std	Y+20, r25	; 0x14
    13b0:	8b 8b       	std	Y+19, r24	; 0x13
    13b2:	3f c0       	rjmp	.+126    	; 0x1432 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    13b4:	6d 89       	ldd	r22, Y+21	; 0x15
    13b6:	7e 89       	ldd	r23, Y+22	; 0x16
    13b8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ba:	98 8d       	ldd	r25, Y+24	; 0x18
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	3f ef       	ldi	r19, 0xFF	; 255
    13c0:	4f e7       	ldi	r20, 0x7F	; 127
    13c2:	57 e4       	ldi	r21, 0x47	; 71
    13c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13c8:	18 16       	cp	r1, r24
    13ca:	4c f5       	brge	.+82     	; 0x141e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13cc:	69 8d       	ldd	r22, Y+25	; 0x19
    13ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e2       	ldi	r20, 0x20	; 32
    13da:	51 e4       	ldi	r21, 0x41	; 65
    13dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9c 8b       	std	Y+20, r25	; 0x14
    13f2:	8b 8b       	std	Y+19, r24	; 0x13
    13f4:	0f c0       	rjmp	.+30     	; 0x1414 <LCD_sendCommand+0x2c2>
    13f6:	88 ec       	ldi	r24, 0xC8	; 200
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	9a 8b       	std	Y+18, r25	; 0x12
    13fc:	89 8b       	std	Y+17, r24	; 0x11
    13fe:	89 89       	ldd	r24, Y+17	; 0x11
    1400:	9a 89       	ldd	r25, Y+18	; 0x12
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <LCD_sendCommand+0x2b0>
    1406:	9a 8b       	std	Y+18, r25	; 0x12
    1408:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140a:	8b 89       	ldd	r24, Y+19	; 0x13
    140c:	9c 89       	ldd	r25, Y+20	; 0x14
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	9c 8b       	std	Y+20, r25	; 0x14
    1412:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1414:	8b 89       	ldd	r24, Y+19	; 0x13
    1416:	9c 89       	ldd	r25, Y+20	; 0x14
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	69 f7       	brne	.-38     	; 0x13f6 <LCD_sendCommand+0x2a4>
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141e:	6d 89       	ldd	r22, Y+21	; 0x15
    1420:	7e 89       	ldd	r23, Y+22	; 0x16
    1422:	8f 89       	ldd	r24, Y+23	; 0x17
    1424:	98 8d       	ldd	r25, Y+24	; 0x18
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	98 8b       	std	Y+16, r25	; 0x10
    1438:	8f 87       	std	Y+15, r24	; 0x0f
    143a:	8f 85       	ldd	r24, Y+15	; 0x0f
    143c:	98 89       	ldd	r25, Y+16	; 0x10
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <LCD_sendCommand+0x2ec>
    1442:	98 8b       	std	Y+16, r25	; 0x10
    1444:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1446:	a2 e3       	ldi	r26, 0x32	; 50
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e2 e3       	ldi	r30, 0x32	; 50
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8f 77       	andi	r24, 0x7F	; 127
    1452:	8c 93       	st	X, r24
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a0 e8       	ldi	r26, 0x80	; 128
    145a:	bf e3       	ldi	r27, 0x3F	; 63
    145c:	8b 87       	std	Y+11, r24	; 0x0b
    145e:	9c 87       	std	Y+12, r25	; 0x0c
    1460:	ad 87       	std	Y+13, r26	; 0x0d
    1462:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1464:	6b 85       	ldd	r22, Y+11	; 0x0b
    1466:	7c 85       	ldd	r23, Y+12	; 0x0c
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	4a ef       	ldi	r20, 0xFA	; 250
    1472:	54 e4       	ldi	r21, 0x44	; 68
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8f 83       	std	Y+7, r24	; 0x07
    147e:	98 87       	std	Y+8, r25	; 0x08
    1480:	a9 87       	std	Y+9, r26	; 0x09
    1482:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1484:	6f 81       	ldd	r22, Y+7	; 0x07
    1486:	78 85       	ldd	r23, Y+8	; 0x08
    1488:	89 85       	ldd	r24, Y+9	; 0x09
    148a:	9a 85       	ldd	r25, Y+10	; 0x0a
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e8       	ldi	r20, 0x80	; 128
    1492:	5f e3       	ldi	r21, 0x3F	; 63
    1494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1498:	88 23       	and	r24, r24
    149a:	2c f4       	brge	.+10     	; 0x14a6 <LCD_sendCommand+0x354>
		__ticks = 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	3f c0       	rjmp	.+126    	; 0x1524 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    14a6:	6f 81       	ldd	r22, Y+7	; 0x07
    14a8:	78 85       	ldd	r23, Y+8	; 0x08
    14aa:	89 85       	ldd	r24, Y+9	; 0x09
    14ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	3f ef       	ldi	r19, 0xFF	; 255
    14b2:	4f e7       	ldi	r20, 0x7F	; 127
    14b4:	57 e4       	ldi	r21, 0x47	; 71
    14b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14ba:	18 16       	cp	r1, r24
    14bc:	4c f5       	brge	.+82     	; 0x1510 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14be:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e2       	ldi	r20, 0x20	; 32
    14cc:	51 e4       	ldi	r21, 0x41	; 65
    14ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	0f c0       	rjmp	.+30     	; 0x1506 <LCD_sendCommand+0x3b4>
    14e8:	88 ec       	ldi	r24, 0xC8	; 200
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	8b 83       	std	Y+3, r24	; 0x03
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <LCD_sendCommand+0x3a2>
    14f8:	9c 83       	std	Y+4, r25	; 0x04
    14fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	9e 83       	std	Y+6, r25	; 0x06
    1504:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	69 f7       	brne	.-38     	; 0x14e8 <LCD_sendCommand+0x396>
    150e:	14 c0       	rjmp	.+40     	; 0x1538 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1510:	6f 81       	ldd	r22, Y+7	; 0x07
    1512:	78 85       	ldd	r23, Y+8	; 0x08
    1514:	89 85       	ldd	r24, Y+9	; 0x09
    1516:	9a 85       	ldd	r25, Y+10	; 0x0a
    1518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <LCD_sendCommand+0x3de>
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1538:	e9 96       	adiw	r28, 0x39	; 57
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	e9 97       	sbiw	r28, 0x39	; 57
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1560:	a2 e3       	ldi	r26, 0x32	; 50
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e2 e3       	ldi	r30, 0x32	; 50
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 61       	ori	r24, 0x10	; 16
    156c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    156e:	a2 e3       	ldi	r26, 0x32	; 50
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e2 e3       	ldi	r30, 0x32	; 50
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8f 7d       	andi	r24, 0xDF	; 223
    157a:	8c 93       	st	X, r24
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e8       	ldi	r26, 0x80	; 128
    1582:	bf e3       	ldi	r27, 0x3F	; 63
    1584:	8d ab       	std	Y+53, r24	; 0x35
    1586:	9e ab       	std	Y+54, r25	; 0x36
    1588:	af ab       	std	Y+55, r26	; 0x37
    158a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158c:	6d a9       	ldd	r22, Y+53	; 0x35
    158e:	7e a9       	ldd	r23, Y+54	; 0x36
    1590:	8f a9       	ldd	r24, Y+55	; 0x37
    1592:	98 ad       	ldd	r25, Y+56	; 0x38
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a ef       	ldi	r20, 0xFA	; 250
    159a:	54 e4       	ldi	r21, 0x44	; 68
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	89 ab       	std	Y+49, r24	; 0x31
    15a6:	9a ab       	std	Y+50, r25	; 0x32
    15a8:	ab ab       	std	Y+51, r26	; 0x33
    15aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15ac:	69 a9       	ldd	r22, Y+49	; 0x31
    15ae:	7a a9       	ldd	r23, Y+50	; 0x32
    15b0:	8b a9       	ldd	r24, Y+51	; 0x33
    15b2:	9c a9       	ldd	r25, Y+52	; 0x34
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <LCD_displayCharacter+0x84>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	98 ab       	std	Y+48, r25	; 0x30
    15ca:	8f a7       	std	Y+47, r24	; 0x2f
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    15ce:	69 a9       	ldd	r22, Y+49	; 0x31
    15d0:	7a a9       	ldd	r23, Y+50	; 0x32
    15d2:	8b a9       	ldd	r24, Y+51	; 0x33
    15d4:	9c a9       	ldd	r25, Y+52	; 0x34
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	4c f5       	brge	.+82     	; 0x1638 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e6:	6d a9       	ldd	r22, Y+53	; 0x35
    15e8:	7e a9       	ldd	r23, Y+54	; 0x36
    15ea:	8f a9       	ldd	r24, Y+55	; 0x37
    15ec:	98 ad       	ldd	r25, Y+56	; 0x38
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	98 ab       	std	Y+48, r25	; 0x30
    160c:	8f a7       	std	Y+47, r24	; 0x2f
    160e:	0f c0       	rjmp	.+30     	; 0x162e <LCD_displayCharacter+0xe4>
    1610:	88 ec       	ldi	r24, 0xC8	; 200
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9e a7       	std	Y+46, r25	; 0x2e
    1616:	8d a7       	std	Y+45, r24	; 0x2d
    1618:	8d a5       	ldd	r24, Y+45	; 0x2d
    161a:	9e a5       	ldd	r25, Y+46	; 0x2e
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <LCD_displayCharacter+0xd2>
    1620:	9e a7       	std	Y+46, r25	; 0x2e
    1622:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	8f a5       	ldd	r24, Y+47	; 0x2f
    1626:	98 a9       	ldd	r25, Y+48	; 0x30
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	98 ab       	std	Y+48, r25	; 0x30
    162c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1630:	98 a9       	ldd	r25, Y+48	; 0x30
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	69 f7       	brne	.-38     	; 0x1610 <LCD_displayCharacter+0xc6>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1638:	69 a9       	ldd	r22, Y+49	; 0x31
    163a:	7a a9       	ldd	r23, Y+50	; 0x32
    163c:	8b a9       	ldd	r24, Y+51	; 0x33
    163e:	9c a9       	ldd	r25, Y+52	; 0x34
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	98 ab       	std	Y+48, r25	; 0x30
    164a:	8f a7       	std	Y+47, r24	; 0x2f
    164c:	8f a5       	ldd	r24, Y+47	; 0x2f
    164e:	98 a9       	ldd	r25, Y+48	; 0x30
    1650:	9c a7       	std	Y+44, r25	; 0x2c
    1652:	8b a7       	std	Y+43, r24	; 0x2b
    1654:	8b a5       	ldd	r24, Y+43	; 0x2b
    1656:	9c a5       	ldd	r25, Y+44	; 0x2c
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <LCD_displayCharacter+0x10e>
    165c:	9c a7       	std	Y+44, r25	; 0x2c
    165e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1660:	a2 e3       	ldi	r26, 0x32	; 50
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e2 e3       	ldi	r30, 0x32	; 50
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	80 68       	ori	r24, 0x80	; 128
    166c:	8c 93       	st	X, r24
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e8       	ldi	r26, 0x80	; 128
    1674:	bf e3       	ldi	r27, 0x3F	; 63
    1676:	8f a3       	std	Y+39, r24	; 0x27
    1678:	98 a7       	std	Y+40, r25	; 0x28
    167a:	a9 a7       	std	Y+41, r26	; 0x29
    167c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	6f a1       	ldd	r22, Y+39	; 0x27
    1680:	78 a5       	ldd	r23, Y+40	; 0x28
    1682:	89 a5       	ldd	r24, Y+41	; 0x29
    1684:	9a a5       	ldd	r25, Y+42	; 0x2a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a ef       	ldi	r20, 0xFA	; 250
    168c:	54 e4       	ldi	r21, 0x44	; 68
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8b a3       	std	Y+35, r24	; 0x23
    1698:	9c a3       	std	Y+36, r25	; 0x24
    169a:	ad a3       	std	Y+37, r26	; 0x25
    169c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    169e:	6b a1       	ldd	r22, Y+35	; 0x23
    16a0:	7c a1       	ldd	r23, Y+36	; 0x24
    16a2:	8d a1       	ldd	r24, Y+37	; 0x25
    16a4:	9e a1       	ldd	r25, Y+38	; 0x26
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <LCD_displayCharacter+0x176>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9a a3       	std	Y+34, r25	; 0x22
    16bc:	89 a3       	std	Y+33, r24	; 0x21
    16be:	3f c0       	rjmp	.+126    	; 0x173e <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    16c0:	6b a1       	ldd	r22, Y+35	; 0x23
    16c2:	7c a1       	ldd	r23, Y+36	; 0x24
    16c4:	8d a1       	ldd	r24, Y+37	; 0x25
    16c6:	9e a1       	ldd	r25, Y+38	; 0x26
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	4c f5       	brge	.+82     	; 0x172a <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d8:	6f a1       	ldd	r22, Y+39	; 0x27
    16da:	78 a5       	ldd	r23, Y+40	; 0x28
    16dc:	89 a5       	ldd	r24, Y+41	; 0x29
    16de:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9a a3       	std	Y+34, r25	; 0x22
    16fe:	89 a3       	std	Y+33, r24	; 0x21
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <LCD_displayCharacter+0x1d6>
    1702:	88 ec       	ldi	r24, 0xC8	; 200
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	98 a3       	std	Y+32, r25	; 0x20
    1708:	8f 8f       	std	Y+31, r24	; 0x1f
    170a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    170c:	98 a1       	ldd	r25, Y+32	; 0x20
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_displayCharacter+0x1c4>
    1712:	98 a3       	std	Y+32, r25	; 0x20
    1714:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	89 a1       	ldd	r24, Y+33	; 0x21
    1718:	9a a1       	ldd	r25, Y+34	; 0x22
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	9a a3       	std	Y+34, r25	; 0x22
    171e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1720:	89 a1       	ldd	r24, Y+33	; 0x21
    1722:	9a a1       	ldd	r25, Y+34	; 0x22
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	69 f7       	brne	.-38     	; 0x1702 <LCD_displayCharacter+0x1b8>
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	6b a1       	ldd	r22, Y+35	; 0x23
    172c:	7c a1       	ldd	r23, Y+36	; 0x24
    172e:	8d a1       	ldd	r24, Y+37	; 0x25
    1730:	9e a1       	ldd	r25, Y+38	; 0x26
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9a a3       	std	Y+34, r25	; 0x22
    173c:	89 a3       	std	Y+33, r24	; 0x21
    173e:	89 a1       	ldd	r24, Y+33	; 0x21
    1740:	9a a1       	ldd	r25, Y+34	; 0x22
    1742:	9e 8f       	std	Y+30, r25	; 0x1e
    1744:	8d 8f       	std	Y+29, r24	; 0x1d
    1746:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1748:	9e 8d       	ldd	r25, Y+30	; 0x1e
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_displayCharacter+0x200>
    174e:	9e 8f       	std	Y+30, r25	; 0x1e
    1750:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1752:	e5 e3       	ldi	r30, 0x35	; 53
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	89 ad       	ldd	r24, Y+57	; 0x39
    1758:	80 83       	st	Z, r24
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a0 e8       	ldi	r26, 0x80	; 128
    1760:	bf e3       	ldi	r27, 0x3F	; 63
    1762:	89 8f       	std	Y+25, r24	; 0x19
    1764:	9a 8f       	std	Y+26, r25	; 0x1a
    1766:	ab 8f       	std	Y+27, r26	; 0x1b
    1768:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176a:	69 8d       	ldd	r22, Y+25	; 0x19
    176c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    176e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1770:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4a ef       	ldi	r20, 0xFA	; 250
    1778:	54 e4       	ldi	r21, 0x44	; 68
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	8d 8b       	std	Y+21, r24	; 0x15
    1784:	9e 8b       	std	Y+22, r25	; 0x16
    1786:	af 8b       	std	Y+23, r26	; 0x17
    1788:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    178a:	6d 89       	ldd	r22, Y+21	; 0x15
    178c:	7e 89       	ldd	r23, Y+22	; 0x16
    178e:	8f 89       	ldd	r24, Y+23	; 0x17
    1790:	98 8d       	ldd	r25, Y+24	; 0x18
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e8       	ldi	r20, 0x80	; 128
    1798:	5f e3       	ldi	r21, 0x3F	; 63
    179a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    179e:	88 23       	and	r24, r24
    17a0:	2c f4       	brge	.+10     	; 0x17ac <LCD_displayCharacter+0x262>
		__ticks = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9c 8b       	std	Y+20, r25	; 0x14
    17a8:	8b 8b       	std	Y+19, r24	; 0x13
    17aa:	3f c0       	rjmp	.+126    	; 0x182a <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    17ac:	6d 89       	ldd	r22, Y+21	; 0x15
    17ae:	7e 89       	ldd	r23, Y+22	; 0x16
    17b0:	8f 89       	ldd	r24, Y+23	; 0x17
    17b2:	98 8d       	ldd	r25, Y+24	; 0x18
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	4f e7       	ldi	r20, 0x7F	; 127
    17ba:	57 e4       	ldi	r21, 0x47	; 71
    17bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c0:	18 16       	cp	r1, r24
    17c2:	4c f5       	brge	.+82     	; 0x1816 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c4:	69 8d       	ldd	r22, Y+25	; 0x19
    17c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e2       	ldi	r20, 0x20	; 32
    17d2:	51 e4       	ldi	r21, 0x41	; 65
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9c 8b       	std	Y+20, r25	; 0x14
    17ea:	8b 8b       	std	Y+19, r24	; 0x13
    17ec:	0f c0       	rjmp	.+30     	; 0x180c <LCD_displayCharacter+0x2c2>
    17ee:	88 ec       	ldi	r24, 0xC8	; 200
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9a 8b       	std	Y+18, r25	; 0x12
    17f4:	89 8b       	std	Y+17, r24	; 0x11
    17f6:	89 89       	ldd	r24, Y+17	; 0x11
    17f8:	9a 89       	ldd	r25, Y+18	; 0x12
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <LCD_displayCharacter+0x2b0>
    17fe:	9a 8b       	std	Y+18, r25	; 0x12
    1800:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1802:	8b 89       	ldd	r24, Y+19	; 0x13
    1804:	9c 89       	ldd	r25, Y+20	; 0x14
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	9c 8b       	std	Y+20, r25	; 0x14
    180a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180c:	8b 89       	ldd	r24, Y+19	; 0x13
    180e:	9c 89       	ldd	r25, Y+20	; 0x14
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	69 f7       	brne	.-38     	; 0x17ee <LCD_displayCharacter+0x2a4>
    1814:	14 c0       	rjmp	.+40     	; 0x183e <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1816:	6d 89       	ldd	r22, Y+21	; 0x15
    1818:	7e 89       	ldd	r23, Y+22	; 0x16
    181a:	8f 89       	ldd	r24, Y+23	; 0x17
    181c:	98 8d       	ldd	r25, Y+24	; 0x18
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	9c 8b       	std	Y+20, r25	; 0x14
    1828:	8b 8b       	std	Y+19, r24	; 0x13
    182a:	8b 89       	ldd	r24, Y+19	; 0x13
    182c:	9c 89       	ldd	r25, Y+20	; 0x14
    182e:	98 8b       	std	Y+16, r25	; 0x10
    1830:	8f 87       	std	Y+15, r24	; 0x0f
    1832:	8f 85       	ldd	r24, Y+15	; 0x0f
    1834:	98 89       	ldd	r25, Y+16	; 0x10
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <LCD_displayCharacter+0x2ec>
    183a:	98 8b       	std	Y+16, r25	; 0x10
    183c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    183e:	a2 e3       	ldi	r26, 0x32	; 50
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e2 e3       	ldi	r30, 0x32	; 50
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8f 77       	andi	r24, 0x7F	; 127
    184a:	8c 93       	st	X, r24
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a0 e8       	ldi	r26, 0x80	; 128
    1852:	bf e3       	ldi	r27, 0x3F	; 63
    1854:	8b 87       	std	Y+11, r24	; 0x0b
    1856:	9c 87       	std	Y+12, r25	; 0x0c
    1858:	ad 87       	std	Y+13, r26	; 0x0d
    185a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	6b 85       	ldd	r22, Y+11	; 0x0b
    185e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	9e 85       	ldd	r25, Y+14	; 0x0e
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a ef       	ldi	r20, 0xFA	; 250
    186a:	54 e4       	ldi	r21, 0x44	; 68
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	8f 83       	std	Y+7, r24	; 0x07
    1876:	98 87       	std	Y+8, r25	; 0x08
    1878:	a9 87       	std	Y+9, r26	; 0x09
    187a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <LCD_displayCharacter+0x354>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	9e 83       	std	Y+6, r25	; 0x06
    189a:	8d 83       	std	Y+5, r24	; 0x05
    189c:	3f c0       	rjmp	.+126    	; 0x191c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    189e:	6f 81       	ldd	r22, Y+7	; 0x07
    18a0:	78 85       	ldd	r23, Y+8	; 0x08
    18a2:	89 85       	ldd	r24, Y+9	; 0x09
    18a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    18bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <LCD_displayCharacter+0x3b4>
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9c 83       	std	Y+4, r25	; 0x04
    18e6:	8b 83       	std	Y+3, r24	; 0x03
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_displayCharacter+0x3a2>
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1900:	9e 81       	ldd	r25, Y+6	; 0x06
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <LCD_displayCharacter+0x396>
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	6f 81       	ldd	r22, Y+7	; 0x07
    190a:	78 85       	ldd	r23, Y+8	; 0x08
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9e 83       	std	Y+6, r25	; 0x06
    191a:	8d 83       	std	Y+5, r24	; 0x05
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_displayCharacter+0x3de>
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1930:	e9 96       	adiw	r28, 0x39	; 57
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <LCD_displayString+0x6>
    1948:	0f 92       	push	r0
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	9b 83       	std	Y+3, r25	; 0x03
    1950:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1952:	19 82       	std	Y+1, r1	; 0x01
    1954:	0e c0       	rjmp	.+28     	; 0x1972 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	9b 81       	ldd	r25, Y+3	; 0x03
    1960:	fc 01       	movw	r30, r24
    1962:	e2 0f       	add	r30, r18
    1964:	f3 1f       	adc	r31, r19
    1966:	80 81       	ld	r24, Z
    1968:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_displayCharacter>
		i++;
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	8f 5f       	subi	r24, 0xFF	; 255
    1970:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	fc 01       	movw	r30, r24
    197e:	e2 0f       	add	r30, r18
    1980:	f3 1f       	adc	r31, r19
    1982:	80 81       	ld	r24, Z
    1984:	88 23       	and	r24, r24
    1986:	39 f7       	brne	.-50     	; 0x1956 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <LCD_goToRowColumn+0x6>
    199a:	00 d0       	rcall	.+0      	; 0x199c <LCD_goToRowColumn+0x8>
    199c:	0f 92       	push	r0
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	8a 83       	std	Y+2, r24	; 0x02
    19a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	3d 83       	std	Y+5, r19	; 0x05
    19ae:	2c 83       	std	Y+4, r18	; 0x04
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	91 05       	cpc	r25, r1
    19b8:	c1 f0       	breq	.+48     	; 0x19ea <LCD_goToRowColumn+0x56>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	22 30       	cpi	r18, 0x02	; 2
    19c0:	31 05       	cpc	r19, r1
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_goToRowColumn+0x3a>
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	61 f0       	breq	.+24     	; 0x19e4 <LCD_goToRowColumn+0x50>
    19cc:	19 c0       	rjmp	.+50     	; 0x1a00 <LCD_goToRowColumn+0x6c>
    19ce:	2c 81       	ldd	r18, Y+4	; 0x04
    19d0:	3d 81       	ldd	r19, Y+5	; 0x05
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	31 05       	cpc	r19, r1
    19d6:	69 f0       	breq	.+26     	; 0x19f2 <LCD_goToRowColumn+0x5e>
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	83 30       	cpi	r24, 0x03	; 3
    19de:	91 05       	cpc	r25, r1
    19e0:	61 f0       	breq	.+24     	; 0x19fa <LCD_goToRowColumn+0x66>
    19e2:	0e c0       	rjmp	.+28     	; 0x1a00 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	0b c0       	rjmp	.+22     	; 0x1a00 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	80 5c       	subi	r24, 0xC0	; 192
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	07 c0       	rjmp	.+14     	; 0x1a00 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	80 5f       	subi	r24, 0xF0	; 240
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	80 5b       	subi	r24, 0xB0	; 176
    19fe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	80 68       	ori	r24, 0x80	; 128
    1a04:	0e 94 a9 08 	call	0x1152	; 0x1152 <LCD_sendCommand>
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <LCD_displayStringRowColumn+0x6>
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <LCD_displayStringRowColumn+0x8>
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	6a 83       	std	Y+2, r22	; 0x02
    1a28:	5c 83       	std	Y+4, r21	; 0x04
    1a2a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a30:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_displayString>
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	62 97       	sbiw	r28, 0x12	; 18
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	9a 8b       	std	Y+18, r25	; 0x12
    1a60:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1a62:	89 89       	ldd	r24, Y+17	; 0x11
    1a64:	9a 89       	ldd	r25, Y+18	; 0x12
    1a66:	9e 01       	movw	r18, r28
    1a68:	2f 5f       	subi	r18, 0xFF	; 255
    1a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6c:	b9 01       	movw	r22, r18
    1a6e:	4a e0       	ldi	r20, 0x0A	; 10
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	0e 94 dd 10 	call	0x21ba	; 0x21ba <itoa>
   LCD_displayString(buff);
    1a76:	ce 01       	movw	r24, r28
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_displayString>
}
    1a7e:	62 96       	adiw	r28, 0x12	; 18
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	0e 94 a9 08 	call	0x1152	; 0x1152 <LCD_sendCommand>
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1aa4:	1f 92       	push	r1
    1aa6:	0f 92       	push	r0
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	0f 92       	push	r0
    1aac:	11 24       	eor	r1, r1
    1aae:	2f 93       	push	r18
    1ab0:	3f 93       	push	r19
    1ab2:	4f 93       	push	r20
    1ab4:	5f 93       	push	r21
    1ab6:	6f 93       	push	r22
    1ab8:	7f 93       	push	r23
    1aba:	8f 93       	push	r24
    1abc:	9f 93       	push	r25
    1abe:	af 93       	push	r26
    1ac0:	bf 93       	push	r27
    1ac2:	ef 93       	push	r30
    1ac4:	ff 93       	push	r31
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0callBackPtr != NULL_PTR)
    1ace:	80 91 7f 01 	lds	r24, 0x017F
    1ad2:	90 91 80 01 	lds	r25, 0x0180
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	29 f0       	breq	.+10     	; 0x1ae4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_Timer0callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ada:	e0 91 7f 01 	lds	r30, 0x017F
    1ade:	f0 91 80 01 	lds	r31, 0x0180
    1ae2:	09 95       	icall
	}
}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	ff 91       	pop	r31
    1aea:	ef 91       	pop	r30
    1aec:	bf 91       	pop	r27
    1aee:	af 91       	pop	r26
    1af0:	9f 91       	pop	r25
    1af2:	8f 91       	pop	r24
    1af4:	7f 91       	pop	r23
    1af6:	6f 91       	pop	r22
    1af8:	5f 91       	pop	r21
    1afa:	4f 91       	pop	r20
    1afc:	3f 91       	pop	r19
    1afe:	2f 91       	pop	r18
    1b00:	0f 90       	pop	r0
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	0f 90       	pop	r0
    1b06:	1f 90       	pop	r1
    1b08:	18 95       	reti

00001b0a <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1b0a:	1f 92       	push	r1
    1b0c:	0f 92       	push	r0
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	0f 92       	push	r0
    1b12:	11 24       	eor	r1, r1
    1b14:	2f 93       	push	r18
    1b16:	3f 93       	push	r19
    1b18:	4f 93       	push	r20
    1b1a:	5f 93       	push	r21
    1b1c:	6f 93       	push	r22
    1b1e:	7f 93       	push	r23
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	af 93       	push	r26
    1b26:	bf 93       	push	r27
    1b28:	ef 93       	push	r30
    1b2a:	ff 93       	push	r31
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0callBackPtr != NULL_PTR)
    1b34:	80 91 7f 01 	lds	r24, 0x017F
    1b38:	90 91 80 01 	lds	r25, 0x0180
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer0callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b40:	e0 91 7f 01 	lds	r30, 0x017F
    1b44:	f0 91 80 01 	lds	r31, 0x0180
    1b48:	09 95       	icall
	}
}
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	ff 91       	pop	r31
    1b50:	ef 91       	pop	r30
    1b52:	bf 91       	pop	r27
    1b54:	af 91       	pop	r26
    1b56:	9f 91       	pop	r25
    1b58:	8f 91       	pop	r24
    1b5a:	7f 91       	pop	r23
    1b5c:	6f 91       	pop	r22
    1b5e:	5f 91       	pop	r21
    1b60:	4f 91       	pop	r20
    1b62:	3f 91       	pop	r19
    1b64:	2f 91       	pop	r18
    1b66:	0f 90       	pop	r0
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	0f 90       	pop	r0
    1b6c:	1f 90       	pop	r1
    1b6e:	18 95       	reti

00001b70 <__vector_8>:


ISR(TIMER1_OVF_vect)
{
    1b70:	1f 92       	push	r1
    1b72:	0f 92       	push	r0
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	0f 92       	push	r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	6f 93       	push	r22
    1b84:	7f 93       	push	r23
    1b86:	8f 93       	push	r24
    1b88:	9f 93       	push	r25
    1b8a:	af 93       	push	r26
    1b8c:	bf 93       	push	r27
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer1callBackPtr != NULL_PTR)
    1b9a:	80 91 81 01 	lds	r24, 0x0181
    1b9e:	90 91 82 01 	lds	r25, 0x0182
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	29 f0       	breq	.+10     	; 0x1bb0 <__vector_8+0x40>
	{

		/* Call the Call Back function in the application after the overflow is detected */
		(*g_Timer1callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ba6:	e0 91 81 01 	lds	r30, 0x0181
    1baa:	f0 91 82 01 	lds	r31, 0x0182
    1bae:	09 95       	icall
	}
}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	ff 91       	pop	r31
    1bb6:	ef 91       	pop	r30
    1bb8:	bf 91       	pop	r27
    1bba:	af 91       	pop	r26
    1bbc:	9f 91       	pop	r25
    1bbe:	8f 91       	pop	r24
    1bc0:	7f 91       	pop	r23
    1bc2:	6f 91       	pop	r22
    1bc4:	5f 91       	pop	r21
    1bc6:	4f 91       	pop	r20
    1bc8:	3f 91       	pop	r19
    1bca:	2f 91       	pop	r18
    1bcc:	0f 90       	pop	r0
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	0f 90       	pop	r0
    1bd2:	1f 90       	pop	r1
    1bd4:	18 95       	reti

00001bd6 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	0f 92       	push	r0
    1bde:	11 24       	eor	r1, r1
    1be0:	2f 93       	push	r18
    1be2:	3f 93       	push	r19
    1be4:	4f 93       	push	r20
    1be6:	5f 93       	push	r21
    1be8:	6f 93       	push	r22
    1bea:	7f 93       	push	r23
    1bec:	8f 93       	push	r24
    1bee:	9f 93       	push	r25
    1bf0:	af 93       	push	r26
    1bf2:	bf 93       	push	r27
    1bf4:	ef 93       	push	r30
    1bf6:	ff 93       	push	r31
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1callBackPtr != NULL_PTR)
    1c00:	80 91 81 01 	lds	r24, 0x0181
    1c04:	90 91 82 01 	lds	r25, 0x0182
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	29 f0       	breq	.+10     	; 0x1c16 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer1callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1c0c:	e0 91 81 01 	lds	r30, 0x0181
    1c10:	f0 91 82 01 	lds	r31, 0x0182
    1c14:	09 95       	icall
	}
}
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	ff 91       	pop	r31
    1c1c:	ef 91       	pop	r30
    1c1e:	bf 91       	pop	r27
    1c20:	af 91       	pop	r26
    1c22:	9f 91       	pop	r25
    1c24:	8f 91       	pop	r24
    1c26:	7f 91       	pop	r23
    1c28:	6f 91       	pop	r22
    1c2a:	5f 91       	pop	r21
    1c2c:	4f 91       	pop	r20
    1c2e:	3f 91       	pop	r19
    1c30:	2f 91       	pop	r18
    1c32:	0f 90       	pop	r0
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	0f 90       	pop	r0
    1c38:	1f 90       	pop	r1
    1c3a:	18 95       	reti

00001c3c <__vector_7>:


ISR(TIMER1_COMPB_vect)
{
    1c3c:	1f 92       	push	r1
    1c3e:	0f 92       	push	r0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	0f 92       	push	r0
    1c44:	11 24       	eor	r1, r1
    1c46:	2f 93       	push	r18
    1c48:	3f 93       	push	r19
    1c4a:	4f 93       	push	r20
    1c4c:	5f 93       	push	r21
    1c4e:	6f 93       	push	r22
    1c50:	7f 93       	push	r23
    1c52:	8f 93       	push	r24
    1c54:	9f 93       	push	r25
    1c56:	af 93       	push	r26
    1c58:	bf 93       	push	r27
    1c5a:	ef 93       	push	r30
    1c5c:	ff 93       	push	r31
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1callBackPtr != NULL_PTR)
    1c66:	80 91 81 01 	lds	r24, 0x0181
    1c6a:	90 91 82 01 	lds	r25, 0x0182
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	29 f0       	breq	.+10     	; 0x1c7c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer1callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1c72:	e0 91 81 01 	lds	r30, 0x0181
    1c76:	f0 91 82 01 	lds	r31, 0x0182
    1c7a:	09 95       	icall
	}
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	ff 91       	pop	r31
    1c82:	ef 91       	pop	r30
    1c84:	bf 91       	pop	r27
    1c86:	af 91       	pop	r26
    1c88:	9f 91       	pop	r25
    1c8a:	8f 91       	pop	r24
    1c8c:	7f 91       	pop	r23
    1c8e:	6f 91       	pop	r22
    1c90:	5f 91       	pop	r21
    1c92:	4f 91       	pop	r20
    1c94:	3f 91       	pop	r19
    1c96:	2f 91       	pop	r18
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	0f 90       	pop	r0
    1c9e:	1f 90       	pop	r1
    1ca0:	18 95       	reti

00001ca2 <__vector_4>:


ISR(TIMER2_OVF_vect)
{
    1ca2:	1f 92       	push	r1
    1ca4:	0f 92       	push	r0
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	0f 92       	push	r0
    1caa:	11 24       	eor	r1, r1
    1cac:	2f 93       	push	r18
    1cae:	3f 93       	push	r19
    1cb0:	4f 93       	push	r20
    1cb2:	5f 93       	push	r21
    1cb4:	6f 93       	push	r22
    1cb6:	7f 93       	push	r23
    1cb8:	8f 93       	push	r24
    1cba:	9f 93       	push	r25
    1cbc:	af 93       	push	r26
    1cbe:	bf 93       	push	r27
    1cc0:	ef 93       	push	r30
    1cc2:	ff 93       	push	r31
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2callBackPtr != NULL_PTR)
    1ccc:	80 91 83 01 	lds	r24, 0x0183
    1cd0:	90 91 84 01 	lds	r25, 0x0184
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	29 f0       	breq	.+10     	; 0x1ce2 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_Timer2callBackPtr)(); /* another method to call the function using pointer to function g_Timer2callBackPtr(); */
    1cd8:	e0 91 83 01 	lds	r30, 0x0183
    1cdc:	f0 91 84 01 	lds	r31, 0x0184
    1ce0:	09 95       	icall
	}
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	ff 91       	pop	r31
    1ce8:	ef 91       	pop	r30
    1cea:	bf 91       	pop	r27
    1cec:	af 91       	pop	r26
    1cee:	9f 91       	pop	r25
    1cf0:	8f 91       	pop	r24
    1cf2:	7f 91       	pop	r23
    1cf4:	6f 91       	pop	r22
    1cf6:	5f 91       	pop	r21
    1cf8:	4f 91       	pop	r20
    1cfa:	3f 91       	pop	r19
    1cfc:	2f 91       	pop	r18
    1cfe:	0f 90       	pop	r0
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	0f 90       	pop	r0
    1d04:	1f 90       	pop	r1
    1d06:	18 95       	reti

00001d08 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1d08:	1f 92       	push	r1
    1d0a:	0f 92       	push	r0
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	0f 92       	push	r0
    1d10:	11 24       	eor	r1, r1
    1d12:	2f 93       	push	r18
    1d14:	3f 93       	push	r19
    1d16:	4f 93       	push	r20
    1d18:	5f 93       	push	r21
    1d1a:	6f 93       	push	r22
    1d1c:	7f 93       	push	r23
    1d1e:	8f 93       	push	r24
    1d20:	9f 93       	push	r25
    1d22:	af 93       	push	r26
    1d24:	bf 93       	push	r27
    1d26:	ef 93       	push	r30
    1d28:	ff 93       	push	r31
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2callBackPtr != NULL_PTR)
    1d32:	80 91 83 01 	lds	r24, 0x0183
    1d36:	90 91 84 01 	lds	r25, 0x0184
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	29 f0       	breq	.+10     	; 0x1d48 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer2callBackPtr)(); /* another method to call the function using pointer to function g_Timer2callBackPtr(); */
    1d3e:	e0 91 83 01 	lds	r30, 0x0183
    1d42:	f0 91 84 01 	lds	r31, 0x0184
    1d46:	09 95       	icall
	}
}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	ff 91       	pop	r31
    1d4e:	ef 91       	pop	r30
    1d50:	bf 91       	pop	r27
    1d52:	af 91       	pop	r26
    1d54:	9f 91       	pop	r25
    1d56:	8f 91       	pop	r24
    1d58:	7f 91       	pop	r23
    1d5a:	6f 91       	pop	r22
    1d5c:	5f 91       	pop	r21
    1d5e:	4f 91       	pop	r20
    1d60:	3f 91       	pop	r19
    1d62:	2f 91       	pop	r18
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <Timer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <Timer_init+0x6>
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	9a 83       	std	Y+2, r25	; 0x02
    1d7a:	89 83       	std	Y+1, r24	; 0x01
	/* Saves timer_number in global variable */
	g_timer_number = Config_Ptr->timer_number;
    1d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d80:	86 81       	ldd	r24, Z+6	; 0x06
    1d82:	80 93 85 01 	sts	0x0185, r24

	/* Adjust bits of timer0 */
	if(g_timer_number == Timer0)
    1d86:	80 91 85 01 	lds	r24, 0x0185
    1d8a:	88 23       	and	r24, r24
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <Timer_init+0x22>
    1d8e:	74 c0       	rjmp	.+232    	; 0x1e78 <Timer_init+0x10a>
	{
		/* Non PWM Mode */
		TCCR0 = (1<<FOC0);
    1d90:	e3 e5       	ldi	r30, 0x53	; 83
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 e8       	ldi	r24, 0x80	; 128
    1d96:	80 83       	st	Z, r24

		/* Set Timer initial value */
		TCNT0 = Config_Ptr->initial_value;
    1d98:	a2 e5       	ldi	r26, 0x52	; 82
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1da0:	81 81       	ldd	r24, Z+1	; 0x01
    1da2:	92 81       	ldd	r25, Z+2	; 0x02
    1da4:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL)
    1da6:	e9 81       	ldd	r30, Y+1	; 0x01
    1da8:	fa 81       	ldd	r31, Y+2	; 0x02
    1daa:	80 81       	ld	r24, Z
    1dac:	88 23       	and	r24, r24
    1dae:	41 f4       	brne	.+16     	; 0x1dc0 <Timer_init+0x52>
		{
			/* Enable Timer0 Overflow Interrupt */
			TIMSK |= (1<<TOIE0);
    1db0:	a9 e5       	ldi	r26, 0x59	; 89
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e9 e5       	ldi	r30, 0x59	; 89
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	81 60       	ori	r24, 0x01	; 1
    1dbc:	8c 93       	st	X, r24
    1dbe:	1a c0       	rjmp	.+52     	; 0x1df4 <Timer_init+0x86>
		}
		else if(Config_Ptr->mode == COMPARE)
    1dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc4:	80 81       	ld	r24, Z
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	a9 f4       	brne	.+42     	; 0x1df4 <Timer_init+0x86>
		{
			/* CTC Mode WGM01=1 & WGM00=0 */
			TCCR0 |= (1<<WGM01);
    1dca:	a3 e5       	ldi	r26, 0x53	; 83
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e3 e5       	ldi	r30, 0x53	; 83
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	88 60       	ori	r24, 0x08	; 8
    1dd6:	8c 93       	st	X, r24

			/* Set Compare Value */
			OCR0 = Config_Ptr->compare_value;
    1dd8:	ac e5       	ldi	r26, 0x5C	; 92
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dde:	fa 81       	ldd	r31, Y+2	; 0x02
    1de0:	84 81       	ldd	r24, Z+4	; 0x04
    1de2:	95 81       	ldd	r25, Z+5	; 0x05
    1de4:	8c 93       	st	X, r24

			/* Enable Timer0 Compare Interrupt */
			TIMSK |= (1<<OCIE0);
    1de6:	a9 e5       	ldi	r26, 0x59	; 89
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 e5       	ldi	r30, 0x59	; 89
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	82 60       	ori	r24, 0x02	; 2
    1df2:	8c 93       	st	X, r24
		}

		/* adjust clock mode */
		if(Config_Ptr->clock == F_CPU_CLOCK)
    1df4:	e9 81       	ldd	r30, Y+1	; 0x01
    1df6:	fa 81       	ldd	r31, Y+2	; 0x02
    1df8:	83 81       	ldd	r24, Z+3	; 0x03
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	41 f4       	brne	.+16     	; 0x1e0e <Timer_init+0xa0>
		{
			TCCR0 |= (1<<CS00);
    1dfe:	a3 e5       	ldi	r26, 0x53	; 83
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e3 e5       	ldi	r30, 0x53	; 83
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	81 60       	ori	r24, 0x01	; 1
    1e0a:	8c 93       	st	X, r24
    1e0c:	50 c1       	rjmp	.+672    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_8)
    1e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e10:	fa 81       	ldd	r31, Y+2	; 0x02
    1e12:	83 81       	ldd	r24, Z+3	; 0x03
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	41 f4       	brne	.+16     	; 0x1e28 <Timer_init+0xba>
		{
			TCCR0 |= (1<<CS01);
    1e18:	a3 e5       	ldi	r26, 0x53	; 83
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e3 e5       	ldi	r30, 0x53	; 83
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	82 60       	ori	r24, 0x02	; 2
    1e24:	8c 93       	st	X, r24
    1e26:	43 c1       	rjmp	.+646    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_64)
    1e28:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2c:	83 81       	ldd	r24, Z+3	; 0x03
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	41 f4       	brne	.+16     	; 0x1e42 <Timer_init+0xd4>
		{
			TCCR0 |= (1<<CS00) | (1<<CS01);
    1e32:	a3 e5       	ldi	r26, 0x53	; 83
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e3 e5       	ldi	r30, 0x53	; 83
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	83 60       	ori	r24, 0x03	; 3
    1e3e:	8c 93       	st	X, r24
    1e40:	36 c1       	rjmp	.+620    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_256)
    1e42:	e9 81       	ldd	r30, Y+1	; 0x01
    1e44:	fa 81       	ldd	r31, Y+2	; 0x02
    1e46:	83 81       	ldd	r24, Z+3	; 0x03
    1e48:	85 30       	cpi	r24, 0x05	; 5
    1e4a:	41 f4       	brne	.+16     	; 0x1e5c <Timer_init+0xee>
		{
			TCCR0 |= (1<<CS02);
    1e4c:	a3 e5       	ldi	r26, 0x53	; 83
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e3 e5       	ldi	r30, 0x53	; 83
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	84 60       	ori	r24, 0x04	; 4
    1e58:	8c 93       	st	X, r24
    1e5a:	29 c1       	rjmp	.+594    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_1024)
    1e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e60:	83 81       	ldd	r24, Z+3	; 0x03
    1e62:	86 30       	cpi	r24, 0x06	; 6
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <Timer_init+0xfa>
    1e66:	23 c1       	rjmp	.+582    	; 0x20ae <Timer_init+0x340>
		{
			TCCR0 |= (1<<CS00) | (1<<CS02);
    1e68:	a3 e5       	ldi	r26, 0x53	; 83
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e3 e5       	ldi	r30, 0x53	; 83
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	85 60       	ori	r24, 0x05	; 5
    1e74:	8c 93       	st	X, r24
    1e76:	1b c1       	rjmp	.+566    	; 0x20ae <Timer_init+0x340>
		}
	}
	else if(g_timer_number == Timer1)
    1e78:	80 91 85 01 	lds	r24, 0x0185
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <Timer_init+0x114>
    1e80:	92 c0       	rjmp	.+292    	; 0x1fa6 <Timer_init+0x238>
	{
		/* Non PWM Mode */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1e82:	ef e4       	ldi	r30, 0x4F	; 79
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	8c e0       	ldi	r24, 0x0C	; 12
    1e88:	80 83       	st	Z, r24

		/* Set Timer initial value */
		TCNT1 = Config_Ptr->initial_value;
    1e8a:	ac e4       	ldi	r26, 0x4C	; 76
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e90:	fa 81       	ldd	r31, Y+2	; 0x02
    1e92:	81 81       	ldd	r24, Z+1	; 0x01
    1e94:	92 81       	ldd	r25, Z+2	; 0x02
    1e96:	11 96       	adiw	r26, 0x01	; 1
    1e98:	9c 93       	st	X, r25
    1e9a:	8e 93       	st	-X, r24

		if(Config_Ptr->mode == NORMAL)
    1e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea0:	80 81       	ld	r24, Z
    1ea2:	88 23       	and	r24, r24
    1ea4:	59 f4       	brne	.+22     	; 0x1ebc <Timer_init+0x14e>
		{
			TCCR1B = 0;
    1ea6:	ee e4       	ldi	r30, 0x4E	; 78
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	10 82       	st	Z, r1

			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1<<TOIE1);
    1eac:	a9 e5       	ldi	r26, 0x59	; 89
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e9 e5       	ldi	r30, 0x59	; 89
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	84 60       	ori	r24, 0x04	; 4
    1eb8:	8c 93       	st	X, r24
    1eba:	33 c0       	rjmp	.+102    	; 0x1f22 <Timer_init+0x1b4>
		}
		else if(Config_Ptr->mode == COMPAREA)
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 30       	cpi	r24, 0x02	; 2
    1ec4:	a9 f4       	brne	.+42     	; 0x1ef0 <Timer_init+0x182>
		{
			/*  CTC Mode WGM12=1 WGM13=0 (Mode Number 4) */
			TCCR1B = (1<<WGM12);
    1ec6:	ee e4       	ldi	r30, 0x4E	; 78
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	88 e0       	ldi	r24, 0x08	; 8
    1ecc:	80 83       	st	Z, r24

			/* Set Compare Value */
			OCR1A = Config_Ptr->compare_value;
    1ece:	aa e4       	ldi	r26, 0x4A	; 74
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	84 81       	ldd	r24, Z+4	; 0x04
    1ed8:	95 81       	ldd	r25, Z+5	; 0x05
    1eda:	11 96       	adiw	r26, 0x01	; 1
    1edc:	9c 93       	st	X, r25
    1ede:	8e 93       	st	-X, r24

			/* Enable Timer1 Compare A Interrupt */
			TIMSK |= (1<<OCIE1A);
    1ee0:	a9 e5       	ldi	r26, 0x59	; 89
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e9 e5       	ldi	r30, 0x59	; 89
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 61       	ori	r24, 0x10	; 16
    1eec:	8c 93       	st	X, r24
    1eee:	19 c0       	rjmp	.+50     	; 0x1f22 <Timer_init+0x1b4>
		}
		else if(Config_Ptr->mode == COMPAREB)
    1ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef4:	80 81       	ld	r24, Z
    1ef6:	83 30       	cpi	r24, 0x03	; 3
    1ef8:	a1 f4       	brne	.+40     	; 0x1f22 <Timer_init+0x1b4>
		{
			/*  CTC Mode WGM12=1 WGM13=1 (Mode Number 12) */
			TCCR1B = (1<<WGM12) | (1<<WGM13);
    1efa:	ee e4       	ldi	r30, 0x4E	; 78
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	88 e1       	ldi	r24, 0x18	; 24
    1f00:	80 83       	st	Z, r24

			/* Set Compare Value */
			OCR1B = Config_Ptr->compare_value;
    1f02:	a8 e4       	ldi	r26, 0x48	; 72
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e9 81       	ldd	r30, Y+1	; 0x01
    1f08:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0a:	84 81       	ldd	r24, Z+4	; 0x04
    1f0c:	95 81       	ldd	r25, Z+5	; 0x05
    1f0e:	11 96       	adiw	r26, 0x01	; 1
    1f10:	9c 93       	st	X, r25
    1f12:	8e 93       	st	-X, r24

			/* Enable Timer1 Compare B Interrupt */
			TIMSK |= (1<<OCIE1B);
    1f14:	a9 e5       	ldi	r26, 0x59	; 89
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e9 e5       	ldi	r30, 0x59	; 89
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	88 60       	ori	r24, 0x08	; 8
    1f20:	8c 93       	st	X, r24
		}

		/* adjust clock mode */
		if(Config_Ptr->clock == F_CPU_CLOCK)
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	83 81       	ldd	r24, Z+3	; 0x03
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	41 f4       	brne	.+16     	; 0x1f3c <Timer_init+0x1ce>
		{
			TCCR1B |= (1<<CS10);
    1f2c:	ae e4       	ldi	r26, 0x4E	; 78
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ee e4       	ldi	r30, 0x4E	; 78
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	81 60       	ori	r24, 0x01	; 1
    1f38:	8c 93       	st	X, r24
    1f3a:	b9 c0       	rjmp	.+370    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_8)
    1f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f40:	83 81       	ldd	r24, Z+3	; 0x03
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	41 f4       	brne	.+16     	; 0x1f56 <Timer_init+0x1e8>
		{
			TCCR1B |= (1<<CS11);
    1f46:	ae e4       	ldi	r26, 0x4E	; 78
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	ee e4       	ldi	r30, 0x4E	; 78
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	82 60       	ori	r24, 0x02	; 2
    1f52:	8c 93       	st	X, r24
    1f54:	ac c0       	rjmp	.+344    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_64)
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	83 81       	ldd	r24, Z+3	; 0x03
    1f5c:	84 30       	cpi	r24, 0x04	; 4
    1f5e:	41 f4       	brne	.+16     	; 0x1f70 <Timer_init+0x202>
		{
			TCCR1B |= (1<<CS10) | (1<<CS11);
    1f60:	ae e4       	ldi	r26, 0x4E	; 78
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	ee e4       	ldi	r30, 0x4E	; 78
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	83 60       	ori	r24, 0x03	; 3
    1f6c:	8c 93       	st	X, r24
    1f6e:	9f c0       	rjmp	.+318    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_256)
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	83 81       	ldd	r24, Z+3	; 0x03
    1f76:	85 30       	cpi	r24, 0x05	; 5
    1f78:	41 f4       	brne	.+16     	; 0x1f8a <Timer_init+0x21c>
		{
			TCCR1B |= (1<<CS12);
    1f7a:	ae e4       	ldi	r26, 0x4E	; 78
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	ee e4       	ldi	r30, 0x4E	; 78
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	84 60       	ori	r24, 0x04	; 4
    1f86:	8c 93       	st	X, r24
    1f88:	92 c0       	rjmp	.+292    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_1024)
    1f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8e:	83 81       	ldd	r24, Z+3	; 0x03
    1f90:	86 30       	cpi	r24, 0x06	; 6
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <Timer_init+0x228>
    1f94:	8c c0       	rjmp	.+280    	; 0x20ae <Timer_init+0x340>
		{
			TCCR1B |= (1<<CS10) | (1<<CS12);
    1f96:	ae e4       	ldi	r26, 0x4E	; 78
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	ee e4       	ldi	r30, 0x4E	; 78
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	85 60       	ori	r24, 0x05	; 5
    1fa2:	8c 93       	st	X, r24
    1fa4:	84 c0       	rjmp	.+264    	; 0x20ae <Timer_init+0x340>
		}

	}
	else if(g_timer_number == Timer2)
    1fa6:	80 91 85 01 	lds	r24, 0x0185
    1faa:	82 30       	cpi	r24, 0x02	; 2
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <Timer_init+0x242>
    1fae:	7f c0       	rjmp	.+254    	; 0x20ae <Timer_init+0x340>
	{
		/* Non PWM Mode */
		TCCR2 = (1<<FOC2);
    1fb0:	e5 e4       	ldi	r30, 0x45	; 69
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 e8       	ldi	r24, 0x80	; 128
    1fb6:	80 83       	st	Z, r24

		/* Set Timer initial value */
		TCNT2 = Config_Ptr->initial_value;
    1fb8:	a4 e4       	ldi	r26, 0x44	; 68
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc0:	81 81       	ldd	r24, Z+1	; 0x01
    1fc2:	92 81       	ldd	r25, Z+2	; 0x02
    1fc4:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL)
    1fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 23       	and	r24, r24
    1fce:	41 f4       	brne	.+16     	; 0x1fe0 <Timer_init+0x272>
		{
			/* Enable Timer2 Overflow Interrupt */
			TIMSK |= (1<<TOIE2);
    1fd0:	a9 e5       	ldi	r26, 0x59	; 89
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e9 e5       	ldi	r30, 0x59	; 89
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	80 64       	ori	r24, 0x40	; 64
    1fdc:	8c 93       	st	X, r24
    1fde:	1a c0       	rjmp	.+52     	; 0x2014 <Timer_init+0x2a6>
		}
		else if(Config_Ptr->mode == COMPARE)
    1fe0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe4:	80 81       	ld	r24, Z
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	a9 f4       	brne	.+42     	; 0x2014 <Timer_init+0x2a6>
		{
			/* CTC Mode WGM21=1 & WGM20=0 */
			TCCR2 |= (1<<WGM21);
    1fea:	a5 e4       	ldi	r26, 0x45	; 69
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e5 e4       	ldi	r30, 0x45	; 69
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	88 60       	ori	r24, 0x08	; 8
    1ff6:	8c 93       	st	X, r24

			/* Set Timer compare value */
			OCR2 = Config_Ptr->compare_value;
    1ff8:	a3 e4       	ldi	r26, 0x43	; 67
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    2000:	84 81       	ldd	r24, Z+4	; 0x04
    2002:	95 81       	ldd	r25, Z+5	; 0x05
    2004:	8c 93       	st	X, r24

			/* Enable Timer0 COMPARE Interrupt */
			TIMSK |= (1<<OCIE2);
    2006:	a9 e5       	ldi	r26, 0x59	; 89
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e9 e5       	ldi	r30, 0x59	; 89
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	80 68       	ori	r24, 0x80	; 128
    2012:	8c 93       	st	X, r24
		}

		/* adjust clock mode */
		if(Config_Ptr->clock == F_CPU_CLOCK)
    2014:	e9 81       	ldd	r30, Y+1	; 0x01
    2016:	fa 81       	ldd	r31, Y+2	; 0x02
    2018:	83 81       	ldd	r24, Z+3	; 0x03
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	41 f4       	brne	.+16     	; 0x202e <Timer_init+0x2c0>
		{
			TCCR2 |= (1<<CS20);
    201e:	a5 e4       	ldi	r26, 0x45	; 69
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e5 e4       	ldi	r30, 0x45	; 69
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	81 60       	ori	r24, 0x01	; 1
    202a:	8c 93       	st	X, r24
    202c:	40 c0       	rjmp	.+128    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_8)
    202e:	e9 81       	ldd	r30, Y+1	; 0x01
    2030:	fa 81       	ldd	r31, Y+2	; 0x02
    2032:	83 81       	ldd	r24, Z+3	; 0x03
    2034:	82 30       	cpi	r24, 0x02	; 2
    2036:	41 f4       	brne	.+16     	; 0x2048 <Timer_init+0x2da>
		{
			TCCR2 |= (1<<CS21);
    2038:	a5 e4       	ldi	r26, 0x45	; 69
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e5 e4       	ldi	r30, 0x45	; 69
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	82 60       	ori	r24, 0x02	; 2
    2044:	8c 93       	st	X, r24
    2046:	33 c0       	rjmp	.+102    	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_32)
    2048:	e9 81       	ldd	r30, Y+1	; 0x01
    204a:	fa 81       	ldd	r31, Y+2	; 0x02
    204c:	83 81       	ldd	r24, Z+3	; 0x03
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	41 f4       	brne	.+16     	; 0x2062 <Timer_init+0x2f4>
		{
			TCCR2 |= (1<<CS20) | (1<<CS21);
    2052:	a5 e4       	ldi	r26, 0x45	; 69
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e5 e4       	ldi	r30, 0x45	; 69
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	83 60       	ori	r24, 0x03	; 3
    205e:	8c 93       	st	X, r24
    2060:	26 c0       	rjmp	.+76     	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_64)
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	83 81       	ldd	r24, Z+3	; 0x03
    2068:	84 30       	cpi	r24, 0x04	; 4
    206a:	41 f4       	brne	.+16     	; 0x207c <Timer_init+0x30e>
		{
			TCCR2 |= (1<<CS22);
    206c:	a5 e4       	ldi	r26, 0x45	; 69
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e5 e4       	ldi	r30, 0x45	; 69
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	8c 93       	st	X, r24
    207a:	19 c0       	rjmp	.+50     	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_256)
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	83 81       	ldd	r24, Z+3	; 0x03
    2082:	85 30       	cpi	r24, 0x05	; 5
    2084:	41 f4       	brne	.+16     	; 0x2096 <Timer_init+0x328>
		{
			TCCR2 |= (1<<CS21) | (1<<CS22);
    2086:	a5 e4       	ldi	r26, 0x45	; 69
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e5 e4       	ldi	r30, 0x45	; 69
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	86 60       	ori	r24, 0x06	; 6
    2092:	8c 93       	st	X, r24
    2094:	0c c0       	rjmp	.+24     	; 0x20ae <Timer_init+0x340>
		}
		else if(Config_Ptr->clock == F_CPU_1024)
    2096:	e9 81       	ldd	r30, Y+1	; 0x01
    2098:	fa 81       	ldd	r31, Y+2	; 0x02
    209a:	83 81       	ldd	r24, Z+3	; 0x03
    209c:	86 30       	cpi	r24, 0x06	; 6
    209e:	39 f4       	brne	.+14     	; 0x20ae <Timer_init+0x340>
		{
			TCCR2 |= (1<<CS20) | (1<<CS21) | (1<<CS22);
    20a0:	a5 e4       	ldi	r26, 0x45	; 69
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e5 e4       	ldi	r30, 0x45	; 69
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	87 60       	ori	r24, 0x07	; 7
    20ac:	8c 93       	st	X, r24
		}

	}


}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void))
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <Timer_setCallBack+0x6>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	if(g_timer_number == Timer0)
    20c6:	80 91 85 01 	lds	r24, 0x0185
    20ca:	88 23       	and	r24, r24
    20cc:	39 f4       	brne	.+14     	; 0x20dc <Timer_setCallBack+0x24>
	{
		g_Timer0callBackPtr = a_ptr;
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	90 93 80 01 	sts	0x0180, r25
    20d6:	80 93 7f 01 	sts	0x017F, r24
    20da:	15 c0       	rjmp	.+42     	; 0x2106 <Timer_setCallBack+0x4e>
	}
	else if(g_timer_number == Timer1)
    20dc:	80 91 85 01 	lds	r24, 0x0185
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	39 f4       	brne	.+14     	; 0x20f2 <Timer_setCallBack+0x3a>
	{
		g_Timer1callBackPtr = a_ptr;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	90 93 82 01 	sts	0x0182, r25
    20ec:	80 93 81 01 	sts	0x0181, r24
    20f0:	0a c0       	rjmp	.+20     	; 0x2106 <Timer_setCallBack+0x4e>
	}
	else if(g_timer_number == Timer2)
    20f2:	80 91 85 01 	lds	r24, 0x0185
    20f6:	82 30       	cpi	r24, 0x02	; 2
    20f8:	31 f4       	brne	.+12     	; 0x2106 <Timer_setCallBack+0x4e>
	{
		g_Timer2callBackPtr = a_ptr;
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	90 93 84 01 	sts	0x0184, r25
    2102:	80 93 83 01 	sts	0x0183, r24
	}

}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <Timer_stop>:
/*
 * Description: Function to stop the timer.
 */

void Timer_stop(uint8 a_timer_number)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	0f 92       	push	r0
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	89 83       	std	Y+1, r24	; 0x01
	if(a_timer_number == Timer0)
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	88 23       	and	r24, r24
    2120:	21 f4       	brne	.+8      	; 0x212a <Timer_stop+0x1a>
	{
		TCCR0 = 0;
    2122:	e3 e5       	ldi	r30, 0x53	; 83
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	10 82       	st	Z, r1
    2128:	0d c0       	rjmp	.+26     	; 0x2144 <Timer_stop+0x34>
	}
	else if(a_timer_number == Timer1)
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	21 f4       	brne	.+8      	; 0x2138 <Timer_stop+0x28>
	{
		TCCR1B = 0;
    2130:	ee e4       	ldi	r30, 0x4E	; 78
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	10 82       	st	Z, r1
    2136:	06 c0       	rjmp	.+12     	; 0x2144 <Timer_stop+0x34>
	}
	else if(a_timer_number == Timer2)
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	82 30       	cpi	r24, 0x02	; 2
    213c:	19 f4       	brne	.+6      	; 0x2144 <Timer_stop+0x34>
	{
		TCCR2 = 0;
    213e:	e5 e4       	ldi	r30, 0x45	; 69
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	10 82       	st	Z, r1
	}

}
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <__prologue_saves__>:
    214c:	2f 92       	push	r2
    214e:	3f 92       	push	r3
    2150:	4f 92       	push	r4
    2152:	5f 92       	push	r5
    2154:	6f 92       	push	r6
    2156:	7f 92       	push	r7
    2158:	8f 92       	push	r8
    215a:	9f 92       	push	r9
    215c:	af 92       	push	r10
    215e:	bf 92       	push	r11
    2160:	cf 92       	push	r12
    2162:	df 92       	push	r13
    2164:	ef 92       	push	r14
    2166:	ff 92       	push	r15
    2168:	0f 93       	push	r16
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	ca 1b       	sub	r28, r26
    2176:	db 0b       	sbc	r29, r27
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	09 94       	ijmp

00002184 <__epilogue_restores__>:
    2184:	2a 88       	ldd	r2, Y+18	; 0x12
    2186:	39 88       	ldd	r3, Y+17	; 0x11
    2188:	48 88       	ldd	r4, Y+16	; 0x10
    218a:	5f 84       	ldd	r5, Y+15	; 0x0f
    218c:	6e 84       	ldd	r6, Y+14	; 0x0e
    218e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2190:	8c 84       	ldd	r8, Y+12	; 0x0c
    2192:	9b 84       	ldd	r9, Y+11	; 0x0b
    2194:	aa 84       	ldd	r10, Y+10	; 0x0a
    2196:	b9 84       	ldd	r11, Y+9	; 0x09
    2198:	c8 84       	ldd	r12, Y+8	; 0x08
    219a:	df 80       	ldd	r13, Y+7	; 0x07
    219c:	ee 80       	ldd	r14, Y+6	; 0x06
    219e:	fd 80       	ldd	r15, Y+5	; 0x05
    21a0:	0c 81       	ldd	r16, Y+4	; 0x04
    21a2:	1b 81       	ldd	r17, Y+3	; 0x03
    21a4:	aa 81       	ldd	r26, Y+2	; 0x02
    21a6:	b9 81       	ldd	r27, Y+1	; 0x01
    21a8:	ce 0f       	add	r28, r30
    21aa:	d1 1d       	adc	r29, r1
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	ed 01       	movw	r28, r26
    21b8:	08 95       	ret

000021ba <itoa>:
    21ba:	fb 01       	movw	r30, r22
    21bc:	9f 01       	movw	r18, r30
    21be:	e8 94       	clt
    21c0:	42 30       	cpi	r20, 0x02	; 2
    21c2:	c4 f0       	brlt	.+48     	; 0x21f4 <itoa+0x3a>
    21c4:	45 32       	cpi	r20, 0x25	; 37
    21c6:	b4 f4       	brge	.+44     	; 0x21f4 <itoa+0x3a>
    21c8:	4a 30       	cpi	r20, 0x0A	; 10
    21ca:	29 f4       	brne	.+10     	; 0x21d6 <itoa+0x1c>
    21cc:	97 fb       	bst	r25, 7
    21ce:	1e f4       	brtc	.+6      	; 0x21d6 <itoa+0x1c>
    21d0:	90 95       	com	r25
    21d2:	81 95       	neg	r24
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	64 2f       	mov	r22, r20
    21d8:	77 27       	eor	r23, r23
    21da:	0e 94 0e 11 	call	0x221c	; 0x221c <__udivmodhi4>
    21de:	80 5d       	subi	r24, 0xD0	; 208
    21e0:	8a 33       	cpi	r24, 0x3A	; 58
    21e2:	0c f0       	brlt	.+2      	; 0x21e6 <itoa+0x2c>
    21e4:	89 5d       	subi	r24, 0xD9	; 217
    21e6:	81 93       	st	Z+, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	a1 f7       	brne	.-24     	; 0x21d6 <itoa+0x1c>
    21ee:	16 f4       	brtc	.+4      	; 0x21f4 <itoa+0x3a>
    21f0:	5d e2       	ldi	r21, 0x2D	; 45
    21f2:	51 93       	st	Z+, r21
    21f4:	10 82       	st	Z, r1
    21f6:	c9 01       	movw	r24, r18
    21f8:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <strrev>

000021fc <strrev>:
    21fc:	dc 01       	movw	r26, r24
    21fe:	fc 01       	movw	r30, r24
    2200:	67 2f       	mov	r22, r23
    2202:	71 91       	ld	r23, Z+
    2204:	77 23       	and	r23, r23
    2206:	e1 f7       	brne	.-8      	; 0x2200 <strrev+0x4>
    2208:	32 97       	sbiw	r30, 0x02	; 2
    220a:	04 c0       	rjmp	.+8      	; 0x2214 <strrev+0x18>
    220c:	7c 91       	ld	r23, X
    220e:	6d 93       	st	X+, r22
    2210:	70 83       	st	Z, r23
    2212:	62 91       	ld	r22, -Z
    2214:	ae 17       	cp	r26, r30
    2216:	bf 07       	cpc	r27, r31
    2218:	c8 f3       	brcs	.-14     	; 0x220c <strrev+0x10>
    221a:	08 95       	ret

0000221c <__udivmodhi4>:
    221c:	aa 1b       	sub	r26, r26
    221e:	bb 1b       	sub	r27, r27
    2220:	51 e1       	ldi	r21, 0x11	; 17
    2222:	07 c0       	rjmp	.+14     	; 0x2232 <__udivmodhi4_ep>

00002224 <__udivmodhi4_loop>:
    2224:	aa 1f       	adc	r26, r26
    2226:	bb 1f       	adc	r27, r27
    2228:	a6 17       	cp	r26, r22
    222a:	b7 07       	cpc	r27, r23
    222c:	10 f0       	brcs	.+4      	; 0x2232 <__udivmodhi4_ep>
    222e:	a6 1b       	sub	r26, r22
    2230:	b7 0b       	sbc	r27, r23

00002232 <__udivmodhi4_ep>:
    2232:	88 1f       	adc	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	5a 95       	dec	r21
    2238:	a9 f7       	brne	.-22     	; 0x2224 <__udivmodhi4_loop>
    223a:	80 95       	com	r24
    223c:	90 95       	com	r25
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	08 95       	ret

00002244 <_exit>:
    2244:	f8 94       	cli

00002246 <__stop_program>:
    2246:	ff cf       	rjmp	.-2      	; 0x2246 <__stop_program>
